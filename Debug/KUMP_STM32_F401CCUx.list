
KUMP_STM32_F401CCUx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b4  080074b4  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000220  080076dc  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080076dc  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001595f  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  00035baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00039b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8f  00000000  00000000  0003abe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017530  00000000  00000000  00053977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c0d7  00000000  00000000  0006aea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  00106fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000220 	.word	0x20000220
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007478 	.word	0x08007478

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000224 	.word	0x20000224
 80001d4:	08007478 	.word	0x08007478

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d7c:	f001 fbb8 	bl	80024f0 <HAL_ADC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d86:	f000 fe99 	bl	8001abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d9c:	f001 fddc 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000da6:	f000 fe89 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000023c 	.word	0x2000023c
 8000db8:	40012000 	.word	0x40012000

08000dbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0x8c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12f      	bne.n	8000e3e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <HAL_ADC_MspInit+0x94>)
 8000e2a:	f002 f96f 	bl	800310c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2012      	movs	r0, #18
 8000e34:	f002 f893 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e38:	2012      	movs	r0, #18
 8000e3a:	f002 f8ac 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_GPIO_Init+0xcc>)
 8000ec6:	f002 faa5 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_GPIO_Init+0xd0>)
 8000ed2:	f002 fa9f 	bl	8003414 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000ed6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_GPIO_Init+0xcc>)
 8000ef0:	f002 f90c 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0xd0>)
 8000f0e:	f002 f8fd 	bl	800310c <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020000 	.word	0x40020000

08000f28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_I2C1_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f66:	f002 fa6f 	bl	8003448 <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 fda4 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000284 	.word	0x20000284
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <HAL_I2C_MspInit+0xa4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d13b      	bne.n	800101e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc6:	2312      	movs	r3, #18
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <HAL_I2C_MspInit+0xac>)
 8000fde:	f002 f895 	bl	800310c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201f      	movs	r0, #31
 8001004:	f001 ffab 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001008:	201f      	movs	r0, #31
 800100a:	f001 ffc4 	bl	8002f96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2020      	movs	r0, #32
 8001014:	f001 ffa3 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001018:	2020      	movs	r0, #32
 800101a:	f001 ffbc 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f001 f9e8 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f856 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f7ff ff08 	bl	8000e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001044:	f7ff fe68 	bl	8000d18 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001048:	f001 f93a 	bl	80022c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800104c:	f7ff ff6c 	bl	8000f28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001050:	f000 ffce 	bl	8001ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001054:	f001 f818 	bl	8002088 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001058:	f000 ff7a 	bl	8001f50 <MX_TIM1_Init>
  MX_TIM4_Init();
 800105c:	f001 f862 	bl	8002124 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  set_status_flag(PMNC_BIT_POS);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 faff 	bl	8001664 <set_status_flag>
  set_status_flag(THMNC_BIT_POS);
 8001066:	2001      	movs	r0, #1
 8001068:	f000 fafc 	bl	8001664 <set_status_flag>

  TIM_GET_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <main+0x8c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f06f 0201 	mvn.w	r2, #1
 8001074:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <main+0x90>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f06f 0201 	mvn.w	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <main+0x94>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f06f 0201 	mvn.w	r2, #1
 8001088:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim4,TIM_IT_UPDATE);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <main+0x98>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f06f 0201 	mvn.w	r2, #1
 8001092:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <main+0x94>)
 8001096:	f004 fd55 	bl	8005b44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <main+0x98>)
 800109c:	f004 fd52 	bl	8005b44 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80010a0:	480b      	ldr	r0, [pc, #44]	; (80010d0 <main+0x9c>)
 80010a2:	f001 fa69 	bl	8002578 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		sht3x_read_temperature_and_humidity(&hi2c1, &sht31, &unn, usRegInputBuf);
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <main+0xa0>)
 80010a8:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <main+0xa4>)
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <main+0xa8>)
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <main+0xac>)
 80010ae:	f000 fd0b 	bl	8001ac8 <sht3x_read_temperature_and_humidity>
		Get_Pressure_Value(&adc_struct);
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <main+0xb0>)
 80010b4:	f000 fa04 	bl	80014c0 <Get_Pressure_Value>
		data_exchange(&uart);
 80010b8:	480b      	ldr	r0, [pc, #44]	; (80010e8 <main+0xb4>)
 80010ba:	f000 f877 	bl	80011ac <data_exchange>
		sht3x_read_temperature_and_humidity(&hi2c1, &sht31, &unn, usRegInputBuf);
 80010be:	e7f2      	b.n	80010a6 <main+0x72>
 80010c0:	2000039c 	.word	0x2000039c
 80010c4:	200003e4 	.word	0x200003e4
 80010c8:	2000042c 	.word	0x2000042c
 80010cc:	20000474 	.word	0x20000474
 80010d0:	2000023c 	.word	0x2000023c
 80010d4:	200002dc 	.word	0x200002dc
 80010d8:	200002f0 	.word	0x200002f0
 80010dc:	200002f4 	.word	0x200002f4
 80010e0:	20000284 	.word	0x20000284
 80010e4:	20000360 	.word	0x20000360
 80010e8:	20000000 	.word	0x20000000

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 f9b4 	bl	8007468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <SystemClock_Config+0xb8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemClock_Config+0xb8>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <SystemClock_Config+0xb8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <SystemClock_Config+0xbc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <SystemClock_Config+0xbc>)
 800113a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <SystemClock_Config+0xbc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	4618      	mov	r0, r3
 8001160:	f004 f848 	bl	80051f4 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800116a:	f000 fca7 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001172:	2301      	movs	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 faa9 	bl	80056e4 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001198:	f000 fc90 	bl	8001abc <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3750      	adds	r7, #80	; 0x50
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <data_exchange>:

/* USER CODE BEGIN 4 */

void data_exchange(struct Uart *RxTx) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

	switch (RxTx->state) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d876      	bhi.n	80012ac <data_exchange+0x100>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <data_exchange+0x18>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	08001275 	.word	0x08001275
 80011cc:	080011fd 	.word	0x080011fd
 80011d0:	08001265 	.word	0x08001265

	case start_uart_receive_data:

		if(UART_Start_Receive_IT(&huart1, uart.p_uart_inbuf++, 1)==HAL_OK){
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <data_exchange+0x108>)
 80011d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <data_exchange+0x108>)
 80011de:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	4834      	ldr	r0, [pc, #208]	; (80012b8 <data_exchange+0x10c>)
 80011e8:	f005 fcce 	bl	8006b88 <UART_Start_Receive_IT>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d157      	bne.n	80012a2 <data_exchange+0xf6>

			RxTx->state = check_received_data;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2202      	movs	r2, #2
 80011f6:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		};

		break;
 80011fa:	e052      	b.n	80012a2 <data_exchange+0xf6>

	case check_received_data:

		if (RxTx->rx_done_flag) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d050      	beq.n	80012a6 <data_exchange+0xfa>
			RxTx->rx_done_flag = false;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
			RxTx->p_uart_inbuf = RxTx->uart_inbuf;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	1cda      	adds	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			if ((Check_Uart_inbuff(RxTx) == 0)
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fa57 	bl	80016c8 <Check_Uart_inbuff>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <data_exchange+0x88>
					&& (RxTx->uart_inbuf[0] == DEV_ADDR)) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	78db      	ldrb	r3, [r3, #3]
 8001224:	2240      	movs	r2, #64	; 0x40
 8001226:	4293      	cmp	r3, r2
 8001228:	d104      	bne.n	8001234 <data_exchange+0x88>
				RxTx->state = modbus_functions;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2203      	movs	r2, #3
 800122e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8001232:	e006      	b.n	8001242 <data_exchange+0x96>
			} else {

				HAL_TIM_Base_Stop_IT(&htim2);
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <data_exchange+0x110>)
 8001236:	f004 fce7 	bl	8005c08 <HAL_TIM_Base_Stop_IT>
				RxTx->state = start_uart_receive_data;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			}
			FE_Error = 0;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <data_exchange+0x114>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
			OE_Error = 0;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <data_exchange+0x118>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
			PE_Error = 0;
 800124e:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <data_exchange+0x11c>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
			NE_Error = 0;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <data_exchange+0x120>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			RxTx->receive_byte = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

		}

		break;
 8001262:	e020      	b.n	80012a6 <data_exchange+0xfa>

	case modbus_functions:
		modbus_function(RxTx);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f833 	bl	80012d0 <modbus_function>
		RxTx->state = start_uart_transmit_data;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		break;
 8001272:	e01b      	b.n	80012ac <data_exchange+0x100>

	case start_uart_transmit_data:

		if (RxTx->tx_ready_flag == true) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	789b      	ldrb	r3, [r3, #2]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d016      	beq.n	80012aa <data_exchange+0xfe>
			RxTx->tx_ready_flag = false;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, RxTx->uart_outbuf,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f203 1103 	addw	r1, r3, #259	; 0x103
					RxTx->byte_to_send);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
			HAL_UART_Transmit_IT(&huart1, RxTx->uart_outbuf,
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <data_exchange+0x10c>)
 8001294:	f005 f8d1 	bl	800643a <HAL_UART_Transmit_IT>
			RxTx->state = start_uart_receive_data;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212

		}
		break;
 80012a0:	e003      	b.n	80012aa <data_exchange+0xfe>
		break;
 80012a2:	bf00      	nop
 80012a4:	e002      	b.n	80012ac <data_exchange+0x100>
		break;
 80012a6:	bf00      	nop
 80012a8:	e000      	b.n	80012ac <data_exchange+0x100>
		break;
 80012aa:	bf00      	nop

	}

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200004bc 	.word	0x200004bc
 80012bc:	200003e4 	.word	0x200003e4
 80012c0:	200002e8 	.word	0x200002e8
 80012c4:	200002e9 	.word	0x200002e9
 80012c8:	200002ea 	.word	0x200002ea
 80012cc:	200002eb 	.word	0x200002eb

080012d0 <modbus_function>:

void modbus_function(struct Uart *RxTx) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

////////////////READ_INPUT_REGISTERS//////////////////
	if (RxTx->uart_inbuf[1] == FC_RD_INPUT_RG) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	791b      	ldrb	r3, [r3, #4]
 80012dc:	2204      	movs	r2, #4
 80012de:	4293      	cmp	r3, r2
 80012e0:	d124      	bne.n	800132c <modbus_function+0x5c>

		unn.ch_val[1] = RxTx->uart_inbuf[2];
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	795a      	ldrb	r2, [r3, #5]
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <modbus_function+0x10c>)
 80012e8:	705a      	strb	r2, [r3, #1]
		unn.ch_val[0] = RxTx->uart_inbuf[3];
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	799a      	ldrb	r2, [r3, #6]
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <modbus_function+0x10c>)
 80012f0:	701a      	strb	r2, [r3, #0]
		wreq_addr = unn.w_val;
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <modbus_function+0x10c>)
 80012f4:	881a      	ldrh	r2, [r3, #0]
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <modbus_function+0x110>)
 80012f8:	801a      	strh	r2, [r3, #0]
		unn.ch_val[1] = RxTx->uart_inbuf[4];
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	79da      	ldrb	r2, [r3, #7]
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <modbus_function+0x10c>)
 8001300:	705a      	strb	r2, [r3, #1]
		unn.ch_val[0] = RxTx->uart_inbuf[5];
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7a1a      	ldrb	r2, [r3, #8]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <modbus_function+0x10c>)
 8001308:	701a      	strb	r2, [r3, #0]
		wreq_dt = unn.w_val;
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <modbus_function+0x10c>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <modbus_function+0x114>)
 8001310:	801a      	strh	r2, [r3, #0]
		exception = ReadInputReg(RxTx, wreq_addr, wreq_dt);
 8001312:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <modbus_function+0x110>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <modbus_function+0x114>)
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	b212      	sxth	r2, r2
 800131c:	4619      	mov	r1, r3
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f864 	bl	80013ec <ReadInputReg>
 8001324:	4603      	mov	r3, r0
 8001326:	4a30      	ldr	r2, [pc, #192]	; (80013e8 <modbus_function+0x118>)
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e003      	b.n	8001334 <modbus_function+0x64>

	} else {

		exception = EXCEPTION_CODE1;
 800132c:	2301      	movs	r3, #1
 800132e:	461a      	mov	r2, r3
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <modbus_function+0x118>)
 8001332:	601a      	str	r2, [r3, #0]
	}
////////////////END_READ_INPUT_REGISTERS//////////////////
	if (exception) {
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <modbus_function+0x118>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <modbus_function+0xae>

		RxTx->uart_outbuf[0] = DEV_ADDR;
 800133c:	2240      	movs	r2, #64	; 0x40
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		RxTx->uart_outbuf[1] = RxTx->uart_inbuf[1] | 0x80;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	791b      	ldrb	r3, [r3, #4]
 8001348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800134c:	b2da      	uxtb	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		RxTx->uart_outbuf[2] = exception;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <modbus_function+0x118>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		crc16_out(0x3, RxTx->uart_outbuf);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f203 1303 	addw	r3, r3, #259	; 0x103
 8001366:	4619      	mov	r1, r3
 8001368:	2003      	movs	r0, #3
 800136a:	f000 fa57 	bl	800181c <crc16_out>
		RxTx->byte_to_send = 5;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
		exception = 0;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <modbus_function+0x118>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
		RxTx->byte_to_send = (wreq_dt << 1) + FC_04_HLENGTH_WITH_CRC;
		crc16_out((wreq_dt << 1) + FC_04_HLENGTH_WITHOUT_CRC,RxTx->uart_outbuf);

	}

}
 800137c:	e02a      	b.n	80013d4 <modbus_function+0x104>
		RxTx->uart_outbuf[0] = DEV_ADDR;
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		RxTx->uart_outbuf[1] = RxTx->uart_inbuf[1];
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	791a      	ldrb	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		RxTx->uart_outbuf[2] = wreq_dt << 1;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <modbus_function+0x114>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	b2da      	uxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		RxTx->byte_to_send = (wreq_dt << 1) + FC_04_HLENGTH_WITH_CRC;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <modbus_function+0x114>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2205      	movs	r2, #5
 80013ac:	4413      	add	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
		crc16_out((wreq_dt << 1) + FC_04_HLENGTH_WITHOUT_CRC,RxTx->uart_outbuf);
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <modbus_function+0x114>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2203      	movs	r2, #3
 80013c2:	4413      	add	r3, r2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f203 1303 	addw	r3, r3, #259	; 0x103
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f000 fa24 	bl	800181c <crc16_out>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200002f0 	.word	0x200002f0
 80013e0:	200002e4 	.word	0x200002e4
 80013e4:	200002e6 	.word	0x200002e6
 80013e8:	200002ec 	.word	0x200002ec

080013ec <ReadInputReg>:

int ReadInputReg(struct Uart *RxTx, unsigned short usAddress,signed short sNRegs) {
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	803b      	strh	r3, [r7, #0]

	int iRegIndex = 0x0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
	int RegBufferIndex = 0x3;
 8001400:	2303      	movs	r3, #3
 8001402:	60bb      	str	r3, [r7, #8]

	if ((sNRegs >= 0x0001) && (sNRegs <= REG_INPUT_NREGS)) {
 8001404:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dd47      	ble.n	800149c <ReadInputReg+0xb0>
 800140c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001410:	2204      	movs	r2, #4
 8001412:	4293      	cmp	r3, r2
 8001414:	dc42      	bgt.n	800149c <ReadInputReg+0xb0>

		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 8001416:	2200      	movs	r2, #0
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	4293      	cmp	r3, r2
 800141c:	d339      	bcc.n	8001492 <ReadInputReg+0xa6>
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001424:	441a      	add	r2, r3
 8001426:	2300      	movs	r3, #0
 8001428:	4619      	mov	r1, r3
 800142a:	2304      	movs	r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	429a      	cmp	r2, r3
 8001430:	dc2f      	bgt.n	8001492 <ReadInputReg+0xa6>
			iRegIndex = (int) (usAddress - usRegInputStart);
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <ReadInputReg+0xc8>)
 8001436:	8812      	ldrh	r2, [r2, #0]
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
			while (sNRegs > 0) {
 800143c:	e024      	b.n	8001488 <ReadInputReg+0x9c>
				RxTx->p_uart_outbuf[RegBufferIndex++] = (uint8_t) (usRegInputBuf[iRegIndex] >> 8);
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <ReadInputReg+0xcc>)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	b218      	sxth	r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4413      	add	r3, r2
 8001458:	b2c2      	uxtb	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
				RxTx->p_uart_outbuf[RegBufferIndex++] = (uint8_t) (usRegInputBuf[iRegIndex] & 0xFF);
 800145c:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <ReadInputReg+0xcc>)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	b2c2      	uxtb	r2, r0
 8001474:	701a      	strb	r2, [r3, #0]
				iRegIndex++;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
				sNRegs--;
 800147c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b01      	subs	r3, #1
 8001484:	b29b      	uxth	r3, r3
 8001486:	803b      	strh	r3, [r7, #0]
			while (sNRegs > 0) {
 8001488:	f9b7 3000 	ldrsh.w	r3, [r7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	dcd6      	bgt.n	800143e <ReadInputReg+0x52>
		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 8001490:	e008      	b.n	80014a4 <ReadInputReg+0xb8>

		else

		{

			exception = EXCEPTION_CODE2;
 8001492:	2302      	movs	r3, #2
 8001494:	461a      	mov	r2, r3
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <ReadInputReg+0xd0>)
 8001498:	601a      	str	r2, [r3, #0]
		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 800149a:	e003      	b.n	80014a4 <ReadInputReg+0xb8>
		}
	}

	else {

		exception = EXCEPTION_CODE3;
 800149c:	2303      	movs	r3, #3
 800149e:	461a      	mov	r2, r3
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <ReadInputReg+0xd0>)
 80014a2:	601a      	str	r2, [r3, #0]
	}

	return exception;
 80014a4:	4b05      	ldr	r3, [pc, #20]	; (80014bc <ReadInputReg+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200002d8 	.word	0x200002d8
 80014b8:	200002dc 	.word	0x200002dc
 80014bc:	200002ec 	.word	0x200002ec

080014c0 <Get_Pressure_Value>:


float Get_Pressure_Value(struct Adc *adc_s) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	if (adc_s->adc_data_ready) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d07a      	beq.n	80015c8 <Get_Pressure_Value+0x108>
		adc_s->adc_data_ready = false;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		adc_s->adc_val = get_filtred_data(adc_s->adc, ADC_FILTR_WINDOW);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	210a      	movs	r1, #10
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f890 	bl	8001604 <get_filtred_data>
 80014e4:	eef0 7a40 	vmov.f32	s15, s0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		adc_s->voltage = adc_s->adc_val * 3.3 / 4096;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ffd4 	bl	80004a0 <__aeabi_f2d>
 80014f8:	a339      	add	r3, pc, #228	; (adr r3, 80015e0 <Get_Pressure_Value+0x120>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f827 	bl	8000550 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <Get_Pressure_Value+0x138>)
 8001510:	f7ff f948 	bl	80007a4 <__aeabi_ddiv>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fa2a 	bl	8000974 <__aeabi_d2f>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
		adc_s->pressure = (adc_s->voltage / 3.3 + 0.00842) / 0.002421;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffb8 	bl	80004a0 <__aeabi_f2d>
 8001530:	a32b      	add	r3, pc, #172	; (adr r3, 80015e0 <Get_Pressure_Value+0x120>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f935 	bl	80007a4 <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	a329      	add	r3, pc, #164	; (adr r3, 80015e8 <Get_Pressure_Value+0x128>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fe4c 	bl	80001e4 <__adddf3>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	a326      	add	r3, pc, #152	; (adr r3, 80015f0 <Get_Pressure_Value+0x130>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f923 	bl	80007a4 <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa05 	bl	8000974 <__aeabi_d2f>
 800156a:	4602      	mov	r2, r0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	639a      	str	r2, [r3, #56]	; 0x38

		usRegInputBuf[1] = adc_s->pressure*10;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001576:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800157a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001582:	ee17 3a90 	vmov	r3, s15
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <Get_Pressure_Value+0x13c>)
 800158a:	805a      	strh	r2, [r3, #2]
		reset_status_flag(PMNC_BIT_POS);
 800158c:	2000      	movs	r0, #0
 800158e:	f000 f881 	bl	8001694 <reset_status_flag>

		if (adc_s->pressure > MAX_PRESS || adc_s->pressure < MIN_PRESS){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001598:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001600 <Get_Pressure_Value+0x140>
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dc09      	bgt.n	80015ba <Get_Pressure_Value+0xfa>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015ac:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	d503      	bpl.n	80015c2 <Get_Pressure_Value+0x102>

			set_status_flag(POL_BIT_POS);
 80015ba:	2003      	movs	r0, #3
 80015bc:	f000 f852 	bl	8001664 <set_status_flag>
 80015c0:	e002      	b.n	80015c8 <Get_Pressure_Value+0x108>
		}
		else
		{
			reset_status_flag(POL_BIT_POS);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f000 f866 	bl	8001694 <reset_status_flag>



	}

	return adc_s->adc_val;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	ee07 3a90 	vmov	s15, r3
}
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	66666666 	.word	0x66666666
 80015e4:	400a6666 	.word	0x400a6666
 80015e8:	450efdca 	.word	0x450efdca
 80015ec:	3f813e81 	.word	0x3f813e81
 80015f0:	7a5b0ff1 	.word	0x7a5b0ff1
 80015f4:	3f63d534 	.word	0x3f63d534
 80015f8:	40b00000 	.word	0x40b00000
 80015fc:	200002dc 	.word	0x200002dc
 8001600:	43cb0000 	.word	0x43cb0000

08001604 <get_filtred_data>:



float get_filtred_data(float *buff,int window) {
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]

	float sum = 0;
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < window; i++) {
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	e00e      	b.n	8001638 <get_filtred_data+0x34>

		sum += buff[i];
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ed97 7a03 	vldr	s14, [r7, #12]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < window; i++) {
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	dbec      	blt.n	800161a <get_filtred_data+0x16>
	}
	return sum / window;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	ed97 7a03 	vldr	s14, [r7, #12]
 800164e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001652:	eef0 7a66 	vmov.f32	s15, s13

}
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <set_status_flag>:



void set_status_flag(int flag_pos){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

	usRegInputBuf[0] |= 1<<flag_pos;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <set_status_flag+0x2c>)
 800166e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001672:	2101      	movs	r1, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	b21b      	sxth	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b21a      	sxth	r2, r3
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <set_status_flag+0x2c>)
 8001682:	801a      	strh	r2, [r3, #0]

}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	200002dc 	.word	0x200002dc

08001694 <reset_status_flag>:

void reset_status_flag(int flag_pos){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

	usRegInputBuf[0] &= ~(1<<flag_pos);
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <reset_status_flag+0x30>)
 800169e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016a2:	2101      	movs	r1, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <reset_status_flag+0x30>)
 80016b6:	801a      	strh	r2, [r3, #0]

}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	200002dc 	.word	0x200002dc

080016c8 <Check_Uart_inbuff>:



signed char Check_Uart_inbuff(struct Uart *RxTx) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

	if (RxTx->receive_byte >= ADU_MAX) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80016d6:	461a      	mov	r2, r3
 80016d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016dc:	429a      	cmp	r2, r3
 80016de:	d302      	bcc.n	80016e6 <Check_Uart_inbuff+0x1e>

		return -4;
 80016e0:	f06f 0303 	mvn.w	r3, #3
 80016e4:	e02c      	b.n	8001740 <Check_Uart_inbuff+0x78>
	}

	if (RxTx->receive_byte < ADU_MIN) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80016ec:	461a      	mov	r2, r3
 80016ee:	2305      	movs	r3, #5
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d202      	bcs.n	80016fa <Check_Uart_inbuff+0x32>

		return -3;
 80016f4:	f06f 0302 	mvn.w	r3, #2
 80016f8:	e022      	b.n	8001740 <Check_Uart_inbuff+0x78>
	}

	if (FE_Error || OE_Error || PE_Error||NE_Error) {
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <Check_Uart_inbuff+0x80>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10b      	bne.n	800171a <Check_Uart_inbuff+0x52>
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <Check_Uart_inbuff+0x84>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d107      	bne.n	800171a <Check_Uart_inbuff+0x52>
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <Check_Uart_inbuff+0x88>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d103      	bne.n	800171a <Check_Uart_inbuff+0x52>
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <Check_Uart_inbuff+0x8c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <Check_Uart_inbuff+0x58>

		return -2;
 800171a:	f06f 0301 	mvn.w	r3, #1
 800171e:	e00f      	b.n	8001740 <Check_Uart_inbuff+0x78>
	}

	if (crc16in(RxTx->receive_byte, RxTx->uart_inbuf) != 0) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	4619      	mov	r1, r3
 800172c:	4610      	mov	r0, r2
 800172e:	f000 f813 	bl	8001758 <crc16in>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d002      	beq.n	800173e <Check_Uart_inbuff+0x76>

		return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	e000      	b.n	8001740 <Check_Uart_inbuff+0x78>
	}

	return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200002e8 	.word	0x200002e8
 800174c:	200002e9 	.word	0x200002e9
 8001750:	200002ea 	.word	0x200002ea
 8001754:	200002eb 	.word	0x200002eb

08001758 <crc16in>:

char crc16in(unsigned char size, unsigned char *inbuf) {
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
	unsigned short w = 0xffff, w1;
 8001764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001768:	82fb      	strh	r3, [r7, #22]
	char shift_cnt, jj;
	unsigned short ii1 = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	827b      	strh	r3, [r7, #18]
	union {
		char c[2];
		unsigned short w;
	} u;

	size = size - 2;
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	3b02      	subs	r3, #2
 8001772:	71fb      	strb	r3, [r7, #7]
	u.c[0] = inbuf[size];
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	733b      	strb	r3, [r7, #12]
	u.c[1] = inbuf[size + 1];
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	3301      	adds	r3, #1
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	737b      	strb	r3, [r7, #13]
	jj = size;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	753b      	strb	r3, [r7, #20]

	for (; jj > 0; jj--) {
 800178e:	e032      	b.n	80017f6 <crc16in+0x9e>
		w1 = (w >> 8) << 8;
 8001790:	8afb      	ldrh	r3, [r7, #22]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	823b      	strh	r3, [r7, #16]
		w = (w1 + ((w - w1) ^ (unsigned short) inbuf[ii1++]));
 800179a:	8afa      	ldrh	r2, [r7, #22]
 800179c:	8a3b      	ldrh	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	8a7b      	ldrh	r3, [r7, #18]
 80017a6:	1c59      	adds	r1, r3, #1
 80017a8:	8279      	strh	r1, [r7, #18]
 80017aa:	4619      	mov	r1, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	440b      	add	r3, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b21b      	sxth	r3, r3
 80017b4:	4053      	eors	r3, r2
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	8a3b      	ldrh	r3, [r7, #16]
 80017bc:	4413      	add	r3, r2
 80017be:	82fb      	strh	r3, [r7, #22]

		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	757b      	strb	r3, [r7, #21]
 80017c4:	e011      	b.n	80017ea <crc16in+0x92>
			if ((w & 0x01) == 1)
 80017c6:	8afb      	ldrh	r3, [r7, #22]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <crc16in+0x86>
				w = ((w >> 1) ^ 0xa001);
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <crc16in+0xc0>)
 80017d8:	4053      	eors	r3, r2
 80017da:	82fb      	strh	r3, [r7, #22]
 80017dc:	e002      	b.n	80017e4 <crc16in+0x8c>
			else
				w >>= 1;
 80017de:	8afb      	ldrh	r3, [r7, #22]
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	82fb      	strh	r3, [r7, #22]
		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	3301      	adds	r3, #1
 80017e8:	757b      	strb	r3, [r7, #21]
 80017ea:	7d7b      	ldrb	r3, [r7, #21]
 80017ec:	2b07      	cmp	r3, #7
 80017ee:	d9ea      	bls.n	80017c6 <crc16in+0x6e>
	for (; jj > 0; jj--) {
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	753b      	strb	r3, [r7, #20]
 80017f6:	7d3b      	ldrb	r3, [r7, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1c9      	bne.n	8001790 <crc16in+0x38>
		}
	}

	if (w == u.w)
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	8afa      	ldrh	r2, [r7, #22]
 8001800:	429a      	cmp	r2, r3
 8001802:	d101      	bne.n	8001808 <crc16in+0xb0>
		return 0;
 8001804:	2300      	movs	r3, #0
 8001806:	e000      	b.n	800180a <crc16in+0xb2>
	else
		return (char) -1;
 8001808:	23ff      	movs	r3, #255	; 0xff
}
 800180a:	4618      	mov	r0, r3
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	ffffa001 	.word	0xffffa001

0800181c <crc16_out>:


void crc16_out(unsigned char size, unsigned char *outbuf) {
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
	unsigned short w = 0xffff, w1;
 8001828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182c:	81fb      	strh	r3, [r7, #14]
	char shift_cnt, jj;
	unsigned short ii2 = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	817b      	strh	r3, [r7, #10]

	jj = size;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	733b      	strb	r3, [r7, #12]

	for (; jj > 0; jj--) {
 8001836:	e032      	b.n	800189e <crc16_out+0x82>
		w1 = (w >> 8) << 8;
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	b29b      	uxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	813b      	strh	r3, [r7, #8]
		w = (w1 + ((w - w1) ^ (unsigned short) outbuf[ii2++]));
 8001842:	89fa      	ldrh	r2, [r7, #14]
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	b21a      	sxth	r2, r3
 800184c:	897b      	ldrh	r3, [r7, #10]
 800184e:	1c59      	adds	r1, r3, #1
 8001850:	8179      	strh	r1, [r7, #10]
 8001852:	4619      	mov	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	440b      	add	r3, r1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4053      	eors	r3, r2
 800185e:	b21b      	sxth	r3, r3
 8001860:	b29a      	uxth	r2, r3
 8001862:	893b      	ldrh	r3, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	81fb      	strh	r3, [r7, #14]

		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 8001868:	2300      	movs	r3, #0
 800186a:	737b      	strb	r3, [r7, #13]
 800186c:	e011      	b.n	8001892 <crc16_out+0x76>
			if ((w & 0x01) == 1)
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <crc16_out+0x6a>
				w = ((w >> 1) ^ 0xa001);
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <crc16_out+0xb8>)
 8001880:	4053      	eors	r3, r2
 8001882:	81fb      	strh	r3, [r7, #14]
 8001884:	e002      	b.n	800188c <crc16_out+0x70>
			else
				w >>= 1;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	81fb      	strh	r3, [r7, #14]
		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 800188c:	7b7b      	ldrb	r3, [r7, #13]
 800188e:	3301      	adds	r3, #1
 8001890:	737b      	strb	r3, [r7, #13]
 8001892:	7b7b      	ldrb	r3, [r7, #13]
 8001894:	2b07      	cmp	r3, #7
 8001896:	d9ea      	bls.n	800186e <crc16_out+0x52>
	for (; jj > 0; jj--) {
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	733b      	strb	r3, [r7, #12]
 800189e:	7b3b      	ldrb	r3, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1c9      	bne.n	8001838 <crc16_out+0x1c>
		}
	}

	outbuf[size++] = (char) (w & 0x00ff);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	71fa      	strb	r2, [r7, #7]
 80018aa:	461a      	mov	r2, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	89fa      	ldrh	r2, [r7, #14]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]
	outbuf[size] = (char) (w >> 8);
 80018b6:	89fb      	ldrh	r3, [r7, #14]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	b299      	uxth	r1, r3
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	ffffa001 	.word	0xffffa001

080018d8 <HAL_I2C_MemRxCpltCallback>:





void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	if(hi2c == &hi2c1){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_I2C_MemRxCpltCallback+0x24>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d103      	bne.n	80018f0 <HAL_I2C_MemRxCpltCallback+0x18>

		sht31.rx_done_flag = true;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_I2C_MemRxCpltCallback+0x28>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	}

}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000284 	.word	0x20000284
 8001900:	200002f4 	.word	0x200002f4

08001904 <HAL_I2C_ErrorCallback>:


HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

	sht31.i2c_ecode = HAL_I2C_GetError(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f002 fa09 	bl	8003d24 <HAL_I2C_GetError>
 8001912:	4603      	mov	r3, r0
 8001914:	4a02      	ldr	r2, [pc, #8]	; (8001920 <HAL_I2C_ErrorCallback+0x1c>)
 8001916:	6693      	str	r3, [r2, #104]	; 0x68
//	I2C_FLAG_ARLO

}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002f4 	.word	0x200002f4

08001924 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1) {
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_ADC_ConvCpltCallback+0x50>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d11b      	bne.n	800196c <HAL_ADC_ConvCpltCallback+0x48>

		adc_struct.adc[adc_struct.adc_counter++] = HAL_ADC_GetValue(&hadc1);
 8001934:	480f      	ldr	r0, [pc, #60]	; (8001974 <HAL_ADC_ConvCpltCallback+0x50>)
 8001936:	f000 ffed 	bl	8002914 <HAL_ADC_GetValue>
 800193a:	ee07 0a90 	vmov	s15, r0
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 8001946:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	edc3 7a00 	vstr	s15, [r3]
		adc_struct.adc_data_ready = true;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if (adc_struct.adc_counter == 10) {
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	2b0a      	cmp	r3, #10
 8001964:	d102      	bne.n	800196c <HAL_ADC_ConvCpltCallback+0x48>
			adc_struct.adc_counter = 0;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_ADC_ConvCpltCallback+0x54>)
 8001968:	2200      	movs	r2, #0
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
		}

	}

}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000023c 	.word	0x2000023c
 8001978:	20000360 	.word	0x20000360

0800197c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_UART_TxCpltCallback+0x24>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <HAL_UART_TxCpltCallback+0x16>
		uart.tx_done_flag = true;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_UART_TxCpltCallback+0x28>)
 800198e:	2201      	movs	r2, #1
 8001990:	705a      	strb	r2, [r3, #1]

	}
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200004bc 	.word	0x200004bc
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_UART_RxCpltCallback+0x78>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d12e      	bne.n	8001a16 <HAL_UART_RxCpltCallback+0x6e>

		HAL_TIM_Base_Stop_IT(&htim1);
 80019b8:	481a      	ldr	r0, [pc, #104]	; (8001a24 <HAL_UART_RxCpltCallback+0x7c>)
 80019ba:	f004 f925 	bl	8005c08 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 80019be:	481a      	ldr	r0, [pc, #104]	; (8001a28 <HAL_UART_RxCpltCallback+0x80>)
 80019c0:	f004 f922 	bl	8005c08 <HAL_TIM_Base_Stop_IT>

		__HAL_TIM_SetCounter(&htim1,0x0);
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_RxCpltCallback+0x7c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim2,0x0);
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_UART_RxCpltCallback+0x80>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Base_Start_IT(&htim1);
 80019d4:	4813      	ldr	r0, [pc, #76]	; (8001a24 <HAL_UART_RxCpltCallback+0x7c>)
 80019d6:	f004 f8b5 	bl	8005b44 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <HAL_UART_RxCpltCallback+0x80>)
 80019dc:	f004 f8b2 	bl	8005b44 <HAL_TIM_Base_Start_IT>

		uart.uart_ecode = HAL_UART_GetError(&huart1);
 80019e0:	480f      	ldr	r0, [pc, #60]	; (8001a20 <HAL_UART_RxCpltCallback+0x78>)
 80019e2:	f005 f8c5 	bl	8006b70 <HAL_UART_GetError>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_UART_RxCpltCallback+0x84>)
 80019ea:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		uart.receive_byte++;
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_UART_RxCpltCallback+0x84>)
 80019f0:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_UART_RxCpltCallback+0x84>)
 80019fa:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		UART_Start_Receive_IT(&huart1, uart.p_uart_inbuf++, 1);
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_UART_RxCpltCallback+0x84>)
 8001a00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4909      	ldr	r1, [pc, #36]	; (8001a2c <HAL_UART_RxCpltCallback+0x84>)
 8001a08:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4803      	ldr	r0, [pc, #12]	; (8001a20 <HAL_UART_RxCpltCallback+0x78>)
 8001a12:	f005 f8b9 	bl	8006b88 <UART_Start_Receive_IT>

	}

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200004bc 	.word	0x200004bc
 8001a24:	2000039c 	.word	0x2000039c
 8001a28:	200003e4 	.word	0x200003e4
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_UART_ErrorCallback+0x74>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d12b      	bne.n	8001a98 <HAL_UART_ErrorCallback+0x68>

		if (uart.uart_ecode & UART_FLAG_FE) {
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_UART_ErrorCallback+0x78>)
 8001a42:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_UART_ErrorCallback+0x24>

			FE_Error = true;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_UART_ErrorCallback+0x7c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
		}
		if (uart.uart_ecode & UART_FLAG_PE) {
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_UART_ErrorCallback+0x78>)
 8001a56:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_UART_ErrorCallback+0x38>

			PE_Error = true;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_UART_ErrorCallback+0x80>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
		}
		if (uart.uart_ecode & UART_FLAG_ORE) {
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_UART_ErrorCallback+0x78>)
 8001a6a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_UART_ErrorCallback+0x4c>

			OE_Error = true;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_UART_ErrorCallback+0x84>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
		}
		if (uart.uart_ecode &  USART_SR_NE ){
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_UART_ErrorCallback+0x78>)
 8001a7e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d002      	beq.n	8001a90 <HAL_UART_ErrorCallback+0x60>

			NE_Error = true;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_UART_ErrorCallback+0x88>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
		}
		uart.uart_ecode = 0;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_UART_ErrorCallback+0x78>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	}
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	200004bc 	.word	0x200004bc
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	200002e8 	.word	0x200002e8
 8001ab0:	200002ea 	.word	0x200002ea
 8001ab4:	200002e9 	.word	0x200002e9
 8001ab8:	200002eb 	.word	0x200002eb

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>
	...

08001ac8 <sht3x_read_temperature_and_humidity>:

}


bool sht3x_read_temperature_and_humidity(I2C_HandleTypeDef *hi2c, struct sht31_struct* sht,union unn_t *unn, signed short *RegBuff )
 {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]

 	if(sht->rx_done_flag){
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80e9 	beq.w	8001cb4 <sht3x_read_temperature_and_humidity+0x1ec>

 		sht->rx_done_flag = false;
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

 	 	uint8_t temperature_crc = crc8(sht->i2c_inbuff, 2);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f8f4 	bl	8001cdc <crc8>
 8001af4:	4603      	mov	r3, r0
 8001af6:	77fb      	strb	r3, [r7, #31]
 	 	uint8_t humidity_crc = crc8(sht->i2c_inbuff + 3, 2);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3303      	adds	r3, #3
 8001afc:	2102      	movs	r1, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f8ec 	bl	8001cdc <crc8>
 8001b04:	4603      	mov	r3, r0
 8001b06:	77bb      	strb	r3, [r7, #30]

 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	789b      	ldrb	r3, [r3, #2]
 8001b0c:	7ffa      	ldrb	r2, [r7, #31]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	f040 80cb 	bne.w	8001caa <sht3x_read_temperature_and_humidity+0x1e2>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	795b      	ldrb	r3, [r3, #5]
 8001b18:	7fba      	ldrb	r2, [r7, #30]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f040 80c5 	bne.w	8001caa <sht3x_read_temperature_and_humidity+0x1e2>

 	 		unn->ch_val[1] = sht->i2c_inbuff[0];
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	705a      	strb	r2, [r3, #1]
			unn->ch_val[0] = sht->i2c_inbuff[1];
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	785a      	ldrb	r2, [r3, #1]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	701a      	strb	r2, [r3, #0]
			float temperature = unn->w_val;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	edc7 7a06 	vstr	s15, [r7, #24]

			unn->ch_val[1] = sht->i2c_inbuff[3];
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	78da      	ldrb	r2, [r3, #3]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	705a      	strb	r2, [r3, #1]
			unn->ch_val[0] = sht->i2c_inbuff[4];
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	791a      	ldrb	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	701a      	strb	r2, [r3, #0]
			float humidity = unn->w_val;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	edc7 7a05 	vstr	s15, [r7, #20]

			temperature = (-45.0f + 175.0f * temperature / 65535.0f)*10;
 8001b60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b64:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001cc0 <sht3x_read_temperature_and_humidity+0x1f8>
 8001b68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b6c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001cc4 <sht3x_read_temperature_and_humidity+0x1fc>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001cc8 <sht3x_read_temperature_and_humidity+0x200>
 8001b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b84:	edc7 7a06 	vstr	s15, [r7, #24]
			humidity = (100.0f * humidity / 65535.0f)*10;
 8001b88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b8c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001ccc <sht3x_read_temperature_and_humidity+0x204>
 8001b90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b94:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001cc4 <sht3x_read_temperature_and_humidity+0x1fc>
 8001b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba4:	edc7 7a05 	vstr	s15, [r7, #20]

			sht->temperature[sht->byte_counter] = temperature;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]
			sht->humidity[sht->byte_counter++] = humidity;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bbc:	1c59      	adds	r1, r3, #1
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	6651      	str	r1, [r2, #100]	; 0x64
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]

			sht->average_temperature = get_filtred_data( sht->temperature, I2C_FILTR_WINDOW);
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3308      	adds	r3, #8
 8001bd2:	210a      	movs	r1, #10
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fd15 	bl	8001604 <get_filtred_data>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			sht->average_humidity = get_filtred_data( sht->humidity, I2C_FILTR_WINDOW);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3330      	adds	r3, #48	; 0x30
 8001be8:	210a      	movs	r1, #10
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd0a 	bl	8001604 <get_filtred_data>
 8001bf0:	eef0 7a40 	vmov.f32	s15, s0
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

			RegBuff[2] = sht->average_temperature;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	3304      	adds	r3, #4
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 2a90 	vmov	r2, s15
 8001c0c:	b212      	sxth	r2, r2
 8001c0e:	801a      	strh	r2, [r3, #0]
			RegBuff[3] = sht->average_humidity;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3306      	adds	r3, #6
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 2a90 	vmov	r2, s15
 8001c22:	b212      	sxth	r2, r2
 8001c24:	801a      	strh	r2, [r3, #0]

			if (sht->byte_counter >= I2C_FILTR_WINDOW){
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	dd02      	ble.n	8001c34 <sht3x_read_temperature_and_humidity+0x16c>

		 	 		sht->byte_counter = 0;
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2200      	movs	r2, #0
 8001c32:	665a      	str	r2, [r3, #100]	; 0x64
		 	 	}

			reset_status_flag(THMNC_BIT_POS);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff fd2d 	bl	8001694 <reset_status_flag>
			reset_status_flag(CRCE_BIT_POS);
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff fd2a 	bl	8001694 <reset_status_flag>

			if(sht->average_temperature > MAX_TEMP * 10 || sht->average_temperature < MIN_TEMP * 10)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001c46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001cd0 <sht3x_read_temperature_and_humidity+0x208>
 8001c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	dc09      	bgt.n	8001c68 <sht3x_read_temperature_and_humidity+0x1a0>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001c5a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001cd4 <sht3x_read_temperature_and_humidity+0x20c>
 8001c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c66:	d503      	bpl.n	8001c70 <sht3x_read_temperature_and_humidity+0x1a8>
				{
					set_status_flag(TOL_BIT_POS);
 8001c68:	2004      	movs	r0, #4
 8001c6a:	f7ff fcfb 	bl	8001664 <set_status_flag>
 8001c6e:	e002      	b.n	8001c76 <sht3x_read_temperature_and_humidity+0x1ae>
				}
				else
				{
					reset_status_flag(TOL_BIT_POS);
 8001c70:	2004      	movs	r0, #4
 8001c72:	f7ff fd0f 	bl	8001694 <reset_status_flag>
				}

				if(sht->average_humidity >MAX_HUM * 10 || sht->average_humidity < MIN_HUM * 10)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c7c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001cd8 <sht3x_read_temperature_and_humidity+0x210>
 8001c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c88:	dc07      	bgt.n	8001c9a <sht3x_read_temperature_and_humidity+0x1d2>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	d503      	bpl.n	8001ca2 <sht3x_read_temperature_and_humidity+0x1da>
				{
					set_status_flag(HOL_BIT_POS);
 8001c9a:	2005      	movs	r0, #5
 8001c9c:	f7ff fce2 	bl	8001664 <set_status_flag>
 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001ca0:	e006      	b.n	8001cb0 <sht3x_read_temperature_and_humidity+0x1e8>
				}
				else
				{
					reset_status_flag(HOL_BIT_POS);
 8001ca2:	2005      	movs	r0, #5
 8001ca4:	f7ff fcf6 	bl	8001694 <reset_status_flag>
 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001ca8:	e002      	b.n	8001cb0 <sht3x_read_temperature_and_humidity+0x1e8>

 	 	}
 	 	else
 	 	{

 	 		set_status_flag(CRCE_BIT_POS);
 8001caa:	2002      	movs	r0, #2
 8001cac:	f7ff fcda 	bl	8001664 <set_status_flag>
 	 	}



 	 	return true;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <sht3x_read_temperature_and_humidity+0x1ee>

 	}
return false;
 8001cb4:	2300      	movs	r3, #0
 }
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	432f0000 	.word	0x432f0000
 8001cc4:	477fff00 	.word	0x477fff00
 8001cc8:	42340000 	.word	0x42340000
 8001ccc:	42c80000 	.word	0x42c80000
 8001cd0:	449c4000 	.word	0x449c4000
 8001cd4:	c3c80000 	.word	0xc3c80000
 8001cd8:	447a0000 	.word	0x447a0000

08001cdc <crc8>:


 unsigned char crc8(unsigned char *buff, unsigned int len)
 {
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
     unsigned char crc = 0xFF;
 8001ce6:	23ff      	movs	r3, #255	; 0xff
 8001ce8:	73fb      	strb	r3, [r7, #15]
     unsigned int i;

     while (len--)
 8001cea:	e01f      	b.n	8001d2c <crc8+0x50>
     {
         crc ^= *buff++;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	4053      	eors	r3, r2
 8001cf8:	73fb      	strb	r3, [r7, #15]

         for (i = 0; i < 8; i++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	e012      	b.n	8001d26 <crc8+0x4a>
             crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
 8001d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da07      	bge.n	8001d18 <crc8+0x3c>
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001d12:	b25b      	sxtb	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	e002      	b.n	8001d1e <crc8+0x42>
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	73fb      	strb	r3, [r7, #15]
         for (i = 0; i < 8; i++)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d9e9      	bls.n	8001d00 <crc8+0x24>
     while (len--)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	603a      	str	r2, [r7, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1da      	bne.n	8001cec <crc8+0x10>
     }

     return crc;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 }
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 fb66 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <ADC_IRQHandler+0x10>)
 8001dee:	f000 fc81 	bl	80026f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000023c 	.word	0x2000023c

08001dfc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (TIM_GET_ITSTATUS(&htim1,TIM_IT_UPDATE )) {
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10e      	bne.n	8001e2c <TIM1_UP_TIM10_IRQHandler+0x30>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001e0e:	480a      	ldr	r0, [pc, #40]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001e10:	f003 fefa 	bl	8005c08 <HAL_TIM_Base_Stop_IT>
			TIM_GET_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SetCounter(&htim1,0x0);
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
			uart.rx_done_flag = true;
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]

		}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001e2e:	f003 ff1a 	bl	8005c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2000039c 	.word	0x2000039c
 8001e3c:	20000000 	.word	0x20000000

08001e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (TIM_GET_ITSTATUS(&htim2,TIM_IT_UPDATE )) {
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <TIM2_IRQHandler+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d111      	bne.n	8001e76 <TIM2_IRQHandler+0x36>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001e52:	480b      	ldr	r0, [pc, #44]	; (8001e80 <TIM2_IRQHandler+0x40>)
 8001e54:	f003 fed8 	bl	8005c08 <HAL_TIM_Base_Stop_IT>
		TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <TIM2_IRQHandler+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0201 	mvn.w	r2, #1
 8001e60:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SetCounter(&htim2,0x0);
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <TIM2_IRQHandler+0x40>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_AbortReceive_IT(&huart1);
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <TIM2_IRQHandler+0x44>)
 8001e6c:	f004 fb2a 	bl	80064c4 <HAL_UART_AbortReceive_IT>
		uart.tx_ready_flag = true;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <TIM2_IRQHandler+0x48>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	709a      	strb	r2, [r3, #2]

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e76:	4802      	ldr	r0, [pc, #8]	; (8001e80 <TIM2_IRQHandler+0x40>)
 8001e78:	f003 fef5 	bl	8005c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200003e4 	.word	0x200003e4
 8001e84:	200004bc 	.word	0x200004bc
 8001e88:	20000000 	.word	0x20000000

08001e8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM3_IRQHandler+0x10>)
 8001e92:	f003 fee8 	bl	8005c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000042c 	.word	0x2000042c

08001ea0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (TIM_GET_ITSTATUS(&htim4,TIM_IT_UPDATE )) {
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <TIM4_IRQHandler+0x3c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10d      	bne.n	8001ed0 <TIM4_IRQHandler+0x30>

		HAL_I2C_Mem_Read_IT(&hi2c1, I2C_DEV_ADDR<<1, START_SINGLE_SHOT_MODE, 0x2, sht31.i2c_inbuff, 0x6);
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <TIM4_IRQHandler+0x40>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <TIM4_IRQHandler+0x44>)
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	2306      	movs	r3, #6
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <TIM4_IRQHandler+0x48>)
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2302      	movs	r3, #2
 8001eca:	4808      	ldr	r0, [pc, #32]	; (8001eec <TIM4_IRQHandler+0x4c>)
 8001ecc:	f001 fc00 	bl	80036d0 <HAL_I2C_Mem_Read_IT>
	}


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM4_IRQHandler+0x3c>)
 8001ed2:	f003 fec8 	bl	8005c66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000474 	.word	0x20000474
 8001ee0:	08007490 	.word	0x08007490
 8001ee4:	08007492 	.word	0x08007492
 8001ee8:	200002f4 	.word	0x200002f4
 8001eec:	20000284 	.word	0x20000284

08001ef0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <I2C1_EV_IRQHandler+0x10>)
 8001ef6:	f001 fca9 	bl	800384c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000284 	.word	0x20000284

08001f04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <I2C1_ER_IRQHandler+0x10>)
 8001f0a:	f001 fe10 	bl	8003b2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000284 	.word	0x20000284

08001f18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART1_IRQHandler+0x10>)
 8001f1e:	f004 fb83 	bl	8006628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004bc 	.word	0x200004bc

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	463b      	mov	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <MX_TIM1_Init+0x9c>)
 8001f70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f74:	2218      	movs	r2, #24
 8001f76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f80:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001f84:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001f9a:	f003 fd83 	bl	8005aa4 <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001fa4:	f7ff fd8a 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fae:	f107 0308 	add.w	r3, r7, #8
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001fb6:	f003 ff5e 	bl	8005e76 <HAL_TIM_ConfigClockSource>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001fc0:	f7ff fd7c 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_TIM1_Init+0x98>)
 8001fd2:	f004 f963 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fdc:	f7ff fd6e 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000039c 	.word	0x2000039c
 8001fec:	40010000 	.word	0x40010000

08001ff0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800200c:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <MX_TIM2_Init+0x94>)
 800200e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002012:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_TIM2_Init+0x94>)
 8002016:	2218      	movs	r2, #24
 8002018:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <MX_TIM2_Init+0x94>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1750;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_TIM2_Init+0x94>)
 8002022:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8002026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_TIM2_Init+0x94>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM2_Init+0x94>)
 8002030:	2200      	movs	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002034:	4813      	ldr	r0, [pc, #76]	; (8002084 <MX_TIM2_Init+0x94>)
 8002036:	f003 fd35 	bl	8005aa4 <HAL_TIM_Base_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002040:	f7ff fd3c 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4619      	mov	r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <MX_TIM2_Init+0x94>)
 8002052:	f003 ff10 	bl	8005e76 <HAL_TIM_ConfigClockSource>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800205c:	f7ff fd2e 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <MX_TIM2_Init+0x94>)
 800206e:	f004 f915 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002078:	f7ff fd20 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200003e4 	.word	0x200003e4

08002088 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_TIM3_Init+0x94>)
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <MX_TIM3_Init+0x98>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_TIM3_Init+0x94>)
 80020ac:	2231      	movs	r2, #49	; 0x31
 80020ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_TIM3_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <MX_TIM3_Init+0x94>)
 80020b8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80020bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_TIM3_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_TIM3_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020ca:	4814      	ldr	r0, [pc, #80]	; (800211c <MX_TIM3_Init+0x94>)
 80020cc:	f003 fcea 	bl	8005aa4 <HAL_TIM_Base_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020d6:	f7ff fcf1 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	480d      	ldr	r0, [pc, #52]	; (800211c <MX_TIM3_Init+0x94>)
 80020e8:	f003 fec5 	bl	8005e76 <HAL_TIM_ConfigClockSource>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80020f2:	f7ff fce3 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020f6:	2320      	movs	r3, #32
 80020f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	4619      	mov	r1, r3
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <MX_TIM3_Init+0x94>)
 8002104:	f004 f8ca 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800210e:	f7ff fcd5 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	2000042c 	.word	0x2000042c
 8002120:	40000400 	.word	0x40000400

08002124 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002138:	463b      	mov	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <MX_TIM4_Init+0x98>)
 8002144:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8002146:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002148:	22f9      	movs	r2, #249	; 0xf9
 800214a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <MX_TIM4_Init+0x94>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002154:	f242 7210 	movw	r2, #10000	; 0x2710
 8002158:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_TIM4_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002166:	4814      	ldr	r0, [pc, #80]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002168:	f003 fc9c 	bl	8005aa4 <HAL_TIM_Base_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002172:	f7ff fca3 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	4619      	mov	r1, r3
 8002182:	480d      	ldr	r0, [pc, #52]	; (80021b8 <MX_TIM4_Init+0x94>)
 8002184:	f003 fe77 	bl	8005e76 <HAL_TIM_ConfigClockSource>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800218e:	f7ff fc95 	bl	8001abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800219a:	463b      	mov	r3, r7
 800219c:	4619      	mov	r1, r3
 800219e:	4806      	ldr	r0, [pc, #24]	; (80021b8 <MX_TIM4_Init+0x94>)
 80021a0:	f004 f87c 	bl	800629c <HAL_TIMEx_MasterConfigSynchronization>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80021aa:	f7ff fc87 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000474 	.word	0x20000474
 80021bc:	40000800 	.word	0x40000800

080021c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a38      	ldr	r2, [pc, #224]	; (80022b0 <HAL_TIM_Base_MspInit+0xf0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d116      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b37      	ldr	r3, [pc, #220]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44
 80021e2:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2019      	movs	r0, #25
 80021f4:	f000 feb3 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021f8:	2019      	movs	r0, #25
 80021fa:	f000 fecc 	bl	8002f96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021fe:	e052      	b.n	80022a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d116      	bne.n	8002238 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	201c      	movs	r0, #28
 800222c:	f000 fe97 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002230:	201c      	movs	r0, #28
 8002232:	f000 feb0 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 8002236:	e036      	b.n	80022a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <HAL_TIM_Base_MspInit+0xf8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d116      	bne.n	8002270 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	201d      	movs	r0, #29
 8002264:	f000 fe7b 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002268:	201d      	movs	r0, #29
 800226a:	f000 fe94 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 800226e:	e01a      	b.n	80022a6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_TIM_Base_MspInit+0xfc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d115      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_TIM_Base_MspInit+0xf4>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	201e      	movs	r0, #30
 800229c:	f000 fe5f 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022a0:	201e      	movs	r0, #30
 80022a2:	f000 fe78 	bl	8002f96 <HAL_NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <MX_USART1_UART_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80022d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART1_UART_Init+0x50>)
 80022fc:	f004 f850 	bl	80063a0 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8002306:	f7ff fbd9 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004bc 	.word	0x200004bc
 8002314:	40011000 	.word	0x40011000

08002318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_UART_MspInit+0x94>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d134      	bne.n	80023a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_UART_MspInit+0x98>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_UART_MspInit+0x98>)
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	6453      	str	r3, [r2, #68]	; 0x44
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_UART_MspInit+0x98>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_UART_MspInit+0x98>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <HAL_UART_MspInit+0x98>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_UART_MspInit+0x98>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002384:	2307      	movs	r3, #7
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4809      	ldr	r0, [pc, #36]	; (80023b4 <HAL_UART_MspInit+0x9c>)
 8002390:	f000 febc 	bl	800310c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	2025      	movs	r0, #37	; 0x25
 800239a:	f000 fde0 	bl	8002f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800239e:	2025      	movs	r0, #37	; 0x25
 80023a0:	f000 fdf9 	bl	8002f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020000 	.word	0x40020000

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023be:	490e      	ldr	r1, [pc, #56]	; (80023f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023d4:	4c0b      	ldr	r4, [pc, #44]	; (8002404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023e2:	f7ff fda3 	bl	8001f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f005 f81b 	bl	8007420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7fe fe23 	bl	8001034 <main>
  bx  lr    
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80023fc:	080074bc 	.word	0x080074bc
  ldr r2, =_sbss
 8002400:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002404:	20000504 	.word	0x20000504

08002408 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <DMA1_Stream0_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_Init+0x40>)
 8002416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_Init+0x40>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_Init+0x40>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 fd87 	bl	8002f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	200f      	movs	r0, #15
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fc80 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fd9f 	bl	8002fb2 <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 fd67 	bl	8002f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000214 	.word	0x20000214
 80024a8:	2000021c 	.word	0x2000021c
 80024ac:	20000218 	.word	0x20000218

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	2000021c 	.word	0x2000021c
 80024d4:	20000500 	.word	0x20000500

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000500 	.word	0x20000500

080024f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e033      	b.n	800256e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fc54 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d118      	bne.n	8002560 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fb2a 	bl	8002b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
 800255e:	e001      	b.n	8002564 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Start_IT+0x1a>
 800258e:	2302      	movs	r3, #2
 8002590:	e0a1      	b.n	80026d6 <HAL_ADC_Start_IT+0x15e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d018      	beq.n	80025da <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025b8:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_ADC_Start_IT+0x16c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <HAL_ADC_Start_IT+0x170>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9a      	lsrs	r2, r3, #18
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025cc:	e002      	b.n	80025d4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f9      	bne.n	80025ce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d169      	bne.n	80026bc <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002612:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d106      	bne.n	8002636 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f023 0206 	bic.w	r2, r3, #6
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
 8002634:	e002      	b.n	800263c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <HAL_ADC_Start_IT+0x174>)
 8002646:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002650:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002660:	f043 0320 	orr.w	r3, r3, #32
 8002664:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d129      	bne.n	80026d4 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e020      	b.n	80026d4 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_ADC_Start_IT+0x178>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d11b      	bne.n	80026d4 <HAL_ADC_Start_IT+0x15c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d114      	bne.n	80026d4 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	e00b      	b.n	80026d4 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000214 	.word	0x20000214
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	40012300 	.word	0x40012300
 80026f0:	40012000 	.word	0x40012000

080026f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d049      	beq.n	80027be <HAL_ADC_IRQHandler+0xca>
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d046      	beq.n	80027be <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12b      	bne.n	80027ae <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d127      	bne.n	80027ae <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0220 	bic.w	r2, r2, #32
 8002788:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff f8b8 	bl	8001924 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0212 	mvn.w	r2, #18
 80027bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d057      	beq.n	8002884 <HAL_ADC_IRQHandler+0x190>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d054      	beq.n	8002884 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d139      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800280a:	2b00      	cmp	r3, #0
 800280c:	d006      	beq.n	800281c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12b      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d124      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11d      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800283c:	2b00      	cmp	r3, #0
 800283e:	d119      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa8d 	bl	8002d94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 020c 	mvn.w	r2, #12
 8002882:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d017      	beq.n	80028ca <HAL_ADC_IRQHandler+0x1d6>
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d014      	beq.n	80028ca <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10d      	bne.n	80028ca <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f837 	bl	800292e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028d8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d015      	beq.n	800290c <HAL_ADC_IRQHandler+0x218>
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0220 	mvn.w	r2, #32
 80028fa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f820 	bl	8002942 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f06f 0220 	mvn.w	r2, #32
 800290a:	601a      	str	r2, [r3, #0]
  }
}
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x1c>
 8002970:	2302      	movs	r3, #2
 8002972:	e105      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x228>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b09      	cmp	r3, #9
 8002982:	d925      	bls.n	80029d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	3b1e      	subs	r3, #30
 800299a:	2207      	movs	r2, #7
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43da      	mvns	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	400a      	ands	r2, r1
 80029a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68d9      	ldr	r1, [r3, #12]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	4603      	mov	r3, r0
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4403      	add	r3, r0
 80029c2:	3b1e      	subs	r3, #30
 80029c4:	409a      	lsls	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	e022      	b.n	8002a16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	2207      	movs	r2, #7
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	400a      	ands	r2, r1
 80029f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4403      	add	r3, r0
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d824      	bhi.n	8002a68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b05      	subs	r3, #5
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b05      	subs	r3, #5
 8002a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34
 8002a66:	e04c      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b0c      	cmp	r3, #12
 8002a6e:	d824      	bhi.n	8002aba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	3b23      	subs	r3, #35	; 0x23
 8002a82:	221f      	movs	r2, #31
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43da      	mvns	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	400a      	ands	r2, r1
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b23      	subs	r3, #35	; 0x23
 8002aac:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ab8:	e023      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	3b41      	subs	r3, #65	; 0x41
 8002acc:	221f      	movs	r2, #31
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	400a      	ands	r2, r1
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	3b41      	subs	r3, #65	; 0x41
 8002af6:	fa00 f203 	lsl.w	r2, r0, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_ADC_ConfigChannel+0x234>)
 8002b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_ADC_ConfigChannel+0x238>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1cc>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d105      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <HAL_ADC_ConfigChannel+0x238>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d123      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x21e>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d003      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0x1e6>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b11      	cmp	r3, #17
 8002b3c:	d11b      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d111      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_ADC_ConfigChannel+0x23c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_ADC_ConfigChannel+0x240>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0c9a      	lsrs	r2, r3, #18
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40012300 	.word	0x40012300
 8002b90:	40012000 	.word	0x40012000
 8002b94:	20000214 	.word	0x20000214
 8002b98:	431bde83 	.word	0x431bde83

08002b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba4:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <ADC_Init+0x1f0>)
 8002ba6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6859      	ldr	r1, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6899      	ldr	r1, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	4a58      	ldr	r2, [pc, #352]	; (8002d90 <ADC_Init+0x1f4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e00f      	b.n	8002c9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0202 	bic.w	r2, r2, #2
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7e1b      	ldrb	r3, [r3, #24]
 8002cb4:	005a      	lsls	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01b      	beq.n	8002d00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ce6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	035a      	lsls	r2, r3, #13
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	e007      	b.n	8002d10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	051a      	lsls	r2, r3, #20
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6899      	ldr	r1, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d52:	025a      	lsls	r2, r3, #9
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	029a      	lsls	r2, r3, #10
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40012300 	.word	0x40012300
 8002d90:	0f000001 	.word	0x0f000001

08002d94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	; (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <__NVIC_EnableIRQ+0x38>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	; (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	; (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
	...

08002f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f14:	d301      	bcc.n	8002f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <SysTick_Config+0x40>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f22:	210f      	movs	r1, #15
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f7ff ff8e 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SysTick_Config+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f32:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <SysTick_Config+0x40>)
 8002f34:	2207      	movs	r2, #7
 8002f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	e000e010 	.word	0xe000e010

08002f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ff29 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f70:	f7ff ff3e 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff8e 	bl	8002e9c <NVIC_EncodePriority>
 8002f80:	4602      	mov	r2, r0
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	4611      	mov	r1, r2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff5d 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff31 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffa2 	bl	8002f04 <SysTick_Config>
 8002fc0:	4603      	mov	r3, r0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff fa7e 	bl	80024d8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d008      	beq.n	8002ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e052      	b.n	80030a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0216 	bic.w	r2, r2, #22
 800300a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800301a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <HAL_DMA_Abort+0x62>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0208 	bic.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0201 	bic.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304c:	e013      	b.n	8003076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304e:	f7ff fa43 	bl	80024d8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b05      	cmp	r3, #5
 800305a:	d90c      	bls.n	8003076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e015      	b.n	80030a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e4      	bne.n	800304e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d004      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e00c      	b.n	80030e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2205      	movs	r2, #5
 80030cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e159      	b.n	80033dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003128:	2201      	movs	r2, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	429a      	cmp	r2, r3
 8003142:	f040 8148 	bne.w	80033d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d005      	beq.n	800315e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315a:	2b02      	cmp	r3, #2
 800315c:	d130      	bne.n	80031c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	2203      	movs	r2, #3
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003194:	2201      	movs	r2, #1
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	f003 0201 	and.w	r2, r3, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d017      	beq.n	80031fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	2203      	movs	r2, #3
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4013      	ands	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a2 	beq.w	80033d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b57      	ldr	r3, [pc, #348]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b54      	ldr	r3, [pc, #336]	; (80033f4 <HAL_GPIO_Init+0x2e8>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ae:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_GPIO_Init+0x2ec>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a49      	ldr	r2, [pc, #292]	; (80033fc <HAL_GPIO_Init+0x2f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x202>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a48      	ldr	r2, [pc, #288]	; (8003400 <HAL_GPIO_Init+0x2f4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x1fe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_GPIO_Init+0x2f8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x1fa>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a46      	ldr	r2, [pc, #280]	; (8003408 <HAL_GPIO_Init+0x2fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x1f6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a45      	ldr	r2, [pc, #276]	; (800340c <HAL_GPIO_Init+0x300>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x1f2>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e008      	b.n	8003310 <HAL_GPIO_Init+0x204>
 80032fe:	2307      	movs	r3, #7
 8003300:	e006      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003302:	2303      	movs	r3, #3
 8003304:	e004      	b.n	8003310 <HAL_GPIO_Init+0x204>
 8003306:	2302      	movs	r3, #2
 8003308:	e002      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_GPIO_Init+0x204>
 800330e:	2300      	movs	r3, #0
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f002 0203 	and.w	r2, r2, #3
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	4093      	lsls	r3, r2
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003320:	4935      	ldr	r1, [pc, #212]	; (80033f8 <HAL_GPIO_Init+0x2ec>)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332e:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	43db      	mvns	r3, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_GPIO_Init+0x304>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <HAL_GPIO_Init+0x304>)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_GPIO_Init+0x304>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a6:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3301      	adds	r3, #1
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	f67f aea2 	bls.w	8003128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40013800 	.word	0x40013800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400
 8003404:	40020800 	.word	0x40020800
 8003408:	40020c00 	.word	0x40020c00
 800340c:	40021000 	.word	0x40021000
 8003410:	40013c00 	.word	0x40013c00

08003414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	807b      	strh	r3, [r7, #2]
 8003420:	4613      	mov	r3, r2
 8003422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003424:	787b      	ldrb	r3, [r7, #1]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003430:	e003      	b.n	800343a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003432:	887b      	ldrh	r3, [r7, #2]
 8003434:	041a      	lsls	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e12b      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fd fd88 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2224      	movs	r2, #36	; 0x24
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800349a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ac:	f002 fad2 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 80034b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a81      	ldr	r2, [pc, #516]	; (80036bc <HAL_I2C_Init+0x274>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d807      	bhi.n	80034cc <HAL_I2C_Init+0x84>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a80      	ldr	r2, [pc, #512]	; (80036c0 <HAL_I2C_Init+0x278>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	bf94      	ite	ls
 80034c4:	2301      	movls	r3, #1
 80034c6:	2300      	movhi	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e006      	b.n	80034da <HAL_I2C_Init+0x92>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a7d      	ldr	r2, [pc, #500]	; (80036c4 <HAL_I2C_Init+0x27c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	bf94      	ite	ls
 80034d4:	2301      	movls	r3, #1
 80034d6:	2300      	movhi	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0e7      	b.n	80036b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a78      	ldr	r2, [pc, #480]	; (80036c8 <HAL_I2C_Init+0x280>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0c9b      	lsrs	r3, r3, #18
 80034ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a6a      	ldr	r2, [pc, #424]	; (80036bc <HAL_I2C_Init+0x274>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d802      	bhi.n	800351c <HAL_I2C_Init+0xd4>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	e009      	b.n	8003530 <HAL_I2C_Init+0xe8>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	4a69      	ldr	r2, [pc, #420]	; (80036cc <HAL_I2C_Init+0x284>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	3301      	adds	r3, #1
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003542:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	495c      	ldr	r1, [pc, #368]	; (80036bc <HAL_I2C_Init+0x274>)
 800354c:	428b      	cmp	r3, r1
 800354e:	d819      	bhi.n	8003584 <HAL_I2C_Init+0x13c>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e59      	subs	r1, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fbb1 f3f3 	udiv	r3, r1, r3
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003564:	400b      	ands	r3, r1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_I2C_Init+0x138>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1e59      	subs	r1, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fbb1 f3f3 	udiv	r3, r1, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357e:	e051      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003580:	2304      	movs	r3, #4
 8003582:	e04f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_I2C_Init+0x168>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e58      	subs	r0, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e012      	b.n	80035d6 <HAL_I2C_Init+0x18e>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	0099      	lsls	r1, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Init+0x196>
 80035da:	2301      	movs	r3, #1
 80035dc:	e022      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10e      	bne.n	8003604 <HAL_I2C_Init+0x1bc>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1e58      	subs	r0, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	440b      	add	r3, r1
 80035f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	e00f      	b.n	8003624 <HAL_I2C_Init+0x1dc>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e58      	subs	r0, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6859      	ldr	r1, [r3, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	fbb0 f3f3 	udiv	r3, r0, r3
 800361a:	3301      	adds	r3, #1
 800361c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	6809      	ldr	r1, [r1, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6911      	ldr	r1, [r2, #16]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	4311      	orrs	r1, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	430b      	orrs	r3, r1
 8003666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	000186a0 	.word	0x000186a0
 80036c0:	001e847f 	.word	0x001e847f
 80036c4:	003d08ff 	.word	0x003d08ff
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	10624dd3 	.word	0x10624dd3

080036d0 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	460b      	mov	r3, r1
 80036e4:	813b      	strh	r3, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	f040 809a 	bne.w	8003830 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_I2C_Mem_Read_IT+0x170>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_I2C_Mem_Read_IT+0x174>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	0a1a      	lsrs	r2, r3, #8
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	009a      	lsls	r2, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3b01      	subs	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e070      	b.n	8003832 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d0db      	beq.n	8003716 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Mem_Read_IT+0x9c>
 8003768:	2302      	movs	r3, #2
 800376a:	e062      	b.n	8003832 <HAL_I2C_Mem_Read_IT+0x162>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2222      	movs	r2, #34	; 0x22
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <HAL_I2C_Mem_Read_IT+0x178>)
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80037d4:	897a      	ldrh	r2, [r7, #10]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80037da:	893a      	ldrh	r2, [r7, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037fa:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800382a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000214 	.word	0x20000214
 8003844:	14f8b589 	.word	0x14f8b589
 8003848:	ffff0000 	.word	0xffff0000

0800384c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b10      	cmp	r3, #16
 800387a:	d003      	beq.n	8003884 <HAL_I2C_EV_IRQHandler+0x38>
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	f040 80c1 	bne.w	8003a06 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_I2C_EV_IRQHandler+0x6e>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038a4:	d003      	beq.n	80038ae <HAL_I2C_EV_IRQHandler+0x62>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_EV_IRQHandler+0x66>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_I2C_EV_IRQHandler+0x68>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f000 8132 	beq.w	8003b1e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00c      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0x92>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f001 fc73 	bl	80051bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fd7b 	bl	80043d2 <I2C_Master_SB>
 80038dc:	e092      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_I2C_EV_IRQHandler+0xb2>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	0a5b      	lsrs	r3, r3, #9
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fdf1 	bl	80044de <I2C_Master_ADD10>
 80038fc:	e082      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <HAL_I2C_EV_IRQHandler+0xd2>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	0a5b      	lsrs	r3, r3, #9
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fe0b 	bl	8004532 <I2C_Master_ADDR>
 800391c:	e072      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03b      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003938:	f000 80f3 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	09db      	lsrs	r3, r3, #7
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <HAL_I2C_EV_IRQHandler+0x11c>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_I2C_EV_IRQHandler+0x11c>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f9eb 	bl	8003d3c <I2C_MasterTransmit_TXE>
 8003966:	e04d      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80d6 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	0a5b      	lsrs	r3, r3, #9
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80cf 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003984:	7bbb      	ldrb	r3, [r7, #14]
 8003986:	2b21      	cmp	r3, #33	; 0x21
 8003988:	d103      	bne.n	8003992 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa72 	bl	8003e74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003990:	e0c7      	b.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	f040 80c4 	bne.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fae0 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a0:	e0bf      	b.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b0:	f000 80b7 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00f      	beq.n	80039e0 <HAL_I2C_EV_IRQHandler+0x194>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_I2C_EV_IRQHandler+0x194>
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb55 	bl	8004088 <I2C_MasterReceive_RXNE>
 80039de:	e011      	b.n	8003a04 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	089b      	lsrs	r3, r3, #2
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 809a 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	0a5b      	lsrs	r3, r3, #9
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8093 	beq.w	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fbfe 	bl	80041fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a02:	e08e      	b.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a04:	e08d      	b.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e007      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x20e>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	0a5b      	lsrs	r3, r3, #9
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00c      	beq.n	8003a5a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ffbc 	bl	80049d0 <I2C_Slave_ADDR>
 8003a58:	e066      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_I2C_EV_IRQHandler+0x22e>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	0a5b      	lsrs	r3, r3, #9
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fff6 	bl	8004a64 <I2C_Slave_STOPF>
 8003a78:	e056      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a7a:	7bbb      	ldrb	r3, [r7, #14]
 8003a7c:	2b21      	cmp	r3, #33	; 0x21
 8003a7e:	d002      	beq.n	8003a86 <HAL_I2C_EV_IRQHandler+0x23a>
 8003a80:	7bbb      	ldrb	r3, [r7, #14]
 8003a82:	2b29      	cmp	r3, #41	; 0x29
 8003a84:	d125      	bne.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	09db      	lsrs	r3, r3, #7
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00f      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	0a9b      	lsrs	r3, r3, #10
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x266>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fed2 	bl	8004854 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ab0:	e039      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d033      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2da>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02d      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 feff 	bl	80048ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad0:	e029      	b.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	099b      	lsrs	r3, r3, #6
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00f      	beq.n	8003afe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	0a9b      	lsrs	r3, r3, #10
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_I2C_EV_IRQHandler+0x2b2>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 ff0a 	bl	8004910 <I2C_SlaveReceive_RXNE>
 8003afc:	e014      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	089b      	lsrs	r3, r3, #2
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	0a5b      	lsrs	r3, r3, #9
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 ff38 	bl	800498c <I2C_SlaveReceive_BTF>
 8003b1c:	e004      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08a      	sub	sp, #40	; 0x28
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00e      	beq.n	8003b7c <HAL_I2C_ER_IRQHandler+0x4e>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b7a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	0a5b      	lsrs	r3, r3, #9
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00e      	beq.n	8003ba6 <HAL_I2C_ER_IRQHandler+0x78>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ba4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	0a9b      	lsrs	r3, r3, #10
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d03f      	beq.n	8003c32 <HAL_I2C_ER_IRQHandler+0x104>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d039      	beq.n	8003c32 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003bbe:	7efb      	ldrb	r3, [r7, #27]
 8003bc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bd8:	7ebb      	ldrb	r3, [r7, #26]
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d112      	bne.n	8003c04 <HAL_I2C_ER_IRQHandler+0xd6>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10f      	bne.n	8003c04 <HAL_I2C_ER_IRQHandler+0xd6>
 8003be4:	7cfb      	ldrb	r3, [r7, #19]
 8003be6:	2b21      	cmp	r3, #33	; 0x21
 8003be8:	d008      	beq.n	8003bfc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003bea:	7cfb      	ldrb	r3, [r7, #19]
 8003bec:	2b29      	cmp	r3, #41	; 0x29
 8003bee:	d005      	beq.n	8003bfc <HAL_I2C_ER_IRQHandler+0xce>
 8003bf0:	7cfb      	ldrb	r3, [r7, #19]
 8003bf2:	2b28      	cmp	r3, #40	; 0x28
 8003bf4:	d106      	bne.n	8003c04 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b21      	cmp	r3, #33	; 0x21
 8003bfa:	d103      	bne.n	8003c04 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 f861 	bl	8004cc4 <I2C_Slave_AF>
 8003c02:	e016      	b.n	8003c32 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	f043 0304 	orr.w	r3, r3, #4
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c16:	7efb      	ldrb	r3, [r7, #27]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d002      	beq.n	8003c22 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c1c:	7efb      	ldrb	r3, [r7, #27]
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d107      	bne.n	8003c32 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	0adb      	lsrs	r3, r3, #11
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00e      	beq.n	8003c5c <HAL_I2C_ER_IRQHandler+0x12e>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f043 0308 	orr.w	r3, r3, #8
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003c5a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f001 f898 	bl	8004da4 <I2C_ITError>
  }
}
 8003c74:	bf00      	nop
 8003c76:	3728      	adds	r7, #40	; 0x28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d150      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b21      	cmp	r3, #33	; 0x21
 8003d66:	d14d      	bne.n	8003e04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d01d      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d01a      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d7a:	d016      	beq.n	8003daa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2211      	movs	r2, #17
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff ff6a 	bl	8003c7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da8:	e060      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003db8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d107      	bne.n	8003df4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff85 	bl	8003cfc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003df2:	e03b      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff3d 	bl	8003c7c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e02:	e033      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b21      	cmp	r3, #33	; 0x21
 8003e08:	d005      	beq.n	8003e16 <I2C_MasterTransmit_TXE+0xda>
 8003e0a:	7bbb      	ldrb	r3, [r7, #14]
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d12d      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b22      	cmp	r3, #34	; 0x22
 8003e14:	d12a      	bne.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e30:	e01c      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d103      	bne.n	8003e46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f88e 	bl	8003f60 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e44:	e012      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	781a      	ldrb	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e6a:	e7ff      	b.n	8003e6c <I2C_MasterTransmit_TXE+0x130>
 8003e6c:	bf00      	nop
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b21      	cmp	r3, #33	; 0x21
 8003e8c:	d164      	bne.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ebc:	e04c      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d01d      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d01a      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed0:	d016      	beq.n	8003f00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ee0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2211      	movs	r2, #17
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff febf 	bl	8003c7c <HAL_I2C_MasterTxCpltCallback>
}
 8003efe:	e02b      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d107      	bne.n	8003f4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff feda 	bl	8003cfc <HAL_I2C_MemTxCpltCallback>
}
 8003f48:	e006      	b.n	8003f58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe92 	bl	8003c7c <HAL_I2C_MasterTxCpltCallback>
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10b      	bne.n	8003f98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f90:	1c9a      	adds	r2, r3, #2
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003f96:	e073      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	121b      	asrs	r3, r3, #8
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fb2:	e065      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d10b      	bne.n	8003fd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fd2:	e055      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d151      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b22      	cmp	r3, #34	; 0x22
 8003fe0:	d10d      	bne.n	8003ffe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ffc:	e040      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d112      	bne.n	8004034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004032:	e025      	b.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d120      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b21      	cmp	r3, #33	; 0x21
 8004042:	d11d      	bne.n	8004080 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004052:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fe3e 	bl	8003cfc <HAL_I2C_MemTxCpltCallback>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	f040 80ac 	bne.w	80041f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d921      	bls.n	80040f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b03      	cmp	r3, #3
 80040da:	f040 808c 	bne.w	80041f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80040ee:	e082      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d075      	beq.n	80041e4 <I2C_MasterReceive_RXNE+0x15c>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d002      	beq.n	8004104 <I2C_MasterReceive_RXNE+0x7c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d16f      	bne.n	80041e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 f827 	bl	8005158 <I2C_WaitOnSTOPRequestThroughIT>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d142      	bne.n	8004196 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800412e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	b2d2      	uxtb	r2, r2
 800413c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d10a      	bne.n	8004180 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fd fbad 	bl	80018d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800417e:	e03a      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2212      	movs	r2, #18
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fd7e 	bl	8003c90 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004194:	e02f      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fd fb91 	bl	8001904 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041e2:	e008      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	605a      	str	r2, [r3, #4]
}
 80041f4:	e7ff      	b.n	80041f6 <I2C_MasterReceive_RXNE+0x16e>
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b04      	cmp	r3, #4
 8004214:	d11b      	bne.n	800424e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800424c:	e0bd      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d129      	bne.n	80042ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00a      	beq.n	8004284 <I2C_MasterReceive_BTF+0x86>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d007      	beq.n	8004284 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042aa:	e08e      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d176      	bne.n	80043a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d002      	beq.n	80042c2 <I2C_MasterReceive_BTF+0xc4>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d108      	bne.n	80042d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e019      	b.n	8004308 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d002      	beq.n	80042e0 <I2C_MasterReceive_BTF+0xe2>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d108      	bne.n	80042f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e00a      	b.n	8004308 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d007      	beq.n	8004308 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004362:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d10a      	bne.n	800438e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd faa6 	bl	80018d8 <HAL_I2C_MemRxCpltCallback>
}
 800438c:	e01d      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2212      	movs	r2, #18
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fc77 	bl	8003c90 <HAL_I2C_MasterRxCpltCallback>
}
 80043a2:	e012      	b.n	80043ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d117      	bne.n	8004416 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004400:	e067      	b.n	80044d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
}
 8004414:	e05d      	b.n	80044d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441e:	d133      	bne.n	8004488 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b21      	cmp	r3, #33	; 0x21
 800442a:	d109      	bne.n	8004440 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	e008      	b.n	8004452 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <I2C_Master_SB+0x92>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	2b00      	cmp	r3, #0
 800446a:	d032      	beq.n	80044d2 <I2C_Master_SB+0x100>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02d      	beq.n	80044d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004484:	605a      	str	r2, [r3, #4]
}
 8004486:	e024      	b.n	80044d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10e      	bne.n	80044ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	b29b      	uxth	r3, r3
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030f 	orn	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
}
 80044ac:	e011      	b.n	80044d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10d      	bne.n	80044d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	11db      	asrs	r3, r3, #7
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0306 	and.w	r3, r3, #6
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f063 030e 	orn	r3, r3, #14
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <I2C_Master_ADD10+0x26>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <I2C_Master_ADD10+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004524:	605a      	str	r2, [r3, #4]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b091      	sub	sp, #68	; 0x44
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	; 0x22
 800455a:	f040 8169 	bne.w	8004830 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <I2C_Master_ADDR+0x54>
 8004566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800456a:	2b40      	cmp	r3, #64	; 0x40
 800456c:	d10b      	bne.n	8004586 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	633b      	str	r3, [r7, #48]	; 0x30
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	e160      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <I2C_Master_ADDR+0x98>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004596:	d118      	bne.n	80045ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50
 80045c8:	e13e      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e115      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	f040 808a 	bne.w	800471c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800460e:	d137      	bne.n	8004680 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d113      	bne.n	8004658 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	e0e7      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e0d3      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	2b08      	cmp	r3, #8
 8004684:	d02e      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	2b20      	cmp	r3, #32
 800468a:	d02b      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	2b12      	cmp	r3, #18
 8004690:	d102      	bne.n	8004698 <I2C_Master_ADDR+0x166>
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	2b01      	cmp	r3, #1
 8004696:	d125      	bne.n	80046e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	2b04      	cmp	r3, #4
 800469c:	d00e      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d00b      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d008      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	e0a1      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e085      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d14d      	bne.n	80047c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b04      	cmp	r3, #4
 800472a:	d016      	beq.n	800475a <I2C_Master_ADDR+0x228>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b02      	cmp	r3, #2
 8004730:	d013      	beq.n	800475a <I2C_Master_ADDR+0x228>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b10      	cmp	r3, #16
 8004736:	d010      	beq.n	800475a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e007      	b.n	800476a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	d117      	bne.n	80047aa <I2C_Master_ADDR+0x278>
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004780:	d00b      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d008      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478a:	2b08      	cmp	r3, #8
 800478c:	d005      	beq.n	800479a <I2C_Master_ADDR+0x268>
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004796:	2b20      	cmp	r3, #32
 8004798:	d107      	bne.n	80047aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e032      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d117      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e8:	d00b      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d008      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d005      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d002      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d107      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004810:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800482e:	e00b      	b.n	8004848 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	e7ff      	b.n	8004848 <I2C_Master_ADDR+0x316>
 8004848:	bf00      	nop
 800484a:	3744      	adds	r7, #68	; 0x44
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02b      	beq.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b29      	cmp	r3, #41	; 0x29
 80048a0:	d111      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2228      	movs	r2, #40	; 0x28
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff f9ef 	bl	8003ca4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d011      	beq.n	8004904 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02c      	beq.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d114      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b2a      	cmp	r3, #42	; 0x2a
 800495e:	d111      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2222      	movs	r2, #34	; 0x22
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2228      	movs	r2, #40	; 0x28
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f99a 	bl	8003cb8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049ea:	2b28      	cmp	r3, #40	; 0x28
 80049ec:	d127      	bne.n	8004a3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	81bb      	strh	r3, [r7, #12]
 8004a20:	e002      	b.n	8004a28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a30:	89ba      	ldrh	r2, [r7, #12]
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff f948 	bl	8003ccc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a3c:	e00e      	b.n	8004a5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d172      	bne.n	8004ba8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b22      	cmp	r3, #34	; 0x22
 8004ac6:	d002      	beq.n	8004ace <I2C_Slave_STOPF+0x6a>
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b2a      	cmp	r3, #42	; 0x2a
 8004acc:	d135      	bne.n	8004b3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe faf1 	bl	80030ee <HAL_DMA_GetState>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d049      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	4a69      	ldr	r2, [pc, #420]	; (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fac3 	bl	80030aa <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03d      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b38:	e035      	b.n	8004ba6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fabb 	bl	80030ee <HAL_DMA_GetState>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d014      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	4a4e      	ldr	r2, [pc, #312]	; (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fa8d 	bl	80030aa <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
 8004ba4:	e000      	b.n	8004ba8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d03e      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d112      	bne.n	8004be6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d112      	bne.n	8004c1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0204 	orr.w	r2, r3, #4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f8b3 	bl	8004da4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c3e:	e039      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b2a      	cmp	r3, #42	; 0x2a
 8004c44:	d109      	bne.n	8004c5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2228      	movs	r2, #40	; 0x28
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff f82f 	bl	8003cb8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b28      	cmp	r3, #40	; 0x28
 8004c64:	d111      	bne.n	8004c8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <I2C_Slave_STOPF+0x25c>)
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff f830 	bl	8003ce8 <HAL_I2C_ListenCpltCallback>
}
 8004c88:	e014      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d002      	beq.n	8004c98 <I2C_Slave_STOPF+0x234>
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b22      	cmp	r3, #34	; 0x22
 8004c96:	d10d      	bne.n	8004cb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff f802 	bl	8003cb8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08005009 	.word	0x08005009
 8004cc0:	ffff0000 	.word	0xffff0000

08004cc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d002      	beq.n	8004ce6 <I2C_Slave_AF+0x22>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d129      	bne.n	8004d3a <I2C_Slave_AF+0x76>
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b28      	cmp	r3, #40	; 0x28
 8004cea:	d126      	bne.n	8004d3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <I2C_Slave_AF+0xdc>)
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe ffd8 	bl	8003ce8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d38:	e02e      	b.n	8004d98 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b21      	cmp	r3, #33	; 0x21
 8004d3e:	d126      	bne.n	8004d8e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <I2C_Slave_AF+0xdc>)
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2221      	movs	r2, #33	; 0x21
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fe ff8c 	bl	8003ca4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d8c:	e004      	b.n	8004d98 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d96:	615a      	str	r2, [r3, #20]
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	ffff0000 	.word	0xffff0000

08004da4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d002      	beq.n	8004dc8 <I2C_ITError+0x24>
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d10a      	bne.n	8004dde <I2C_ITError+0x3a>
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b22      	cmp	r3, #34	; 0x22
 8004dcc:	d107      	bne.n	8004dde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004de4:	2b28      	cmp	r3, #40	; 0x28
 8004de6:	d107      	bne.n	8004df8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2228      	movs	r2, #40	; 0x28
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004df6:	e015      	b.n	8004e24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e06:	d00a      	beq.n	8004e1e <I2C_ITError+0x7a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b60      	cmp	r3, #96	; 0x60
 8004e0c:	d007      	beq.n	8004e1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e32:	d162      	bne.n	8004efa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d020      	beq.n	8004e94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4a6a      	ldr	r2, [pc, #424]	; (8005000 <I2C_ITError+0x25c>)
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe f923 	bl	80030aa <HAL_DMA_Abort_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8089 	beq.w	8004f7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4798      	blx	r3
 8004e92:	e074      	b.n	8004f7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	4a59      	ldr	r2, [pc, #356]	; (8005000 <I2C_ITError+0x25c>)
 8004e9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe f902 	bl	80030aa <HAL_DMA_Abort_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d068      	beq.n	8004f7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b40      	cmp	r3, #64	; 0x40
 8004eb8:	d10b      	bne.n	8004ed2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0201 	bic.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
 8004ef8:	e041      	b.n	8004f7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b60      	cmp	r3, #96	; 0x60
 8004f04:	d125      	bne.n	8004f52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d10b      	bne.n	8004f3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fe fee0 	bl	8003d10 <HAL_I2C_AbortCpltCallback>
 8004f50:	e015      	b.n	8004f7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d10b      	bne.n	8004f78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc fcc3 	bl	8001904 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10e      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d113      	bne.n	8004ff8 <I2C_ITError+0x254>
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b28      	cmp	r3, #40	; 0x28
 8004fd4:	d110      	bne.n	8004ff8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <I2C_ITError+0x260>)
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fe fe78 	bl	8003ce8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	08005009 	.word	0x08005009
 8005004:	ffff0000 	.word	0xffff0000

08005008 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005020:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005022:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <I2C_DMAAbort+0x148>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	4a4a      	ldr	r2, [pc, #296]	; (8005154 <I2C_DMAAbort+0x14c>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	0a1a      	lsrs	r2, r3, #8
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00da      	lsls	r2, r3, #3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800504e:	e00a      	b.n	8005066 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3b01      	subs	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d0ea      	beq.n	800503c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	2200      	movs	r2, #0
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	2200      	movs	r2, #0
 8005084:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a8:	2200      	movs	r2, #0
 80050aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	2200      	movs	r2, #0
 80050ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d10e      	bne.n	80050f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f7fe fe0e 	bl	8003d10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050f4:	e027      	b.n	8005146 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050fc:	2b28      	cmp	r3, #40	; 0x28
 80050fe:	d117      	bne.n	8005130 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800511e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2228      	movs	r2, #40	; 0x28
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800512e:	e007      	b.n	8005140 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005140:	6978      	ldr	r0, [r7, #20]
 8005142:	f7fc fbdf 	bl	8001904 <HAL_I2C_ErrorCallback>
}
 8005146:	bf00      	nop
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000214 	.word	0x20000214
 8005154:	14f8b589 	.word	0x14f8b589

08005158 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	4a13      	ldr	r2, [pc, #76]	; (80051b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	0a1a      	lsrs	r2, r3, #8
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3b01      	subs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e008      	b.n	80051a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d0e9      	beq.n	800517a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000214 	.word	0x20000214
 80051b8:	14f8b589 	.word	0x14f8b589

080051bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051cc:	d103      	bne.n	80051d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80051d4:	e007      	b.n	80051e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051de:	d102      	bne.n	80051e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2208      	movs	r2, #8
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
	...

080051f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e267      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d075      	beq.n	80052fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005212:	4b88      	ldr	r3, [pc, #544]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b04      	cmp	r3, #4
 800521c:	d00c      	beq.n	8005238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800521e:	4b85      	ldr	r3, [pc, #532]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005226:	2b08      	cmp	r3, #8
 8005228:	d112      	bne.n	8005250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522a:	4b82      	ldr	r3, [pc, #520]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005236:	d10b      	bne.n	8005250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05b      	beq.n	80052fc <HAL_RCC_OscConfig+0x108>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d157      	bne.n	80052fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e242      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d106      	bne.n	8005268 <HAL_RCC_OscConfig+0x74>
 800525a:	4b76      	ldr	r3, [pc, #472]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a75      	ldr	r2, [pc, #468]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e01d      	b.n	80052a4 <HAL_RCC_OscConfig+0xb0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x98>
 8005272:	4b70      	ldr	r3, [pc, #448]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a6f      	ldr	r2, [pc, #444]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6c      	ldr	r2, [pc, #432]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e00b      	b.n	80052a4 <HAL_RCC_OscConfig+0xb0>
 800528c:	4b69      	ldr	r3, [pc, #420]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a68      	ldr	r2, [pc, #416]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	4b66      	ldr	r3, [pc, #408]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a65      	ldr	r2, [pc, #404]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800529e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d013      	beq.n	80052d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fd f914 	bl	80024d8 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fd f910 	bl	80024d8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e207      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c6:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0xc0>
 80052d2:	e014      	b.n	80052fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fd f900 	bl	80024d8 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052dc:	f7fd f8fc 	bl	80024d8 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b64      	cmp	r3, #100	; 0x64
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e1f3      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ee:	4b51      	ldr	r3, [pc, #324]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1f0      	bne.n	80052dc <HAL_RCC_OscConfig+0xe8>
 80052fa:	e000      	b.n	80052fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d063      	beq.n	80053d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800530a:	4b4a      	ldr	r3, [pc, #296]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 030c 	and.w	r3, r3, #12
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005316:	4b47      	ldr	r3, [pc, #284]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800531e:	2b08      	cmp	r3, #8
 8005320:	d11c      	bne.n	800535c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005322:	4b44      	ldr	r3, [pc, #272]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d116      	bne.n	800535c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800532e:	4b41      	ldr	r3, [pc, #260]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_RCC_OscConfig+0x152>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e1c7      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4937      	ldr	r1, [pc, #220]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005356:	4313      	orrs	r3, r2
 8005358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535a:	e03a      	b.n	80053d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005364:	4b34      	ldr	r3, [pc, #208]	; (8005438 <HAL_RCC_OscConfig+0x244>)
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fd f8b5 	bl	80024d8 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005372:	f7fd f8b1 	bl	80024d8 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e1a8      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005384:	4b2b      	ldr	r3, [pc, #172]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4925      	ldr	r1, [pc, #148]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	600b      	str	r3, [r1, #0]
 80053a4:	e015      	b.n	80053d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_RCC_OscConfig+0x244>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fd f894 	bl	80024d8 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fd f890 	bl	80024d8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e187      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d036      	beq.n	800544c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053e6:	4b15      	ldr	r3, [pc, #84]	; (800543c <HAL_RCC_OscConfig+0x248>)
 80053e8:	2201      	movs	r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ec:	f7fd f874 	bl	80024d8 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053f4:	f7fd f870 	bl	80024d8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e167      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <HAL_RCC_OscConfig+0x240>)
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f0      	beq.n	80053f4 <HAL_RCC_OscConfig+0x200>
 8005412:	e01b      	b.n	800544c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCC_OscConfig+0x248>)
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541a:	f7fd f85d 	bl	80024d8 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005420:	e00e      	b.n	8005440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005422:	f7fd f859 	bl	80024d8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d907      	bls.n	8005440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e150      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
 8005434:	40023800 	.word	0x40023800
 8005438:	42470000 	.word	0x42470000
 800543c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005440:	4b88      	ldr	r3, [pc, #544]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ea      	bne.n	8005422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 8097 	beq.w	8005588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545e:	4b81      	ldr	r3, [pc, #516]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a7c      	ldr	r2, [pc, #496]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
 800547a:	4b7a      	ldr	r3, [pc, #488]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005486:	2301      	movs	r3, #1
 8005488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800548a:	4b77      	ldr	r3, [pc, #476]	; (8005668 <HAL_RCC_OscConfig+0x474>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d118      	bne.n	80054c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005496:	4b74      	ldr	r3, [pc, #464]	; (8005668 <HAL_RCC_OscConfig+0x474>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a73      	ldr	r2, [pc, #460]	; (8005668 <HAL_RCC_OscConfig+0x474>)
 800549c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054a2:	f7fd f819 	bl	80024d8 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054aa:	f7fd f815 	bl	80024d8 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e10c      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054bc:	4b6a      	ldr	r3, [pc, #424]	; (8005668 <HAL_RCC_OscConfig+0x474>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0f0      	beq.n	80054aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d106      	bne.n	80054de <HAL_RCC_OscConfig+0x2ea>
 80054d0:	4b64      	ldr	r3, [pc, #400]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	4a63      	ldr	r2, [pc, #396]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6713      	str	r3, [r2, #112]	; 0x70
 80054dc:	e01c      	b.n	8005518 <HAL_RCC_OscConfig+0x324>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_OscConfig+0x30c>
 80054e6:	4b5f      	ldr	r3, [pc, #380]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	4a5e      	ldr	r2, [pc, #376]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054ec:	f043 0304 	orr.w	r3, r3, #4
 80054f0:	6713      	str	r3, [r2, #112]	; 0x70
 80054f2:	4b5c      	ldr	r3, [pc, #368]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a5b      	ldr	r2, [pc, #364]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_OscConfig+0x324>
 8005500:	4b58      	ldr	r3, [pc, #352]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	4a57      	ldr	r2, [pc, #348]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	6713      	str	r3, [r2, #112]	; 0x70
 800550c:	4b55      	ldr	r3, [pc, #340]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	4a54      	ldr	r2, [pc, #336]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 0304 	bic.w	r3, r3, #4
 8005516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fc ffda 	bl	80024d8 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	e00a      	b.n	800553e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005528:	f7fc ffd6 	bl	80024d8 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0cb      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553e:	4b49      	ldr	r3, [pc, #292]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0ee      	beq.n	8005528 <HAL_RCC_OscConfig+0x334>
 800554a:	e014      	b.n	8005576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554c:	f7fc ffc4 	bl	80024d8 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005552:	e00a      	b.n	800556a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fc ffc0 	bl	80024d8 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0b5      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556a:	4b3e      	ldr	r3, [pc, #248]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1ee      	bne.n	8005554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d105      	bne.n	8005588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557c:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	4a38      	ldr	r2, [pc, #224]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80a1 	beq.w	80056d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005592:	4b34      	ldr	r3, [pc, #208]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 030c 	and.w	r3, r3, #12
 800559a:	2b08      	cmp	r3, #8
 800559c:	d05c      	beq.n	8005658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d141      	bne.n	800562a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a6:	4b31      	ldr	r3, [pc, #196]	; (800566c <HAL_RCC_OscConfig+0x478>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ac:	f7fc ff94 	bl	80024d8 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fc ff90 	bl	80024d8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e087      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	4b27      	ldr	r3, [pc, #156]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1f0      	bne.n	80055b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69da      	ldr	r2, [r3, #28]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	019b      	lsls	r3, r3, #6
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	061b      	lsls	r3, r3, #24
 80055f6:	491b      	ldr	r1, [pc, #108]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x478>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005602:	f7fc ff69 	bl	80024d8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560a:	f7fc ff65 	bl	80024d8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e05c      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561c:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x416>
 8005628:	e054      	b.n	80056d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562a:	4b10      	ldr	r3, [pc, #64]	; (800566c <HAL_RCC_OscConfig+0x478>)
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005630:	f7fc ff52 	bl	80024d8 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc ff4e 	bl	80024d8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e045      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCC_OscConfig+0x470>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f0      	bne.n	8005638 <HAL_RCC_OscConfig+0x444>
 8005656:	e03d      	b.n	80056d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d107      	bne.n	8005670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e038      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
 8005664:	40023800 	.word	0x40023800
 8005668:	40007000 	.word	0x40007000
 800566c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x4ec>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d028      	beq.n	80056d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d121      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d11a      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056a0:	4013      	ands	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d111      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	3b01      	subs	r3, #1
 80056ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40023800 	.word	0x40023800

080056e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0cc      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f8:	4b68      	ldr	r3, [pc, #416]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d90c      	bls.n	8005720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b65      	ldr	r3, [pc, #404]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b63      	ldr	r3, [pc, #396]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0b8      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d005      	beq.n	8005744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005738:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a58      	ldr	r2, [pc, #352]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005750:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800575a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800575c:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	494d      	ldr	r1, [pc, #308]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	4313      	orrs	r3, r2
 800576c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d044      	beq.n	8005804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d107      	bne.n	8005792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d119      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e07f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d003      	beq.n	80057a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d107      	bne.n	80057b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a2:	4b3f      	ldr	r3, [pc, #252]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e06f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e067      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 0203 	bic.w	r2, r3, #3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4934      	ldr	r1, [pc, #208]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057d4:	f7fc fe80 	bl	80024d8 <HAL_GetTick>
 80057d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057da:	e00a      	b.n	80057f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057dc:	f7fc fe7c 	bl	80024d8 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e04f      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 020c 	and.w	r2, r3, #12
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	429a      	cmp	r2, r3
 8005802:	d1eb      	bne.n	80057dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d20c      	bcs.n	800582c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e032      	b.n	8005892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4916      	ldr	r1, [pc, #88]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	490e      	ldr	r1, [pc, #56]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800586a:	f000 f821 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 800586e:	4602      	mov	r2, r0
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	490a      	ldr	r1, [pc, #40]	; (80058a4 <HAL_RCC_ClockConfig+0x1c0>)
 800587c:	5ccb      	ldrb	r3, [r1, r3]
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	4a09      	ldr	r2, [pc, #36]	; (80058a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_ClockConfig+0x1c8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7fc fde0 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40023c00 	.word	0x40023c00
 80058a0:	40023800 	.word	0x40023800
 80058a4:	08007494 	.word	0x08007494
 80058a8:	20000214 	.word	0x20000214
 80058ac:	20000218 	.word	0x20000218

080058b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058b4:	b090      	sub	sp, #64	; 0x40
 80058b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c0:	2300      	movs	r3, #0
 80058c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c8:	4b59      	ldr	r3, [pc, #356]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 030c 	and.w	r3, r3, #12
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d00d      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x40>
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	f200 80a1 	bhi.w	8005a1c <HAL_RCC_GetSysClockFreq+0x16c>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x34>
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d003      	beq.n	80058ea <HAL_RCC_GetSysClockFreq+0x3a>
 80058e2:	e09b      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x184>)
 80058e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80058e8:	e09b      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058ea:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x188>)
 80058ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058ee:	e098      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f0:	4b4f      	ldr	r3, [pc, #316]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058fa:	4b4d      	ldr	r3, [pc, #308]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d028      	beq.n	8005958 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005906:	4b4a      	ldr	r3, [pc, #296]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	099b      	lsrs	r3, r3, #6
 800590c:	2200      	movs	r2, #0
 800590e:	623b      	str	r3, [r7, #32]
 8005910:	627a      	str	r2, [r7, #36]	; 0x24
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005918:	2100      	movs	r1, #0
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800591c:	fb03 f201 	mul.w	r2, r3, r1
 8005920:	2300      	movs	r3, #0
 8005922:	fb00 f303 	mul.w	r3, r0, r3
 8005926:	4413      	add	r3, r2
 8005928:	4a43      	ldr	r2, [pc, #268]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800592a:	fba0 1202 	umull	r1, r2, r0, r2
 800592e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005930:	460a      	mov	r2, r1
 8005932:	62ba      	str	r2, [r7, #40]	; 0x28
 8005934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005936:	4413      	add	r3, r2
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	2200      	movs	r2, #0
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	61fa      	str	r2, [r7, #28]
 8005942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800594a:	f7fb f863 	bl	8000a14 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4613      	mov	r3, r2
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005956:	e053      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005958:	4b35      	ldr	r3, [pc, #212]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	099b      	lsrs	r3, r3, #6
 800595e:	2200      	movs	r2, #0
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	617a      	str	r2, [r7, #20]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800596a:	f04f 0b00 	mov.w	fp, #0
 800596e:	4652      	mov	r2, sl
 8005970:	465b      	mov	r3, fp
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	0159      	lsls	r1, r3, #5
 800597c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005980:	0150      	lsls	r0, r2, #5
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	ebb2 080a 	subs.w	r8, r2, sl
 800598a:	eb63 090b 	sbc.w	r9, r3, fp
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800599a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800599e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059a2:	ebb2 0408 	subs.w	r4, r2, r8
 80059a6:	eb63 0509 	sbc.w	r5, r3, r9
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	00eb      	lsls	r3, r5, #3
 80059b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059b8:	00e2      	lsls	r2, r4, #3
 80059ba:	4614      	mov	r4, r2
 80059bc:	461d      	mov	r5, r3
 80059be:	eb14 030a 	adds.w	r3, r4, sl
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	eb45 030b 	adc.w	r3, r5, fp
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059d6:	4629      	mov	r1, r5
 80059d8:	028b      	lsls	r3, r1, #10
 80059da:	4621      	mov	r1, r4
 80059dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059e0:	4621      	mov	r1, r4
 80059e2:	028a      	lsls	r2, r1, #10
 80059e4:	4610      	mov	r0, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ea:	2200      	movs	r2, #0
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	60fa      	str	r2, [r7, #12]
 80059f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059f4:	f7fb f80e 	bl	8000a14 <__aeabi_uldivmod>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4613      	mov	r3, r2
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a00:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a1a:	e002      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3740      	adds	r7, #64	; 0x40
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	00f42400 	.word	0x00f42400
 8005a38:	017d7840 	.word	0x017d7840

08005a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a40:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000214 	.word	0x20000214

08005a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a58:	f7ff fff0 	bl	8005a3c <HAL_RCC_GetHCLKFreq>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	0a9b      	lsrs	r3, r3, #10
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	4903      	ldr	r1, [pc, #12]	; (8005a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a6a:	5ccb      	ldrb	r3, [r1, r3]
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40023800 	.word	0x40023800
 8005a78:	080074a4 	.word	0x080074a4

08005a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a80:	f7ff ffdc 	bl	8005a3c <HAL_RCC_GetHCLKFreq>
 8005a84:	4602      	mov	r2, r0
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	0b5b      	lsrs	r3, r3, #13
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a92:	5ccb      	ldrb	r3, [r1, r3]
 8005a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	080074a4 	.word	0x080074a4

08005aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e041      	b.n	8005b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc fb78 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	f000 fac0 	bl	8006068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e044      	b.n	8005be6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d018      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d013      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00e      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_TIM_Base_Start_IT+0xb8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <HAL_TIM_Base_Start_IT+0xbc>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIM_Base_Start_IT+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d111      	bne.n	8005bd4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d010      	beq.n	8005be4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd2:	e007      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000

08005c08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6a1a      	ldr	r2, [r3, #32]
 8005c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10f      	bne.n	8005c50 <HAL_TIM_Base_Stop_IT+0x48>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6a1a      	ldr	r2, [r3, #32]
 8005c36:	f240 4344 	movw	r3, #1092	; 0x444
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_Base_Stop_IT+0x48>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d122      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d11b      	bne.n	8005cc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f06f 0202 	mvn.w	r2, #2
 8005c92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f9bf 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005cae:	e005      	b.n	8005cbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f9b1 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f9c2 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d122      	bne.n	8005d16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d11b      	bne.n	8005d16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0204 	mvn.w	r2, #4
 8005ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f995 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005d02:	e005      	b.n	8005d10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f987 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f998 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d122      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d11b      	bne.n	8005d6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0208 	mvn.w	r2, #8
 8005d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f96b 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005d56:	e005      	b.n	8005d64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f95d 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f96e 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d122      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b10      	cmp	r3, #16
 8005d84:	d11b      	bne.n	8005dbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0210 	mvn.w	r2, #16
 8005d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2208      	movs	r2, #8
 8005d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f941 	bl	800602c <HAL_TIM_IC_CaptureCallback>
 8005daa:	e005      	b.n	8005db8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f933 	bl	8006018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f944 	bl	8006040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d10e      	bne.n	8005dea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d107      	bne.n	8005dea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f06f 0201 	mvn.w	r2, #1
 8005de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f90d 	bl	8006004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fabb 	bl	800638c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f909 	bl	8006054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d10e      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0220 	mvn.w	r2, #32
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa85 	bl	8006378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_ConfigClockSource+0x1c>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e0b4      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x186>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eca:	d03e      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xd4>
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	f200 8087 	bhi.w	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	f000 8086 	beq.w	8005fe8 <HAL_TIM_ConfigClockSource+0x172>
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	d87f      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	2b70      	cmp	r3, #112	; 0x70
 8005ee4:	d01a      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0xa6>
 8005ee6:	2b70      	cmp	r3, #112	; 0x70
 8005ee8:	d87b      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	2b60      	cmp	r3, #96	; 0x60
 8005eec:	d050      	beq.n	8005f90 <HAL_TIM_ConfigClockSource+0x11a>
 8005eee:	2b60      	cmp	r3, #96	; 0x60
 8005ef0:	d877      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	2b50      	cmp	r3, #80	; 0x50
 8005ef4:	d03c      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0xfa>
 8005ef6:	2b50      	cmp	r3, #80	; 0x50
 8005ef8:	d873      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d058      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0x13a>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d86f      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f02:	2b30      	cmp	r3, #48	; 0x30
 8005f04:	d064      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d86b      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d060      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d867      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d05c      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d05a      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1a:	e062      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 f996 	bl	800625c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e04f      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 f97f 	bl	800625c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6c:	609a      	str	r2, [r3, #8]
      break;
 8005f6e:	e03c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f000 f8f3 	bl	8006168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2150      	movs	r1, #80	; 0x50
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f94c 	bl	8006226 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e02c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 f912 	bl	80061c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2160      	movs	r1, #96	; 0x60
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f93c 	bl	8006226 <TIM_ITRx_SetConfig>
      break;
 8005fae:	e01c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 f8d3 	bl	8006168 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2140      	movs	r1, #64	; 0x40
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f92c 	bl	8006226 <TIM_ITRx_SetConfig>
      break;
 8005fce:	e00c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 f923 	bl	8006226 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe6:	e000      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a34      	ldr	r2, [pc, #208]	; (800614c <TIM_Base_SetConfig+0xe4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00f      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006086:	d00b      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a31      	ldr	r2, [pc, #196]	; (8006150 <TIM_Base_SetConfig+0xe8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d007      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a30      	ldr	r2, [pc, #192]	; (8006154 <TIM_Base_SetConfig+0xec>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0x38>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a2f      	ldr	r2, [pc, #188]	; (8006158 <TIM_Base_SetConfig+0xf0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d108      	bne.n	80060b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <TIM_Base_SetConfig+0xe4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d01b      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c0:	d017      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <TIM_Base_SetConfig+0xe8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a21      	ldr	r2, [pc, #132]	; (8006154 <TIM_Base_SetConfig+0xec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00f      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a20      	ldr	r2, [pc, #128]	; (8006158 <TIM_Base_SetConfig+0xf0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00b      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <TIM_Base_SetConfig+0xf4>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d007      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <TIM_Base_SetConfig+0xf8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d003      	beq.n	80060f2 <TIM_Base_SetConfig+0x8a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <TIM_Base_SetConfig+0xfc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d108      	bne.n	8006104 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a08      	ldr	r2, [pc, #32]	; (800614c <TIM_Base_SetConfig+0xe4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d103      	bne.n	8006138 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	615a      	str	r2, [r3, #20]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40014000 	.word	0x40014000
 8006160:	40014400 	.word	0x40014400
 8006164:	40014800 	.word	0x40014800

08006168 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0201 	bic.w	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 030a 	bic.w	r3, r3, #10
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	621a      	str	r2, [r3, #32]
}
 80061ba:	bf00      	nop
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b087      	sub	sp, #28
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	60f8      	str	r0, [r7, #12]
 80061ce:	60b9      	str	r1, [r7, #8]
 80061d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	f023 0210 	bic.w	r2, r3, #16
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	031b      	lsls	r3, r3, #12
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006202:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	621a      	str	r2, [r3, #32]
}
 800621a:	bf00      	nop
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	f043 0307 	orr.w	r3, r3, #7
 8006248:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	609a      	str	r2, [r3, #8]
}
 8006250:	bf00      	nop
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006276:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	431a      	orrs	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4313      	orrs	r3, r2
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e050      	b.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d013      	beq.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a15      	ldr	r2, [pc, #84]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a13      	ldr	r2, [pc, #76]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10c      	bne.n	8006344 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	4313      	orrs	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40014000 	.word	0x40014000

08006378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e03f      	b.n	8006432 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fb ffa6 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2224      	movs	r2, #36	; 0x24
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fda7 	bl	8006f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	4613      	mov	r3, r2
 8006446:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b20      	cmp	r3, #32
 8006452:	d130      	bne.n	80064b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_UART_Transmit_IT+0x26>
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e029      	b.n	80064b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_UART_Transmit_IT+0x38>
 800646e:	2302      	movs	r3, #2
 8006470:	e022      	b.n	80064b8 <HAL_UART_Transmit_IT+0x7e>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	88fa      	ldrh	r2, [r7, #6]
 8006484:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	88fa      	ldrh	r2, [r7, #6]
 800648a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	e000      	b.n	80064b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
  }
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b09a      	sub	sp, #104	; 0x68
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	330c      	adds	r3, #12
 80064d2:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e2:	667b      	str	r3, [r7, #100]	; 0x64
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80064ec:	657a      	str	r2, [r7, #84]	; 0x54
 80064ee:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e5      	bne.n	80064cc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3314      	adds	r3, #20
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	663b      	str	r3, [r7, #96]	; 0x60
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006520:	643a      	str	r2, [r7, #64]	; 0x40
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800652e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	d119      	bne.n	8006570 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	61fb      	str	r3, [r7, #28]
   return(result);
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f023 0310 	bic.w	r3, r3, #16
 8006552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800655c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e5      	bne.n	800653c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d13f      	bne.n	80065fe <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60bb      	str	r3, [r7, #8]
   return(result);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	65bb      	str	r3, [r7, #88]	; 0x58
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3314      	adds	r3, #20
 800659c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800659e:	61ba      	str	r2, [r7, #24]
 80065a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6979      	ldr	r1, [r7, #20]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	613b      	str	r3, [r7, #16]
   return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d013      	beq.n	80065e2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <HAL_UART_AbortReceive_IT+0x160>)
 80065c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fc fd6f 	bl	80030aa <HAL_DMA_Abort_IT>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d022      	beq.n	8006618 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065dc:	4610      	mov	r0, r2
 80065de:	4798      	blx	r3
 80065e0:	e01a      	b.n	8006618 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 faa4 	bl	8006b44 <HAL_UART_AbortReceiveCpltCallback>
 80065fc:	e00c      	b.n	8006618 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa96 	bl	8006b44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3768      	adds	r7, #104	; 0x68
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	08006cf3 	.word	0x08006cf3

08006628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b0ba      	sub	sp, #232	; 0xe8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fbb3 	bl	8006df2 <UART_Receive_IT>
      return;
 800668c:	e256      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80de 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
 8006698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80d1 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0202 	orr.w	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
 8006706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f043 0204 	orr.w	r2, r3, #4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d011      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
 800672a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f043 0208 	orr.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 81ed 	beq.w	8006b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fb3e 	bl	8006df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <HAL_UART_IRQHandler+0x17a>
 800679a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04f      	beq.n	8006842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa2e 	bl	8006c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d141      	bne.n	800683a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d9      	bne.n	80067b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	4a7d      	ldr	r2, [pc, #500]	; (8006a04 <HAL_UART_IRQHandler+0x3dc>)
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	4618      	mov	r0, r3
 8006818:	f7fc fc47 	bl	80030aa <HAL_DMA_Abort_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	e00e      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fb f8fc 	bl	8001a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	e00a      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f8f8 	bl	8001a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e006      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fb f8f4 	bl	8001a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800684e:	e170      	b.n	8006b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	bf00      	nop
    return;
 8006852:	e16e      	b.n	8006b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 814a 	bne.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8143 	beq.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 813c 	beq.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	f040 80b4 	bne.w	8006a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8140 	beq.w	8006b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068be:	429a      	cmp	r2, r3
 80068c0:	f080 8139 	bcs.w	8006b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d6:	f000 8088 	beq.w	80069ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800690a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800691e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1d9      	bne.n	80068da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800694a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800694e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800695c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e1      	bne.n	8006926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800698c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e3      	bne.n	8006962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80069ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fc faf0 	bl	8002fca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8ac 	bl	8006b58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a00:	e099      	b.n	8006b36 <HAL_UART_IRQHandler+0x50e>
 8006a02:	bf00      	nop
 8006a04:	08006ccb 	.word	0x08006ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 808b 	beq.w	8006b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8086 	beq.w	8006b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a52:	647a      	str	r2, [r7, #68]	; 0x44
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	623b      	str	r3, [r7, #32]
   return(result);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f834 	bl	8006b58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af0:	e023      	b.n	8006b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <HAL_UART_IRQHandler+0x4ea>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f909 	bl	8006d22 <UART_Transmit_IT>
    return;
 8006b10:	e014      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <HAL_UART_IRQHandler+0x514>
 8006b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f949 	bl	8006dc2 <UART_EndTransmit_IT>
    return;
 8006b30:	e004      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
    return;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
      return;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
      return;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	37e8      	adds	r7, #232	; 0xe8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	460b      	mov	r3, r1
 8006b62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	88fa      	ldrh	r2, [r7, #6]
 8006ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2222      	movs	r2, #34	; 0x22
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f042 0201 	orr.w	r2, r2, #1
 8006be4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0220 	orr.w	r2, r2, #32
 8006bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b095      	sub	sp, #84	; 0x54
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d119      	bne.n	8006cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	330c      	adds	r3, #12
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9c:	61ba      	str	r2, [r7, #24]
 8006c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6979      	ldr	r1, [r7, #20]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e5      	bne.n	8006c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cbe:	bf00      	nop
 8006cc0:	3754      	adds	r7, #84	; 0x54
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7fa fea3 	bl	8001a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ff15 	bl	8006b44 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b21      	cmp	r3, #33	; 0x21
 8006d34:	d13e      	bne.n	8006db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d114      	bne.n	8006d6a <UART_Transmit_IT+0x48>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d110      	bne.n	8006d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	1c9a      	adds	r2, r3, #2
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	621a      	str	r2, [r3, #32]
 8006d68:	e008      	b.n	8006d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6211      	str	r1, [r2, #32]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10f      	bne.n	8006db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa fdca 	bl	800197c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08c      	sub	sp, #48	; 0x30
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b22      	cmp	r3, #34	; 0x22
 8006e04:	f040 8093 	bne.w	8006f2e <UART_Receive_IT+0x13c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e10:	d117      	bne.n	8006e42 <UART_Receive_IT+0x50>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d113      	bne.n	8006e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e40:	e026      	b.n	8006e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d007      	beq.n	8006e66 <UART_Receive_IT+0x74>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <UART_Receive_IT+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e008      	b.n	8006e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d142      	bne.n	8006f2a <UART_Receive_IT+0x138>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
//      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d135      	bne.n	8006f20 <UART_Receive_IT+0x12e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f023 0310 	bic.w	r3, r3, #16
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eda:	623a      	str	r2, [r7, #32]
 8006edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	69f9      	ldr	r1, [r7, #28]
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e5      	bne.n	8006eba <UART_Receive_IT+0xc8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d10a      	bne.n	8006f12 <UART_Receive_IT+0x120>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fe1d 	bl	8006b58 <HAL_UARTEx_RxEventCallback>
 8006f1e:	e002      	b.n	8006f26 <UART_Receive_IT+0x134>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7fa fd41 	bl	80019a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e002      	b.n	8006f30 <UART_Receive_IT+0x13e>
    }
    return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e000      	b.n	8006f30 <UART_Receive_IT+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8006f2e:	2302      	movs	r3, #2
  }
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3730      	adds	r7, #48	; 0x30
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f3c:	b0c0      	sub	sp, #256	; 0x100
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	68d9      	ldr	r1, [r3, #12]
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	ea40 0301 	orr.w	r3, r0, r1
 8006f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f90:	f021 010c 	bic.w	r1, r1, #12
 8006f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb2:	6999      	ldr	r1, [r3, #24]
 8006fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	ea40 0301 	orr.w	r3, r0, r1
 8006fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b8f      	ldr	r3, [pc, #572]	; (8007204 <UART_SetConfig+0x2cc>)
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d005      	beq.n	8006fd8 <UART_SetConfig+0xa0>
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	4b8d      	ldr	r3, [pc, #564]	; (8007208 <UART_SetConfig+0x2d0>)
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d104      	bne.n	8006fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fd8:	f7fe fd50 	bl	8005a7c <HAL_RCC_GetPCLK2Freq>
 8006fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006fe0:	e003      	b.n	8006fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fe2:	f7fe fd37 	bl	8005a54 <HAL_RCC_GetPCLK1Freq>
 8006fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff4:	f040 810c 	bne.w	8007210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	1891      	adds	r1, r2, r2
 8007010:	65b9      	str	r1, [r7, #88]	; 0x58
 8007012:	415b      	adcs	r3, r3
 8007014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800701a:	4621      	mov	r1, r4
 800701c:	eb12 0801 	adds.w	r8, r2, r1
 8007020:	4629      	mov	r1, r5
 8007022:	eb43 0901 	adc.w	r9, r3, r1
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703a:	4690      	mov	r8, r2
 800703c:	4699      	mov	r9, r3
 800703e:	4623      	mov	r3, r4
 8007040:	eb18 0303 	adds.w	r3, r8, r3
 8007044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007048:	462b      	mov	r3, r5
 800704a:	eb49 0303 	adc.w	r3, r9, r3
 800704e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800705e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007066:	460b      	mov	r3, r1
 8007068:	18db      	adds	r3, r3, r3
 800706a:	653b      	str	r3, [r7, #80]	; 0x50
 800706c:	4613      	mov	r3, r2
 800706e:	eb42 0303 	adc.w	r3, r2, r3
 8007072:	657b      	str	r3, [r7, #84]	; 0x54
 8007074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800707c:	f7f9 fcca 	bl	8000a14 <__aeabi_uldivmod>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4b61      	ldr	r3, [pc, #388]	; (800720c <UART_SetConfig+0x2d4>)
 8007086:	fba3 2302 	umull	r2, r3, r3, r2
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	011c      	lsls	r4, r3, #4
 800708e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800709c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	1891      	adds	r1, r2, r2
 80070a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80070a8:	415b      	adcs	r3, r3
 80070aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80070b0:	4641      	mov	r1, r8
 80070b2:	eb12 0a01 	adds.w	sl, r2, r1
 80070b6:	4649      	mov	r1, r9
 80070b8:	eb43 0b01 	adc.w	fp, r3, r1
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070d0:	4692      	mov	sl, r2
 80070d2:	469b      	mov	fp, r3
 80070d4:	4643      	mov	r3, r8
 80070d6:	eb1a 0303 	adds.w	r3, sl, r3
 80070da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070de:	464b      	mov	r3, r9
 80070e0:	eb4b 0303 	adc.w	r3, fp, r3
 80070e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80070f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070fc:	460b      	mov	r3, r1
 80070fe:	18db      	adds	r3, r3, r3
 8007100:	643b      	str	r3, [r7, #64]	; 0x40
 8007102:	4613      	mov	r3, r2
 8007104:	eb42 0303 	adc.w	r3, r2, r3
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
 800710a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800710e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007112:	f7f9 fc7f 	bl	8000a14 <__aeabi_uldivmod>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4611      	mov	r1, r2
 800711c:	4b3b      	ldr	r3, [pc, #236]	; (800720c <UART_SetConfig+0x2d4>)
 800711e:	fba3 2301 	umull	r2, r3, r3, r1
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	2264      	movs	r2, #100	; 0x64
 8007126:	fb02 f303 	mul.w	r3, r2, r3
 800712a:	1acb      	subs	r3, r1, r3
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007132:	4b36      	ldr	r3, [pc, #216]	; (800720c <UART_SetConfig+0x2d4>)
 8007134:	fba3 2302 	umull	r2, r3, r3, r2
 8007138:	095b      	lsrs	r3, r3, #5
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007140:	441c      	add	r4, r3
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800714c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	63b9      	str	r1, [r7, #56]	; 0x38
 800715c:	415b      	adcs	r3, r3
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007164:	4641      	mov	r1, r8
 8007166:	1851      	adds	r1, r2, r1
 8007168:	6339      	str	r1, [r7, #48]	; 0x30
 800716a:	4649      	mov	r1, r9
 800716c:	414b      	adcs	r3, r1
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800717c:	4659      	mov	r1, fp
 800717e:	00cb      	lsls	r3, r1, #3
 8007180:	4651      	mov	r1, sl
 8007182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007186:	4651      	mov	r1, sl
 8007188:	00ca      	lsls	r2, r1, #3
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	4603      	mov	r3, r0
 8007190:	4642      	mov	r2, r8
 8007192:	189b      	adds	r3, r3, r2
 8007194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007198:	464b      	mov	r3, r9
 800719a:	460a      	mov	r2, r1
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80071b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80071b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80071b8:	460b      	mov	r3, r1
 80071ba:	18db      	adds	r3, r3, r3
 80071bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071be:	4613      	mov	r3, r2
 80071c0:	eb42 0303 	adc.w	r3, r2, r3
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80071ce:	f7f9 fc21 	bl	8000a14 <__aeabi_uldivmod>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4b0d      	ldr	r3, [pc, #52]	; (800720c <UART_SetConfig+0x2d4>)
 80071d8:	fba3 1302 	umull	r1, r3, r3, r2
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	2164      	movs	r1, #100	; 0x64
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	3332      	adds	r3, #50	; 0x32
 80071ea:	4a08      	ldr	r2, [pc, #32]	; (800720c <UART_SetConfig+0x2d4>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	f003 0207 	and.w	r2, r3, #7
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4422      	add	r2, r4
 80071fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007200:	e105      	b.n	800740e <UART_SetConfig+0x4d6>
 8007202:	bf00      	nop
 8007204:	40011000 	.word	0x40011000
 8007208:	40011400 	.word	0x40011400
 800720c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007214:	2200      	movs	r2, #0
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800721a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800721e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007222:	4642      	mov	r2, r8
 8007224:	464b      	mov	r3, r9
 8007226:	1891      	adds	r1, r2, r2
 8007228:	6239      	str	r1, [r7, #32]
 800722a:	415b      	adcs	r3, r3
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007232:	4641      	mov	r1, r8
 8007234:	1854      	adds	r4, r2, r1
 8007236:	4649      	mov	r1, r9
 8007238:	eb43 0501 	adc.w	r5, r3, r1
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	00eb      	lsls	r3, r5, #3
 8007246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800724a:	00e2      	lsls	r2, r4, #3
 800724c:	4614      	mov	r4, r2
 800724e:	461d      	mov	r5, r3
 8007250:	4643      	mov	r3, r8
 8007252:	18e3      	adds	r3, r4, r3
 8007254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007258:	464b      	mov	r3, r9
 800725a:	eb45 0303 	adc.w	r3, r5, r3
 800725e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800726e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800727e:	4629      	mov	r1, r5
 8007280:	008b      	lsls	r3, r1, #2
 8007282:	4621      	mov	r1, r4
 8007284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007288:	4621      	mov	r1, r4
 800728a:	008a      	lsls	r2, r1, #2
 800728c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007290:	f7f9 fbc0 	bl	8000a14 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4b60      	ldr	r3, [pc, #384]	; (800741c <UART_SetConfig+0x4e4>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	011c      	lsls	r4, r3, #4
 80072a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80072b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	1891      	adds	r1, r2, r2
 80072ba:	61b9      	str	r1, [r7, #24]
 80072bc:	415b      	adcs	r3, r3
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c4:	4641      	mov	r1, r8
 80072c6:	1851      	adds	r1, r2, r1
 80072c8:	6139      	str	r1, [r7, #16]
 80072ca:	4649      	mov	r1, r9
 80072cc:	414b      	adcs	r3, r1
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	f04f 0200 	mov.w	r2, #0
 80072d4:	f04f 0300 	mov.w	r3, #0
 80072d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072dc:	4659      	mov	r1, fp
 80072de:	00cb      	lsls	r3, r1, #3
 80072e0:	4651      	mov	r1, sl
 80072e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e6:	4651      	mov	r1, sl
 80072e8:	00ca      	lsls	r2, r1, #3
 80072ea:	4610      	mov	r0, r2
 80072ec:	4619      	mov	r1, r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	4642      	mov	r2, r8
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072f8:	464b      	mov	r3, r9
 80072fa:	460a      	mov	r2, r1
 80072fc:	eb42 0303 	adc.w	r3, r2, r3
 8007300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	67bb      	str	r3, [r7, #120]	; 0x78
 800730e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800731c:	4649      	mov	r1, r9
 800731e:	008b      	lsls	r3, r1, #2
 8007320:	4641      	mov	r1, r8
 8007322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007326:	4641      	mov	r1, r8
 8007328:	008a      	lsls	r2, r1, #2
 800732a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800732e:	f7f9 fb71 	bl	8000a14 <__aeabi_uldivmod>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	4b39      	ldr	r3, [pc, #228]	; (800741c <UART_SetConfig+0x4e4>)
 8007338:	fba3 1302 	umull	r1, r3, r3, r2
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	2164      	movs	r1, #100	; 0x64
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	3332      	adds	r3, #50	; 0x32
 800734a:	4a34      	ldr	r2, [pc, #208]	; (800741c <UART_SetConfig+0x4e4>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007356:	441c      	add	r4, r3
 8007358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800735c:	2200      	movs	r2, #0
 800735e:	673b      	str	r3, [r7, #112]	; 0x70
 8007360:	677a      	str	r2, [r7, #116]	; 0x74
 8007362:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007366:	4642      	mov	r2, r8
 8007368:	464b      	mov	r3, r9
 800736a:	1891      	adds	r1, r2, r2
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	415b      	adcs	r3, r3
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007376:	4641      	mov	r1, r8
 8007378:	1851      	adds	r1, r2, r1
 800737a:	6039      	str	r1, [r7, #0]
 800737c:	4649      	mov	r1, r9
 800737e:	414b      	adcs	r3, r1
 8007380:	607b      	str	r3, [r7, #4]
 8007382:	f04f 0200 	mov.w	r2, #0
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800738e:	4659      	mov	r1, fp
 8007390:	00cb      	lsls	r3, r1, #3
 8007392:	4651      	mov	r1, sl
 8007394:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007398:	4651      	mov	r1, sl
 800739a:	00ca      	lsls	r2, r1, #3
 800739c:	4610      	mov	r0, r2
 800739e:	4619      	mov	r1, r3
 80073a0:	4603      	mov	r3, r0
 80073a2:	4642      	mov	r2, r8
 80073a4:	189b      	adds	r3, r3, r2
 80073a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073a8:	464b      	mov	r3, r9
 80073aa:	460a      	mov	r2, r1
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	663b      	str	r3, [r7, #96]	; 0x60
 80073bc:	667a      	str	r2, [r7, #100]	; 0x64
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80073ca:	4649      	mov	r1, r9
 80073cc:	008b      	lsls	r3, r1, #2
 80073ce:	4641      	mov	r1, r8
 80073d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073d4:	4641      	mov	r1, r8
 80073d6:	008a      	lsls	r2, r1, #2
 80073d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80073dc:	f7f9 fb1a 	bl	8000a14 <__aeabi_uldivmod>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4b0d      	ldr	r3, [pc, #52]	; (800741c <UART_SetConfig+0x4e4>)
 80073e6:	fba3 1302 	umull	r1, r3, r3, r2
 80073ea:	095b      	lsrs	r3, r3, #5
 80073ec:	2164      	movs	r1, #100	; 0x64
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	3332      	adds	r3, #50	; 0x32
 80073f8:	4a08      	ldr	r2, [pc, #32]	; (800741c <UART_SetConfig+0x4e4>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	095b      	lsrs	r3, r3, #5
 8007400:	f003 020f 	and.w	r2, r3, #15
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4422      	add	r2, r4
 800740c:	609a      	str	r2, [r3, #8]
}
 800740e:	bf00      	nop
 8007410:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	51eb851f 	.word	0x51eb851f

08007420 <__libc_init_array>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	4d0d      	ldr	r5, [pc, #52]	; (8007458 <__libc_init_array+0x38>)
 8007424:	4c0d      	ldr	r4, [pc, #52]	; (800745c <__libc_init_array+0x3c>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	2600      	movs	r6, #0
 800742c:	42a6      	cmp	r6, r4
 800742e:	d109      	bne.n	8007444 <__libc_init_array+0x24>
 8007430:	4d0b      	ldr	r5, [pc, #44]	; (8007460 <__libc_init_array+0x40>)
 8007432:	4c0c      	ldr	r4, [pc, #48]	; (8007464 <__libc_init_array+0x44>)
 8007434:	f000 f820 	bl	8007478 <_init>
 8007438:	1b64      	subs	r4, r4, r5
 800743a:	10a4      	asrs	r4, r4, #2
 800743c:	2600      	movs	r6, #0
 800743e:	42a6      	cmp	r6, r4
 8007440:	d105      	bne.n	800744e <__libc_init_array+0x2e>
 8007442:	bd70      	pop	{r4, r5, r6, pc}
 8007444:	f855 3b04 	ldr.w	r3, [r5], #4
 8007448:	4798      	blx	r3
 800744a:	3601      	adds	r6, #1
 800744c:	e7ee      	b.n	800742c <__libc_init_array+0xc>
 800744e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007452:	4798      	blx	r3
 8007454:	3601      	adds	r6, #1
 8007456:	e7f2      	b.n	800743e <__libc_init_array+0x1e>
 8007458:	080074b4 	.word	0x080074b4
 800745c:	080074b4 	.word	0x080074b4
 8007460:	080074b4 	.word	0x080074b4
 8007464:	080074b8 	.word	0x080074b8

08007468 <memset>:
 8007468:	4402      	add	r2, r0
 800746a:	4603      	mov	r3, r0
 800746c:	4293      	cmp	r3, r2
 800746e:	d100      	bne.n	8007472 <memset+0xa>
 8007470:	4770      	bx	lr
 8007472:	f803 1b01 	strb.w	r1, [r3], #1
 8007476:	e7f9      	b.n	800746c <memset+0x4>

08007478 <_init>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr

08007484 <_fini>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	bf00      	nop
 8007488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748a:	bc08      	pop	{r3}
 800748c:	469e      	mov	lr, r3
 800748e:	4770      	bx	lr
