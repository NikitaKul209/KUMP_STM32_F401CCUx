
KUMP_STM32_F401CCUx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000010  08005fbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08005fbc  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001511a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dab  00000000  00000000  0003515a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00037f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00039080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d41  00000000  00000000  0003a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017124  00000000  00000000  00052e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009beb9  00000000  00000000  00069f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105e06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  00105e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005f68 	.word	0x08005f68

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005f68 	.word	0x08005f68

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_ADC1_Init+0x98>)
 80004ec:	4a21      	ldr	r2, [pc, #132]	; (8000574 <MX_ADC1_Init+0x9c>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_ADC1_Init+0x98>)
 8000512:	2200      	movs	r2, #0
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_ADC1_Init+0x98>)
 8000518:	4a17      	ldr	r2, [pc, #92]	; (8000578 <MX_ADC1_Init+0xa0>)
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_ADC1_Init+0x98>)
 8000532:	2201      	movs	r2, #1
 8000534:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <MX_ADC1_Init+0x98>)
 8000538:	f000 fe72 	bl	8001220 <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000542:	f000 fb7f 	bl	8000c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000552:	463b      	mov	r3, r7
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	; (8000570 <MX_ADC1_Init+0x98>)
 8000558:	f000 ffd4 	bl	8001504 <HAL_ADC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000562:	f000 fb6f 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	40012000 	.word	0x40012000
 8000578:	0f000001 	.word	0x0f000001

0800057c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <HAL_ADC_MspInit+0x8c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d12f      	bne.n	80005fe <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ac:	6453      	str	r3, [r2, #68]	; 0x44
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_ADC_MspInit+0x90>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005d6:	2301      	movs	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_ADC_MspInit+0x94>)
 80005ea:	f001 fb65 	bl	8001cb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	2012      	movs	r0, #18
 80005f4:	f001 fa89 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80005f8:	2012      	movs	r0, #18
 80005fa:	f001 faa2 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	; 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40012000 	.word	0x40012000
 800060c:	40023800 	.word	0x40023800
 8000610:	40020000 	.word	0x40020000

08000614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_GPIO_Init+0xc8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	4b24      	ldr	r3, [pc, #144]	; (80006dc <MX_GPIO_Init+0xc8>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a23      	ldr	r2, [pc, #140]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_GPIO_Init+0xc8>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_GPIO_Init+0xc8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000684:	4816      	ldr	r0, [pc, #88]	; (80006e0 <MX_GPIO_Init+0xcc>)
 8000686:	f001 fc9b 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4814      	ldr	r0, [pc, #80]	; (80006e4 <MX_GPIO_Init+0xd0>)
 8000692:	f001 fc95 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000696:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	; (80006e0 <MX_GPIO_Init+0xcc>)
 80006b0:	f001 fb02 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_GPIO_Init+0xd0>)
 80006ce:	f001 faf3 	bl	8001cb8 <HAL_GPIO_Init>

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020400 	.word	0x40020400
 80006e4:	40020000 	.word	0x40020000

080006e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f001 fc7f 	bl	8002028 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 fa88 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000074 	.word	0x20000074
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <HAL_I2C_MspInit+0xa4>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d13b      	bne.n	80007de <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000782:	23c0      	movs	r3, #192	; 0xc0
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4814      	ldr	r0, [pc, #80]	; (80007f0 <HAL_I2C_MspInit+0xac>)
 800079e:	f001 fa8b 	bl	8001cb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 80007ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_I2C_MspInit+0xa8>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	201f      	movs	r0, #31
 80007c4:	f001 f9a1 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007c8:	201f      	movs	r0, #31
 80007ca:	f001 f9ba 	bl	8001b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2020      	movs	r0, #32
 80007d4:	f001 f999 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007d8:	2020      	movs	r0, #32
 80007da:	f001 f9b2 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400

080007f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007fa:	f000 fc9f 	bl	800113c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007fe:	f000 f87d 	bl	80008fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000802:	f7ff ff07 	bl	8000614 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000806:	f7ff fe67 	bl	80004d8 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 800080a:	f000 fbf1 	bl	8000ff0 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800080e:	f7ff ff6b 	bl	80006e8 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000812:	f000 fb0f 	bl	8000e34 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000816:	f000 fb59 	bl	8000ecc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <main+0xe4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f06f 0201 	mvn.w	r2, #1
 8000822:	611a      	str	r2, [r3, #16]
	TIM_GET_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <main+0xe8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f06f 0201 	mvn.w	r2, #1
 800082c:	611a      	str	r2, [r3, #16]

	int state = start_uart_receive_data;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		switch (state) {
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b03      	cmp	r3, #3
 8000836:	d8fc      	bhi.n	8000832 <main+0x3e>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <main+0x4c>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	080008b1 	.word	0x080008b1
 8000848:	0800086b 	.word	0x0800086b
 800084c:	080008ab 	.word	0x080008ab

		case start_uart_receive_data:

			HAL_UART_Receive_IT(&huart1, p_uart_inbuf++, 1);
 8000850:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <main+0xec>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	4922      	ldr	r1, [pc, #136]	; (80008e0 <main+0xec>)
 8000858:	600a      	str	r2, [r1, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	4821      	ldr	r0, [pc, #132]	; (80008e4 <main+0xf0>)
 8000860:	f004 fb60 	bl	8004f24 <HAL_UART_Receive_IT>
			state = check_received_data;
 8000864:	2302      	movs	r3, #2
 8000866:	607b      	str	r3, [r7, #4]

			break;
 8000868:	e034      	b.n	80008d4 <main+0xe0>

		case check_received_data:

			if (rx_done_flag) {
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <main+0xf4>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d02d      	beq.n	80008ce <main+0xda>
				rx_done_flag = false;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <main+0xf4>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
				p_uart_inbuf = uart_inbuf;
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <main+0xec>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <main+0xf8>)
 800087c:	601a      	str	r2, [r3, #0]

				if ((Check_Uart_inbuff() == 0) && (uart_inbuf[0] == DEV_ADDR)) {
 800087e:	f000 f89d 	bl	80009bc <Check_Uart_inbuff>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <main+0xa4>
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <main+0xf8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2240      	movs	r2, #64	; 0x40
 800088e:	4293      	cmp	r3, r2
 8000890:	d102      	bne.n	8000898 <main+0xa4>
					state = modbus_functions;
 8000892:	2303      	movs	r3, #3
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e004      	b.n	80008a2 <main+0xae>
				} else {

					HAL_TIM_Base_Stop_IT(&htim3);
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <main+0xe8>)
 800089a:	f003 fee5 	bl	8004668 <HAL_TIM_Base_Stop_IT>
					state = start_uart_receive_data;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
				}
				receive_byte = 0;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <main+0xfc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]

			}

			break;
 80008a8:	e011      	b.n	80008ce <main+0xda>

		case modbus_functions:

			state = start_uart_transmit_data;
 80008aa:	2301      	movs	r3, #1
 80008ac:	607b      	str	r3, [r7, #4]
			break;
 80008ae:	e011      	b.n	80008d4 <main+0xe0>

		case start_uart_transmit_data:

			if (tx_ready_flag == true) {
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <main+0x100>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d00c      	beq.n	80008d2 <main+0xde>
				tx_ready_flag = false;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <main+0x100>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart1, (uint8_t*) "OK", 0x3);
 80008be:	2203      	movs	r2, #3
 80008c0:	490d      	ldr	r1, [pc, #52]	; (80008f8 <main+0x104>)
 80008c2:	4808      	ldr	r0, [pc, #32]	; (80008e4 <main+0xf0>)
 80008c4:	f004 fae9 	bl	8004e9a <HAL_UART_Transmit_IT>
				state = start_uart_receive_data;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]

			}
			break;
 80008cc:	e001      	b.n	80008d2 <main+0xde>
			break;
 80008ce:	bf00      	nop
 80008d0:	e7af      	b.n	8000832 <main+0x3e>
			break;
 80008d2:	bf00      	nop
		switch (state) {
 80008d4:	e7ad      	b.n	8000832 <main+0x3e>
 80008d6:	bf00      	nop
 80008d8:	200001dc 	.word	0x200001dc
 80008dc:	20000224 	.word	0x20000224
 80008e0:	20000000 	.word	0x20000000
 80008e4:	2000026c 	.word	0x2000026c
 80008e8:	200000c8 	.word	0x200000c8
 80008ec:	200000d8 	.word	0x200000d8
 80008f0:	200000d0 	.word	0x200000d0
 80008f4:	200000ca 	.word	0x200000ca
 80008f8:	08005f80 	.word	0x08005f80

080008fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	2230      	movs	r2, #48	; 0x30
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 fb24 	bl	8005f58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <SystemClock_Config+0xb8>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <SystemClock_Config+0xb8>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <SystemClock_Config+0xb8>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800093c:	2300      	movs	r3, #0
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <SystemClock_Config+0xbc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <SystemClock_Config+0xbc>)
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <SystemClock_Config+0xbc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000966:	2300      	movs	r3, #0
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800096a:	f107 0320 	add.w	r3, r7, #32
 800096e:	4618      	mov	r0, r3
 8000970:	f003 f970 	bl	8003c54 <HAL_RCC_OscConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x82>
		Error_Handler();
 800097a:	f000 f963 	bl	8000c44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800097e:	230f      	movs	r3, #15
 8000980:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000982:	2301      	movs	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fbd1 	bl	8004144 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xb0>
		Error_Handler();
 80009a8:	f000 f94c 	bl	8000c44 <Error_Handler>
	}
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	; 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40007000 	.word	0x40007000

080009bc <Check_Uart_inbuff>:
//	HAL_I2C_Mem_Read_IT(&hi2c1, I2C_DEV_ADDR, , MemAddSize, pData, Size);


};

signed char Check_Uart_inbuff(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

	if (receive_byte >= ADU_MAX) {
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <Check_Uart_inbuff+0x7c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	f640 3328 	movw	r3, #2856	; 0xb28
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d302      	bcc.n	80009d4 <Check_Uart_inbuff+0x18>

		return -4;
 80009ce:	f06f 0303 	mvn.w	r3, #3
 80009d2:	e02f      	b.n	8000a34 <Check_Uart_inbuff+0x78>
	}

	if (receive_byte < ADU_MIN) {
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <Check_Uart_inbuff+0x7c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	2305      	movs	r3, #5
 80009dc:	429a      	cmp	r2, r3
 80009de:	d202      	bcs.n	80009e6 <Check_Uart_inbuff+0x2a>

		return -3;
 80009e0:	f06f 0302 	mvn.w	r3, #2
 80009e4:	e026      	b.n	8000a34 <Check_Uart_inbuff+0x78>
	}

	if (FE_Error || OE_Error || PE_Error) {
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <Check_Uart_inbuff+0x80>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d107      	bne.n	80009fe <Check_Uart_inbuff+0x42>
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <Check_Uart_inbuff+0x84>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <Check_Uart_inbuff+0x42>
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <Check_Uart_inbuff+0x88>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00b      	beq.n	8000a16 <Check_Uart_inbuff+0x5a>

		FE_Error = 0;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <Check_Uart_inbuff+0x80>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
		OE_Error = 0;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <Check_Uart_inbuff+0x84>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
		PE_Error = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <Check_Uart_inbuff+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]

		return -2;
 8000a10:	f06f 0301 	mvn.w	r3, #1
 8000a14:	e00e      	b.n	8000a34 <Check_Uart_inbuff+0x78>
	}

	if (crc16in(receive_byte, &unn, uart_inbuf) != 0) {
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <Check_Uart_inbuff+0x7c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <Check_Uart_inbuff+0x8c>)
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <Check_Uart_inbuff+0x90>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f815 	bl	8000a50 <crc16in>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <Check_Uart_inbuff+0x76>

		return -1;
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	e000      	b.n	8000a34 <Check_Uart_inbuff+0x78>
	}

	return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000d0 	.word	0x200000d0
 8000a3c:	200000cb 	.word	0x200000cb
 8000a40:	200000cc 	.word	0x200000cc
 8000a44:	200000cd 	.word	0x200000cd
 8000a48:	200000d8 	.word	0x200000d8
 8000a4c:	200001d8 	.word	0x200001d8

08000a50 <crc16in>:

char crc16in(unsigned char size, union unn_t *unn, unsigned char *inbuf) {
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	73fb      	strb	r3, [r7, #15]
	unsigned short w = 0xffff, w1;
 8000a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a62:	83fb      	strh	r3, [r7, #30]
	char shift_cnt, jj;
	unsigned short ii1 = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	837b      	strh	r3, [r7, #26]
	union {
		char c[2];
		unsigned short w;
	} u;

	size = size - 2;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	3b02      	subs	r3, #2
 8000a6c:	73fb      	strb	r3, [r7, #15]
	u.c[0] = inbuf[size];
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	753b      	strb	r3, [r7, #20]
	u.c[1] = inbuf[size + 1];
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	757b      	strb	r3, [r7, #21]
	jj = size;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	773b      	strb	r3, [r7, #28]

	for (; jj > 0; jj--) {
 8000a88:	e032      	b.n	8000af0 <crc16in+0xa0>
		w1 = (w >> 8) << 8;
 8000a8a:	8bfb      	ldrh	r3, [r7, #30]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	833b      	strh	r3, [r7, #24]
		w = (w1 + ((w - w1) ^ (unsigned short) inbuf[ii1++]));
 8000a94:	8bfa      	ldrh	r2, [r7, #30]
 8000a96:	8b3b      	ldrh	r3, [r7, #24]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	8b7b      	ldrh	r3, [r7, #26]
 8000aa0:	1c59      	adds	r1, r3, #1
 8000aa2:	8379      	strh	r1, [r7, #26]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	440b      	add	r3, r1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4053      	eors	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	8b3b      	ldrh	r3, [r7, #24]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	83fb      	strh	r3, [r7, #30]

		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	777b      	strb	r3, [r7, #29]
 8000abe:	e011      	b.n	8000ae4 <crc16in+0x94>
			if ((w & 0x01) == 1)
 8000ac0:	8bfb      	ldrh	r3, [r7, #30]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <crc16in+0x88>
				w = ((w >> 1) ^ 0xa001);
 8000aca:	8bfb      	ldrh	r3, [r7, #30]
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <crc16in+0xc8>)
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	83fb      	strh	r3, [r7, #30]
 8000ad6:	e002      	b.n	8000ade <crc16in+0x8e>
			else
				w >>= 1;
 8000ad8:	8bfb      	ldrh	r3, [r7, #30]
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	83fb      	strh	r3, [r7, #30]
		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 8000ade:	7f7b      	ldrb	r3, [r7, #29]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	777b      	strb	r3, [r7, #29]
 8000ae4:	7f7b      	ldrb	r3, [r7, #29]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d9ea      	bls.n	8000ac0 <crc16in+0x70>
	for (; jj > 0; jj--) {
 8000aea:	7f3b      	ldrb	r3, [r7, #28]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	773b      	strb	r3, [r7, #28]
 8000af0:	7f3b      	ldrb	r3, [r7, #28]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1c9      	bne.n	8000a8a <crc16in+0x3a>
		}
	}
	unn->w_val = w;
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	8bfa      	ldrh	r2, [r7, #30]
 8000afa:	801a      	strh	r2, [r3, #0]

	if (w == u.w)
 8000afc:	8abb      	ldrh	r3, [r7, #20]
 8000afe:	8bfa      	ldrh	r2, [r7, #30]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d101      	bne.n	8000b08 <crc16in+0xb8>
		return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <crc16in+0xba>
	else
		return (char) -1;
 8000b08:	23ff      	movs	r3, #255	; 0xff
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	ffffa001 	.word	0xffffa001

08000b1c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_UART_TxCpltCallback+0x24>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d102      	bne.n	8000b32 <HAL_UART_TxCpltCallback+0x16>
		tx_done_flag = true;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_UART_TxCpltCallback+0x28>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]

	}
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	2000026c 	.word	0x2000026c
 8000b44:	200000c9 	.word	0x200000c9

08000b48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <HAL_UART_RxCpltCallback+0x74>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d12d      	bne.n	8000bb4 <HAL_UART_RxCpltCallback+0x6c>

		HAL_TIM_Base_Stop_IT(&htim2);
 8000b58:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <HAL_UART_RxCpltCallback+0x78>)
 8000b5a:	f003 fd85 	bl	8004668 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <HAL_UART_RxCpltCallback+0x7c>)
 8000b60:	f003 fd82 	bl	8004668 <HAL_TIM_Base_Stop_IT>

		__HAL_TIM_SetCounter(&htim2,0x0);
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_UART_RxCpltCallback+0x78>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3,0x0);
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_RxCpltCallback+0x7c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Base_Start_IT(&htim2);
 8000b74:	4812      	ldr	r0, [pc, #72]	; (8000bc0 <HAL_UART_RxCpltCallback+0x78>)
 8000b76:	f003 fd15 	bl	80045a4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <HAL_UART_RxCpltCallback+0x7c>)
 8000b7c:	f003 fd12 	bl	80045a4 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8000b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b84:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <HAL_UART_RxCpltCallback+0x80>)
 8000b86:	f001 fa34 	bl	8001ff2 <HAL_GPIO_TogglePin>

		error_code = HAL_UART_GetError(&huart1);
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_UART_RxCpltCallback+0x74>)
 8000b8c:	f004 fd50 	bl	8005630 <HAL_UART_GetError>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_UART_RxCpltCallback+0x84>)
 8000b94:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, p_uart_inbuf++, 1);
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_RxCpltCallback+0x88>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <HAL_UART_RxCpltCallback+0x88>)
 8000b9e:	600a      	str	r2, [r1, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_RxCpltCallback+0x74>)
 8000ba6:	f004 f9bd 	bl	8004f24 <HAL_UART_Receive_IT>
		receive_byte++;
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_UART_RxCpltCallback+0x8c>)
 8000bb2:	6013      	str	r3, [r2, #0]

	}

}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000026c 	.word	0x2000026c
 8000bc0:	200001dc 	.word	0x200001dc
 8000bc4:	20000224 	.word	0x20000224
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	200000d4 	.word	0x200000d4
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	200000d0 	.word	0x200000d0

08000bd8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_UART_ErrorCallback+0x58>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d11d      	bne.n	8000c24 <HAL_UART_ErrorCallback+0x4c>

		if (error_code & UART_FLAG_FE) {
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_UART_ErrorCallback+0x5c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <HAL_UART_ErrorCallback+0x22>

			FE_Error = true;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_UART_ErrorCallback+0x60>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
//		 			 	 HAL_UART_Transmit_IT(&huart1, (uint8_t*) "FE", 0x3);
		}
		if (error_code & UART_FLAG_PE) {
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_UART_ErrorCallback+0x5c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <HAL_UART_ErrorCallback+0x34>

			PE_Error = true;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_UART_ErrorCallback+0x64>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
//		 			 	 HAL_UART_Transmit_IT(&huart1, (uint8_t*) "PE", 0x3);
		}
		if (error_code & UART_FLAG_ORE) {
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_UART_ErrorCallback+0x5c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d002      	beq.n	8000c1e <HAL_UART_ErrorCallback+0x46>

			OE_Error = true;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_UART_ErrorCallback+0x68>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
//		 			    HAL_UART_Transmit_IT(&huart1, (uint8_t*) "OE", 0x3);

		}
		error_code = 0;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_UART_ErrorCallback+0x5c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]

	}
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	2000026c 	.word	0x2000026c
 8000c34:	200000d4 	.word	0x200000d4
 8000c38:	200000cb 	.word	0x200000cb
 8000c3c:	200000cd 	.word	0x200000cd
 8000c40:	200000cc 	.word	0x200000cc

08000c44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_I2C_MemTxCpltCallback>:
  SSD1306_state = SSD1306_BUSY;
}


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  SSD1306_state = SSD1306_READY;
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200001da 	.word	0x200001da

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000d0c:	f000 fa68 	bl	80011e0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ADC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles ADC1 global interrupt.
 */
void ADC_IRQHandler(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC_IRQn 0 */

	/* USER CODE END ADC_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <ADC_IRQHandler+0x10>)
 8000d1a:	f000 fac4 	bl	80012a6 <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC_IRQn 1 */

	/* USER CODE END ADC_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000002c 	.word	0x2000002c

08000d28 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	if (TIM_GET_ITSTATUS(&htim2,TIM_IT_UPDATE )) {
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <TIM2_IRQHandler+0x4c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d116      	bne.n	8000d68 <TIM2_IRQHandler+0x40>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <TIM2_IRQHandler+0x50>)
 8000d40:	f001 f957 	bl	8001ff2 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <TIM2_IRQHandler+0x4c>)
 8000d46:	f003 fc8f 	bl	8004668 <HAL_TIM_Base_Stop_IT>
		TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <TIM2_IRQHandler+0x4c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f06f 0201 	mvn.w	r2, #1
 8000d52:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SetCounter(&htim2,0x0);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <TIM2_IRQHandler+0x4c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_UART_AbortReceive_IT(&huart1);
 8000d5c:	4807      	ldr	r0, [pc, #28]	; (8000d7c <TIM2_IRQHandler+0x54>)
 8000d5e:	f004 f911 	bl	8004f84 <HAL_UART_AbortReceive_IT>
		rx_done_flag = 1;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <TIM2_IRQHandler+0x58>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]

	}

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM2_IRQHandler+0x4c>)
 8000d6a:	f003 fcac 	bl	80046c6 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
	/* USER CODE END TIM2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200001dc 	.word	0x200001dc
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	2000026c 	.word	0x2000026c
 8000d80:	200000c8 	.word	0x200000c8

08000d84 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	if (TIM_GET_ITSTATUS(&htim3,TIM_IT_UPDATE )) {
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <TIM3_IRQHandler+0x44>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d113      	bne.n	8000dbe <TIM3_IRQHandler+0x3a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8000d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <TIM3_IRQHandler+0x48>)
 8000d9c:	f001 f929 	bl	8001ff2 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Stop_IT(&htim3);
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <TIM3_IRQHandler+0x44>)
 8000da2:	f003 fc61 	bl	8004668 <HAL_TIM_Base_Stop_IT>
		TIM_GET_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <TIM3_IRQHandler+0x44>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f06f 0201 	mvn.w	r2, #1
 8000dae:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SetCounter(&htim3,0x0);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <TIM3_IRQHandler+0x44>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
		tx_ready_flag = true;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <TIM3_IRQHandler+0x4c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]

	}
	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8000dbe:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM3_IRQHandler+0x44>)
 8000dc0:	f003 fc81 	bl	80046c6 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000224 	.word	0x20000224
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	200000ca 	.word	0x200000ca

08000dd4 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <I2C1_EV_IRQHandler+0x10>)
 8000dda:	f001 fa69 	bl	80022b0 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000074 	.word	0x20000074

08000de8 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_ER_IRQn 0 */

	/* USER CODE END I2C1_ER_IRQn 0 */
	HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <I2C1_ER_IRQHandler+0x10>)
 8000dee:	f001 fbd0 	bl	8002592 <HAL_I2C_ER_IRQHandler>
	/* USER CODE BEGIN I2C1_ER_IRQn 1 */

	/* USER CODE END I2C1_ER_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000074 	.word	0x20000074

08000dfc <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART1_IRQHandler+0x10>)
 8000e02:	f004 f971 	bl	80050e8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000026c 	.word	0x2000026c

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0308 	add.w	r3, r7, #8
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e5a:	2218      	movs	r2, #24
 8000e5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 750;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e66:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e7a:	f003 fb43 	bl	8004504 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e84:	f7ff fede 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000e96:	f003 fd1e 	bl	80048d6 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f7ff fed0 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM2_Init+0x94>)
 8000eb2:	f003 ff23 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f7ff fec2 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001dc 	.word	0x200001dc

08000ecc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <MX_TIM3_Init+0x98>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000ef0:	2218      	movs	r2, #24
 8000ef2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1750;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000efc:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8000f00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f0e:	4814      	ldr	r0, [pc, #80]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000f10:	f003 faf8 	bl	8004504 <HAL_TIM_Base_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f7ff fe93 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000f2c:	f003 fcd3 	bl	80048d6 <HAL_TIM_ConfigClockSource>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f7ff fe85 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MX_TIM3_Init+0x94>)
 8000f48:	f003 fed8 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f52:	f7ff fe77 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000224 	.word	0x20000224
 8000f64:	40000400 	.word	0x40000400

08000f68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d116      	bne.n	8000fa8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 fdb5 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 fdce 	bl	8001b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fa6:	e01a      	b.n	8000fde <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_Base_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d115      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x80>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201d      	movs	r0, #29
 8000fd4:	f000 fd99 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fd8:	201d      	movs	r0, #29
 8000fda:	f000 fdb2 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40000400 	.word	0x40000400

08000ff0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <MX_USART1_UART_Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8000ffc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8001004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001008:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <MX_USART1_UART_Init+0x50>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8001012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART1_UART_Init+0x50>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART1_UART_Init+0x50>)
 800102c:	f003 fee8 	bl	8004e00 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001036:	f7ff fe05 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000026c 	.word	0x2000026c
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <HAL_UART_MspInit+0x94>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d134      	bne.n	80010d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <HAL_UART_MspInit+0x98>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <HAL_UART_MspInit+0x98>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_UART_MspInit+0x98>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b4:	2307      	movs	r3, #7
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_UART_MspInit+0x9c>)
 80010c0:	f000 fdfa 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2025      	movs	r0, #37	; 0x25
 80010ca:	f000 fd1e 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010ce:	2025      	movs	r0, #37	; 0x25
 80010d0:	f000 fd37 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001112:	f7ff fe7d 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f004 fefb 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fb6b 	bl	80007f4 <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001120:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800112c:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 8001130:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001134:	200002b4 	.word	0x200002b4

08001138 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <DMA1_Stream0_IRQHandler>
	...

0800113c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <HAL_Init+0x40>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <HAL_Init+0x40>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x40>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 fcc5 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f808 	bl	8001180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff fd7e 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023c00 	.word	0x40023c00

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_InitTick+0x54>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x58>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001196:	fbb3 f3f1 	udiv	r3, r3, r1
 800119a:	fbb2 f3f3 	udiv	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fcdd 	bl	8001b5e <HAL_SYSTICK_Config>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00e      	b.n	80011cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b0f      	cmp	r3, #15
 80011b2:	d80a      	bhi.n	80011ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f000 fca5 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_InitTick+0x5c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000004 	.word	0x20000004
 80011d8:	2000000c 	.word	0x2000000c
 80011dc:	20000008 	.word	0x20000008

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c
 8001204:	200002b0 	.word	0x200002b0

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200002b0 	.word	0x200002b0

08001220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e033      	b.n	800129e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff f99c 	bl	800057c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b00      	cmp	r3, #0
 800125c:	d118      	bne.n	8001290 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001266:	f023 0302 	bic.w	r3, r3, #2
 800126a:	f043 0202 	orr.w	r2, r3, #2
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fa68 	bl	8001748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f023 0303 	bic.w	r3, r3, #3
 8001286:	f043 0201 	orr.w	r2, r3, #1
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
 800128e:	e001      	b.n	8001294 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d049      	beq.n	8001370 <HAL_ADC_IRQHandler+0xca>
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d046      	beq.n	8001370 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d105      	bne.n	80012fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d12b      	bne.n	8001360 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130c:	2b00      	cmp	r3, #0
 800130e:	d127      	bne.n	8001360 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001328:	2b00      	cmp	r3, #0
 800132a:	d119      	bne.n	8001360 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0220 	bic.w	r2, r2, #32
 800133a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f8b0 	bl	80014c6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0212 	mvn.w	r2, #18
 800136e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d057      	beq.n	8001436 <HAL_ADC_IRQHandler+0x190>
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d054      	beq.n	8001436 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d139      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d12b      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d124      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11d      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d119      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fa8a 	bl	8001940 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f06f 020c 	mvn.w	r2, #12
 8001434:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001444:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d017      	beq.n	800147c <HAL_ADC_IRQHandler+0x1d6>
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d014      	beq.n	800147c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d10d      	bne.n	800147c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f834 	bl	80014da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f06f 0201 	mvn.w	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0320 	and.w	r3, r3, #32
 8001482:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800148a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_ADC_IRQHandler+0x218>
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f043 0202 	orr.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0220 	mvn.w	r2, #32
 80014ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f81d 	bl	80014ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f06f 0220 	mvn.w	r2, #32
 80014bc:	601a      	str	r2, [r3, #0]
  }
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e105      	b.n	800172c <HAL_ADC_ConfigChannel+0x228>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d925      	bls.n	800157c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4403      	add	r3, r0
 800156e:	3b1e      	subs	r3, #30
 8001570:	409a      	lsls	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	e022      	b.n	80015c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	2207      	movs	r2, #7
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4403      	add	r3, r0
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d824      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	221f      	movs	r2, #31
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	e04c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	d824      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	; 0x23
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b23      	subs	r3, #35	; 0x23
 8001658:	fa00 f203 	lsl.w	r2, r0, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	e023      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	; 0x41
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <HAL_ADC_ConfigChannel+0x234>)
 80016b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d123      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1e6>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d11b      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d111      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_ADC_ConfigChannel+0x23c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_ADC_ConfigChannel+0x240>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9a      	lsrs	r2, r3, #18
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40012300 	.word	0x40012300
 800173c:	40012000 	.word	0x40012000
 8001740:	20000004 	.word	0x20000004
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <ADC_Init+0x1f0>)
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	021a      	lsls	r2, r3, #8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <ADC_Init+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6899      	ldr	r1, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e00f      	b.n	8001846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0202 	bic.w	r2, r2, #2
 8001854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e1b      	ldrb	r3, [r3, #24]
 8001860:	005a      	lsls	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001882:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	035a      	lsls	r2, r3, #13
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e007      	b.n	80018bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	051a      	lsls	r2, r3, #20
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018fe:	025a      	lsls	r2, r3, #9
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	029a      	lsls	r2, r3, #10
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40012300 	.word	0x40012300
 800193c:	0f000001 	.word	0x0f000001

08001940 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff29 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff3e 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff31 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff fb40 	bl	8001208 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d008      	beq.n	8001ba8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e052      	b.n	8001c4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0216 	bic.w	r2, r2, #22
 8001bb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <HAL_DMA_Abort+0x62>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0208 	bic.w	r2, r2, #8
 8001be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf8:	e013      	b.n	8001c22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff fb05 	bl	8001208 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d90c      	bls.n	8001c22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e015      	b.n	8001c4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e4      	bne.n	8001bfa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	223f      	movs	r2, #63	; 0x3f
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e00c      	b.n	8001c8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2205      	movs	r2, #5
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca8:	b2db      	uxtb	r3, r3
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e159      	b.n	8001f88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8148 	bne.w	8001f82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a2 	beq.w	8001f82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0x202>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2f4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0x1fe>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a47      	ldr	r2, [pc, #284]	; (8001fb0 <HAL_GPIO_Init+0x2f8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a46      	ldr	r2, [pc, #280]	; (8001fb4 <HAL_GPIO_Init+0x2fc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x1f6>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <HAL_GPIO_Init+0x300>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_GPIO_Init+0x1f2>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x204>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	; (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_GPIO_Init+0x304>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f aea2 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40013c00 	.word	0x40013c00

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43d9      	mvns	r1, r3
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	400b      	ands	r3, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e12b      	b.n	8002292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe fb78 	bl	8000744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800208c:	f002 fa12 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a81      	ldr	r2, [pc, #516]	; (800229c <HAL_I2C_Init+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d807      	bhi.n	80020ac <HAL_I2C_Init+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_I2C_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x92>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a7d      	ldr	r2, [pc, #500]	; (80022a4 <HAL_I2C_Init+0x27c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e7      	b.n	8002292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <HAL_I2C_Init+0x280>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_I2C_Init+0x274>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <HAL_I2C_Init+0xd4>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	e009      	b.n	8002110 <HAL_I2C_Init+0xe8>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_I2C_Init+0x284>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	495c      	ldr	r1, [pc, #368]	; (800229c <HAL_I2C_Init+0x274>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d819      	bhi.n	8002164 <HAL_I2C_Init+0x13c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fbb1 f3f3 	udiv	r3, r1, r3
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002144:	400b      	ands	r3, r1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_I2C_Init+0x138>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e59      	subs	r1, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fbb1 f3f3 	udiv	r3, r1, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	e051      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002160:	2304      	movs	r3, #4
 8002162:	e04f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_I2C_Init+0x168>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Init+0x18e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Init+0x196>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e022      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <HAL_I2C_Init+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e58      	subs	r0, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e2:	e00f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6911      	ldr	r1, [r2, #16]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	000186a0 	.word	0x000186a0
 80022a0:	001e847f 	.word	0x001e847f
 80022a4:	003d08ff 	.word	0x003d08ff
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d003      	beq.n	80022e8 <HAL_I2C_EV_IRQHandler+0x38>
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b40      	cmp	r3, #64	; 0x40
 80022e4:	f040 80c1 	bne.w	800246a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_I2C_EV_IRQHandler+0x6e>
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002308:	d003      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x62>
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002310:	d101      	bne.n	8002316 <HAL_I2C_EV_IRQHandler+0x66>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x68>
 8002316:	2300      	movs	r3, #0
 8002318:	2b01      	cmp	r3, #1
 800231a:	f000 8132 	beq.w	8002582 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0x92>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f001 fc71 	bl	8003c1c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fd79 	bl	8002e32 <I2C_Master_SB>
 8002340:	e092      	b.n	8002468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d009      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0xb2>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	0a5b      	lsrs	r3, r3, #9
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fdef 	bl	8002f3e <I2C_Master_ADD10>
 8002360:	e082      	b.n	8002468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_I2C_EV_IRQHandler+0xd2>
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	0a5b      	lsrs	r3, r3, #9
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fe09 	bl	8002f92 <I2C_Master_ADDR>
 8002380:	e072      	b.n	8002468 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03b      	beq.n	8002406 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800239c:	f000 80f3 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	09db      	lsrs	r3, r3, #7
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00f      	beq.n	80023cc <HAL_I2C_EV_IRQHandler+0x11c>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d009      	beq.n	80023cc <HAL_I2C_EV_IRQHandler+0x11c>
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f9e9 	bl	800279c <I2C_MasterTransmit_TXE>
 80023ca:	e04d      	b.n	8002468 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80d6 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80cf 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	2b21      	cmp	r3, #33	; 0x21
 80023ec:	d103      	bne.n	80023f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa70 	bl	80028d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023f4:	e0c7      	b.n	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	f040 80c4 	bne.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fade 	bl	80029c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002404:	e0bf      	b.n	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002414:	f000 80b7 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	099b      	lsrs	r3, r3, #6
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00f      	beq.n	8002444 <HAL_I2C_EV_IRQHandler+0x194>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_I2C_EV_IRQHandler+0x194>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d103      	bne.n	8002444 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fb53 	bl	8002ae8 <I2C_MasterReceive_RXNE>
 8002442:	e011      	b.n	8002468 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 809a 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	0a5b      	lsrs	r3, r3, #9
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8093 	beq.w	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fbfc 	bl	8002c5e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002466:	e08e      	b.n	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002468:	e08d      	b.n	8002586 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e007      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d012      	beq.n	80024be <HAL_I2C_EV_IRQHandler+0x20e>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	0a5b      	lsrs	r3, r3, #9
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00c      	beq.n	80024be <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 ffba 	bl	8003430 <I2C_Slave_ADDR>
 80024bc:	e066      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x22e>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	0a5b      	lsrs	r3, r3, #9
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fff4 	bl	80034c4 <I2C_Slave_STOPF>
 80024dc:	e056      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80024de:	7bbb      	ldrb	r3, [r7, #14]
 80024e0:	2b21      	cmp	r3, #33	; 0x21
 80024e2:	d002      	beq.n	80024ea <HAL_I2C_EV_IRQHandler+0x23a>
 80024e4:	7bbb      	ldrb	r3, [r7, #14]
 80024e6:	2b29      	cmp	r3, #41	; 0x29
 80024e8:	d125      	bne.n	8002536 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	09db      	lsrs	r3, r3, #7
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00f      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0x266>
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	0a9b      	lsrs	r3, r3, #10
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0x266>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fed0 	bl	80032b4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002514:	e039      	b.n	800258a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d033      	beq.n	800258a <HAL_I2C_EV_IRQHandler+0x2da>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	0a5b      	lsrs	r3, r3, #9
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02d      	beq.n	800258a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fefd 	bl	800332e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002534:	e029      	b.n	800258a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00f      	beq.n	8002562 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	0a9b      	lsrs	r3, r3, #10
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_I2C_EV_IRQHandler+0x2b2>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 ff08 	bl	8003370 <I2C_SlaveReceive_RXNE>
 8002560:	e014      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00e      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	0a5b      	lsrs	r3, r3, #9
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ff36 	bl	80033ec <I2C_SlaveReceive_BTF>
 8002580:	e004      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002582:	bf00      	nop
 8002584:	e002      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800258a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025b4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00e      	beq.n	80025e0 <HAL_I2C_ER_IRQHandler+0x4e>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d008      	beq.n	80025e0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025de:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x78>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002608:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	0a9b      	lsrs	r3, r3, #10
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03f      	beq.n	8002696 <HAL_I2C_ER_IRQHandler+0x104>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d039      	beq.n	8002696 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002622:	7efb      	ldrb	r3, [r7, #27]
 8002624:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800263c:	7ebb      	ldrb	r3, [r7, #26]
 800263e:	2b20      	cmp	r3, #32
 8002640:	d112      	bne.n	8002668 <HAL_I2C_ER_IRQHandler+0xd6>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <HAL_I2C_ER_IRQHandler+0xd6>
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	2b21      	cmp	r3, #33	; 0x21
 800264c:	d008      	beq.n	8002660 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b29      	cmp	r3, #41	; 0x29
 8002652:	d005      	beq.n	8002660 <HAL_I2C_ER_IRQHandler+0xce>
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b28      	cmp	r3, #40	; 0x28
 8002658:	d106      	bne.n	8002668 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b21      	cmp	r3, #33	; 0x21
 800265e:	d103      	bne.n	8002668 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f001 f85f 	bl	8003724 <I2C_Slave_AF>
 8002666:	e016      	b.n	8002696 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002670:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800267a:	7efb      	ldrb	r3, [r7, #27]
 800267c:	2b10      	cmp	r3, #16
 800267e:	d002      	beq.n	8002686 <HAL_I2C_ER_IRQHandler+0xf4>
 8002680:	7efb      	ldrb	r3, [r7, #27]
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d107      	bne.n	8002696 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002694:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	0adb      	lsrs	r3, r3, #11
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00e      	beq.n	80026c0 <HAL_I2C_ER_IRQHandler+0x12e>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80026be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f001 f896 	bl	8003804 <I2C_ITError>
  }
}
 80026d8:	bf00      	nop
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
 800273c:	4613      	mov	r3, r2
 800273e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d150      	bne.n	8002864 <I2C_MasterTransmit_TXE+0xc8>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b21      	cmp	r3, #33	; 0x21
 80027c6:	d14d      	bne.n	8002864 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d01d      	beq.n	800280a <I2C_MasterTransmit_TXE+0x6e>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d01a      	beq.n	800280a <I2C_MasterTransmit_TXE+0x6e>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027da:	d016      	beq.n	800280a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2211      	movs	r2, #17
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff6c 	bl	80026e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002808:	e060      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002818:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002828:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d107      	bne.n	8002854 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7fe f9ff 	bl	8000c50 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002852:	e03b      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff3f 	bl	80026e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002862:	e033      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b21      	cmp	r3, #33	; 0x21
 8002868:	d005      	beq.n	8002876 <I2C_MasterTransmit_TXE+0xda>
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d12d      	bne.n	80028cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b22      	cmp	r3, #34	; 0x22
 8002874:	d12a      	bne.n	80028cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d108      	bne.n	8002892 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002890:	e01c      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d103      	bne.n	80028a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f88e 	bl	80029c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80028a4:	e012      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80028ca:	e7ff      	b.n	80028cc <I2C_MasterTransmit_TXE+0x130>
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b21      	cmp	r3, #33	; 0x21
 80028ec:	d164      	bne.n	80029b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800291c:	e04c      	b.n	80029b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d01d      	beq.n	8002960 <I2C_MasterTransmit_BTF+0x8c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b20      	cmp	r3, #32
 8002928:	d01a      	beq.n	8002960 <I2C_MasterTransmit_BTF+0x8c>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002930:	d016      	beq.n	8002960 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002940:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2211      	movs	r2, #17
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fec1 	bl	80026e0 <HAL_I2C_MasterTxCpltCallback>
}
 800295e:	e02b      	b.n	80029b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800296e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d107      	bne.n	80029aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe f954 	bl	8000c50 <HAL_I2C_MemTxCpltCallback>
}
 80029a8:	e006      	b.n	80029b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fe94 	bl	80026e0 <HAL_I2C_MasterTxCpltCallback>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d11d      	bne.n	8002a14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10b      	bne.n	80029f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	1c9a      	adds	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80029f6:	e073      	b.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	121b      	asrs	r3, r3, #8
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a12:	e065      	b.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10b      	bne.n	8002a34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a32:	e055      	b.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d151      	bne.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b22      	cmp	r3, #34	; 0x22
 8002a40:	d10d      	bne.n	8002a5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a5c:	e040      	b.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b21      	cmp	r3, #33	; 0x21
 8002a6c:	d112      	bne.n	8002a94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a92:	e025      	b.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d120      	bne.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b21      	cmp	r3, #33	; 0x21
 8002aa2:	d11d      	bne.n	8002ae0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ab2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f8b8 	bl	8000c50 <HAL_I2C_MemTxCpltCallback>
}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b22      	cmp	r3, #34	; 0x22
 8002afa:	f040 80ac 	bne.w	8002c56 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d921      	bls.n	8002b50 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	f040 808c 	bne.w	8002c56 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002b4e:	e082      	b.n	8002c56 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d075      	beq.n	8002c44 <I2C_MasterReceive_RXNE+0x15c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <I2C_MasterReceive_RXNE+0x7c>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d16f      	bne.n	8002c44 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 f827 	bl	8003bb8 <I2C_WaitOnSTOPRequestThroughIT>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d142      	bne.n	8002bf6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b8e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d10a      	bne.n	8002be0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fdc1 	bl	8002760 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bde:	e03a      	b.n	8002c56 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2212      	movs	r2, #18
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fd80 	bl	80026f4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bf4:	e02f      	b.n	8002c56 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fd99 	bl	8002774 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c42:	e008      	b.n	8002c56 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	605a      	str	r2, [r3, #4]
}
 8002c54:	e7ff      	b.n	8002c56 <I2C_MasterReceive_RXNE+0x16e>
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d11b      	bne.n	8002cae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c84:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002cac:	e0bd      	b.n	8002e2a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d129      	bne.n	8002d0c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00a      	beq.n	8002ce4 <I2C_MasterReceive_BTF+0x86>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d007      	beq.n	8002ce4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d0a:	e08e      	b.n	8002e2a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d176      	bne.n	8002e04 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d002      	beq.n	8002d22 <I2C_MasterReceive_BTF+0xc4>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e019      	b.n	8002d68 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d002      	beq.n	8002d40 <I2C_MasterReceive_BTF+0xe2>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d108      	bne.n	8002d52 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e00a      	b.n	8002d68 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d007      	beq.n	8002d68 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002dc2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d10a      	bne.n	8002dee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fcba 	bl	8002760 <HAL_I2C_MemRxCpltCallback>
}
 8002dec:	e01d      	b.n	8002e2a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2212      	movs	r2, #18
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fc79 	bl	80026f4 <HAL_I2C_MasterRxCpltCallback>
}
 8002e02:	e012      	b.n	8002e2a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d117      	bne.n	8002e76 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e5e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e60:	e067      	b.n	8002f32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
}
 8002e74:	e05d      	b.n	8002f32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7e:	d133      	bne.n	8002ee8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b21      	cmp	r3, #33	; 0x21
 8002e8a:	d109      	bne.n	8002ea0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	e008      	b.n	8002eb2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <I2C_Master_SB+0x92>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d108      	bne.n	8002ed6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d032      	beq.n	8002f32 <I2C_Master_SB+0x100>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02d      	beq.n	8002f32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee4:	605a      	str	r2, [r3, #4]
}
 8002ee6:	e024      	b.n	8002f32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10e      	bne.n	8002f0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	11db      	asrs	r3, r3, #7
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 0306 	and.w	r3, r3, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f063 030f 	orn	r3, r3, #15
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]
}
 8002f0c:	e011      	b.n	8002f32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10d      	bne.n	8002f32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	11db      	asrs	r3, r3, #7
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0306 	and.w	r3, r3, #6
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f063 030e 	orn	r3, r3, #14
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	611a      	str	r2, [r3, #16]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <I2C_Master_ADD10+0x26>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <I2C_Master_ADD10+0x48>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f84:	605a      	str	r2, [r3, #4]
  }
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b091      	sub	sp, #68	; 0x44
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b22      	cmp	r3, #34	; 0x22
 8002fba:	f040 8169 	bne.w	8003290 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <I2C_Master_ADDR+0x54>
 8002fc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002fca:	2b40      	cmp	r3, #64	; 0x40
 8002fcc:	d10b      	bne.n	8002fe6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	e160      	b.n	80032a8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d11d      	bne.n	800302a <I2C_Master_ADDR+0x98>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ff6:	d118      	bne.n	800302a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	651a      	str	r2, [r3, #80]	; 0x50
 8003028:	e13e      	b.n	80032a8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d113      	bne.n	800305c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	e115      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 808a 	bne.w	800317c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800306e:	d137      	bne.n	80030e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308e:	d113      	bne.n	80030b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	e0e7      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	623b      	str	r3, [r7, #32]
 80030cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e0d3      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d02e      	beq.n	8003144 <I2C_Master_ADDR+0x1b2>
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d02b      	beq.n	8003144 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	2b12      	cmp	r3, #18
 80030f0:	d102      	bne.n	80030f8 <I2C_Master_ADDR+0x166>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d125      	bne.n	8003144 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00e      	beq.n	800311c <I2C_Master_ADDR+0x18a>
 80030fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003100:	2b02      	cmp	r3, #2
 8003102:	d00b      	beq.n	800311c <I2C_Master_ADDR+0x18a>
 8003104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003106:	2b10      	cmp	r3, #16
 8003108:	d008      	beq.n	800311c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800312a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	e0a1      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003152:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	61bb      	str	r3, [r7, #24]
 8003168:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e085      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d14d      	bne.n	8003222 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	2b04      	cmp	r3, #4
 800318a:	d016      	beq.n	80031ba <I2C_Master_ADDR+0x228>
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	2b02      	cmp	r3, #2
 8003190:	d013      	beq.n	80031ba <I2C_Master_ADDR+0x228>
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b10      	cmp	r3, #16
 8003196:	d010      	beq.n	80031ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e007      	b.n	80031ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	d117      	bne.n	800320a <I2C_Master_ADDR+0x278>
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e0:	d00b      	beq.n	80031fa <I2C_Master_ADDR+0x268>
 80031e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d008      	beq.n	80031fa <I2C_Master_ADDR+0x268>
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d005      	beq.n	80031fa <I2C_Master_ADDR+0x268>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d002      	beq.n	80031fa <I2C_Master_ADDR+0x268>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d107      	bne.n	800320a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003208:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	e032      	b.n	8003288 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003230:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003240:	d117      	bne.n	8003272 <I2C_Master_ADDR+0x2e0>
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003248:	d00b      	beq.n	8003262 <I2C_Master_ADDR+0x2d0>
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	2b01      	cmp	r3, #1
 800324e:	d008      	beq.n	8003262 <I2C_Master_ADDR+0x2d0>
 8003250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003252:	2b08      	cmp	r3, #8
 8003254:	d005      	beq.n	8003262 <I2C_Master_ADDR+0x2d0>
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	2b10      	cmp	r3, #16
 800325a:	d002      	beq.n	8003262 <I2C_Master_ADDR+0x2d0>
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	2b20      	cmp	r3, #32
 8003260:	d107      	bne.n	8003272 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003270:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800328e:	e00b      	b.n	80032a8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
}
 80032a6:	e7ff      	b.n	80032a8 <I2C_Master_ADDR+0x316>
 80032a8:	bf00      	nop
 80032aa:	3744      	adds	r7, #68	; 0x44
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02b      	beq.n	8003326 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d114      	bne.n	8003326 <I2C_SlaveTransmit_TXE+0x72>
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b29      	cmp	r3, #41	; 0x29
 8003300:	d111      	bne.n	8003326 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003310:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2228      	movs	r2, #40	; 0x28
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f9f1 	bl	8002708 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d011      	beq.n	8003364 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d02c      	beq.n	80033e4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d114      	bne.n	80033e4 <I2C_SlaveReceive_RXNE+0x74>
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	2b2a      	cmp	r3, #42	; 0x2a
 80033be:	d111      	bne.n	80033e4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2222      	movs	r2, #34	; 0x22
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2228      	movs	r2, #40	; 0x28
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff f99c 	bl	800271c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d012      	beq.n	8003424 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800344a:	2b28      	cmp	r3, #40	; 0x28
 800344c:	d127      	bne.n	800349e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	09db      	lsrs	r3, r3, #7
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	81bb      	strh	r3, [r7, #12]
 8003480:	e002      	b.n	8003488 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003490:	89ba      	ldrh	r2, [r7, #12]
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff f94a 	bl	8002730 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800349c:	e00e      	b.n	80034bc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80034e4:	2300      	movs	r3, #0
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003510:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003520:	d172      	bne.n	8003608 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b22      	cmp	r3, #34	; 0x22
 8003526:	d002      	beq.n	800352e <I2C_Slave_STOPF+0x6a>
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b2a      	cmp	r3, #42	; 0x2a
 800352c:	d135      	bne.n	800359a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	b29a      	uxth	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fb97 	bl	8001c9a <HAL_DMA_GetState>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d049      	beq.n	8003606 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	4a69      	ldr	r2, [pc, #420]	; (800371c <I2C_Slave_STOPF+0x258>)
 8003578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fb69 	bl	8001c56 <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d03d      	beq.n	8003606 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003598:	e035      	b.n	8003606 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fb61 	bl	8001c9a <HAL_DMA_GetState>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d014      	beq.n	8003608 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	4a4e      	ldr	r2, [pc, #312]	; (800371c <I2C_Slave_STOPF+0x258>)
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fb33 	bl	8001c56 <HAL_DMA_Abort_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003600:	4610      	mov	r0, r2
 8003602:	4798      	blx	r3
 8003604:	e000      	b.n	8003608 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003606:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03e      	beq.n	8003690 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b04      	cmp	r3, #4
 800361e:	d112      	bne.n	8003646 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d112      	bne.n	800367a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0204 	orr.w	r2, r3, #4
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8b3 	bl	8003804 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800369e:	e039      	b.n	8003714 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b2a      	cmp	r3, #42	; 0x2a
 80036a4:	d109      	bne.n	80036ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2228      	movs	r2, #40	; 0x28
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff f831 	bl	800271c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b28      	cmp	r3, #40	; 0x28
 80036c4:	d111      	bne.n	80036ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <I2C_Slave_STOPF+0x25c>)
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff f832 	bl	800274c <HAL_I2C_ListenCpltCallback>
}
 80036e8:	e014      	b.n	8003714 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	2b22      	cmp	r3, #34	; 0x22
 80036f0:	d002      	beq.n	80036f8 <I2C_Slave_STOPF+0x234>
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b22      	cmp	r3, #34	; 0x22
 80036f6:	d10d      	bne.n	8003714 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff f804 	bl	800271c <HAL_I2C_SlaveRxCpltCallback>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08003a69 	.word	0x08003a69
 8003720:	ffff0000 	.word	0xffff0000

08003724 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d002      	beq.n	8003746 <I2C_Slave_AF+0x22>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b20      	cmp	r3, #32
 8003744:	d129      	bne.n	800379a <I2C_Slave_AF+0x76>
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b28      	cmp	r3, #40	; 0x28
 800374a:	d126      	bne.n	800379a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a2c      	ldr	r2, [pc, #176]	; (8003800 <I2C_Slave_AF+0xdc>)
 8003750:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003760:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe ffda 	bl	800274c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003798:	e02e      	b.n	80037f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b21      	cmp	r3, #33	; 0x21
 800379e:	d126      	bne.n	80037ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <I2C_Slave_AF+0xdc>)
 80037a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2221      	movs	r2, #33	; 0x21
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe ff8e 	bl	8002708 <HAL_I2C_SlaveTxCpltCallback>
}
 80037ec:	e004      	b.n	80037f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f6:	615a      	str	r2, [r3, #20]
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	ffff0000 	.word	0xffff0000

08003804 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d002      	beq.n	8003828 <I2C_ITError+0x24>
 8003822:	7bbb      	ldrb	r3, [r7, #14]
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d10a      	bne.n	800383e <I2C_ITError+0x3a>
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b22      	cmp	r3, #34	; 0x22
 800382c:	d107      	bne.n	800383e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003844:	2b28      	cmp	r3, #40	; 0x28
 8003846:	d107      	bne.n	8003858 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2228      	movs	r2, #40	; 0x28
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003856:	e015      	b.n	8003884 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003866:	d00a      	beq.n	800387e <I2C_ITError+0x7a>
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b60      	cmp	r3, #96	; 0x60
 800386c:	d007      	beq.n	800387e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800388e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003892:	d162      	bne.n	800395a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d020      	beq.n	80038f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <I2C_ITError+0x25c>)
 80038b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f9c9 	bl	8001c56 <HAL_DMA_Abort_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8089 	beq.w	80039de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038ee:	4610      	mov	r0, r2
 80038f0:	4798      	blx	r3
 80038f2:	e074      	b.n	80039de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	4a59      	ldr	r2, [pc, #356]	; (8003a60 <I2C_ITError+0x25c>)
 80038fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe f9a8 	bl	8001c56 <HAL_DMA_Abort_IT>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d068      	beq.n	80039de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d10b      	bne.n	8003932 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
 8003958:	e041      	b.n	80039de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b60      	cmp	r3, #96	; 0x60
 8003964:	d125      	bne.n	80039b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d10b      	bne.n	800399a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe feec 	bl	8002788 <HAL_I2C_AbortCpltCallback>
 80039b0:	e015      	b.n	80039de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d10b      	bne.n	80039d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fe fecb 	bl	8002774 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a22:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d113      	bne.n	8003a58 <I2C_ITError+0x254>
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b28      	cmp	r3, #40	; 0x28
 8003a34:	d110      	bne.n	8003a58 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <I2C_ITError+0x260>)
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fe7a 	bl	800274c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	08003a69 	.word	0x08003a69
 8003a64:	ffff0000 	.word	0xffff0000

08003a68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a82:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <I2C_DMAAbort+0x148>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	08db      	lsrs	r3, r3, #3
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <I2C_DMAAbort+0x14c>)
 8003a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8e:	0a1a      	lsrs	r2, r3, #8
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00da      	lsls	r2, r3, #3
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f043 0220 	orr.w	r2, r3, #32
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003aae:	e00a      	b.n	8003ac6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac4:	d0ea      	beq.n	8003a9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	2200      	movs	r2, #0
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2200      	movs	r2, #0
 8003b1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b60      	cmp	r3, #96	; 0x60
 8003b36:	d10e      	bne.n	8003b56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7fe fe1a 	bl	8002788 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b54:	e027      	b.n	8003ba6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b56:	7cfb      	ldrb	r3, [r7, #19]
 8003b58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b5c:	2b28      	cmp	r3, #40	; 0x28
 8003b5e:	d117      	bne.n	8003b90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2228      	movs	r2, #40	; 0x28
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b8e:	e007      	b.n	8003ba0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003ba0:	6978      	ldr	r0, [r7, #20]
 8003ba2:	f7fe fde7 	bl	8002774 <HAL_I2C_ErrorCallback>
}
 8003ba6:	bf00      	nop
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	14f8b589 	.word	0x14f8b589

08003bb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	0a1a      	lsrs	r2, r3, #8
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d107      	bne.n	8003bf6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e008      	b.n	8003c08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d0e9      	beq.n	8003bda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000004 	.word	0x20000004
 8003c18:	14f8b589 	.word	0x14f8b589

08003c1c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c2c:	d103      	bne.n	8003c36 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c34:	e007      	b.n	8003c46 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c3e:	d102      	bne.n	8003c46 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2208      	movs	r2, #8
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e267      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d075      	beq.n	8003d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c72:	4b88      	ldr	r3, [pc, #544]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d00c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7e:	4b85      	ldr	r3, [pc, #532]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d112      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	4b7e      	ldr	r3, [pc, #504]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d05b      	beq.n	8003d5c <HAL_RCC_OscConfig+0x108>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d157      	bne.n	8003d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e242      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb8:	d106      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x74>
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x98>
 8003cd2:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6f      	ldr	r2, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6c      	ldr	r2, [pc, #432]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xb0>
 8003cec:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a68      	ldr	r2, [pc, #416]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b66      	ldr	r3, [pc, #408]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a65      	ldr	r2, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fa7c 	bl	8001208 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fd fa78 	bl	8001208 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e207      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xc0>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd fa68 	bl	8001208 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fa64 	bl	8001208 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	; 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1f3      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b51      	ldr	r3, [pc, #324]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0xe8>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d76:	4b47      	ldr	r3, [pc, #284]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c7      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b3b      	ldr	r3, [pc, #236]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4937      	ldr	r1, [pc, #220]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_RCC_OscConfig+0x244>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd fa1d 	bl	8001208 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7fd fa19 	bl	8001208 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1a8      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4925      	ldr	r1, [pc, #148]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCC_OscConfig+0x244>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f9fc 	bl	8001208 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fd f9f8 	bl	8001208 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e187      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d036      	beq.n	8003eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d016      	beq.n	8003e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_RCC_OscConfig+0x248>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd f9dc 	bl	8001208 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e54:	f7fd f9d8 	bl	8001208 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e167      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x240>)
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x200>
 8003e72:	e01b      	b.n	8003eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e74:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_RCC_OscConfig+0x248>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd f9c5 	bl	8001208 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e80:	e00e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e82:	f7fd f9c1 	bl	8001208 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d907      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e150      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
 8003e94:	40023800 	.word	0x40023800
 8003e98:	42470000 	.word	0x42470000
 8003e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	4b88      	ldr	r3, [pc, #544]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ea      	bne.n	8003e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8097 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebe:	4b81      	ldr	r3, [pc, #516]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	4b7d      	ldr	r3, [pc, #500]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a7c      	ldr	r2, [pc, #496]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b7a      	ldr	r3, [pc, #488]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	4b77      	ldr	r3, [pc, #476]	; (80040c8 <HAL_RCC_OscConfig+0x474>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d118      	bne.n	8003f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef6:	4b74      	ldr	r3, [pc, #464]	; (80040c8 <HAL_RCC_OscConfig+0x474>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a73      	ldr	r2, [pc, #460]	; (80040c8 <HAL_RCC_OscConfig+0x474>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f02:	f7fd f981 	bl	8001208 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fd f97d 	bl	8001208 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e10c      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	4b6a      	ldr	r3, [pc, #424]	; (80040c8 <HAL_RCC_OscConfig+0x474>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x2ea>
 8003f30:	4b64      	ldr	r3, [pc, #400]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a63      	ldr	r2, [pc, #396]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	e01c      	b.n	8003f78 <HAL_RCC_OscConfig+0x324>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x30c>
 8003f46:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a5e      	ldr	r2, [pc, #376]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	4b5c      	ldr	r3, [pc, #368]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a5b      	ldr	r2, [pc, #364]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0x324>
 8003f60:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f64:	4a57      	ldr	r2, [pc, #348]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f6c:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a54      	ldr	r2, [pc, #336]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003f72:	f023 0304 	bic.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7fd f942 	bl	8001208 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f88:	f7fd f93e 	bl	8001208 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e0cb      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ee      	beq.n	8003f88 <HAL_RCC_OscConfig+0x334>
 8003faa:	e014      	b.n	8003fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fac:	f7fd f92c 	bl	8001208 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fd f928 	bl	8001208 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e0b5      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ee      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80a1 	beq.w	8004134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff2:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d05c      	beq.n	80040b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d141      	bne.n	800408a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd f8fc 	bl	8001208 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd f8f8 	bl	8001208 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e087      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	019b      	lsls	r3, r3, #6
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	3b01      	subs	r3, #1
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004054:	061b      	lsls	r3, r3, #24
 8004056:	491b      	ldr	r1, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x478>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fd f8d1 	bl	8001208 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd f8cd 	bl	8001208 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e05c      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x416>
 8004088:	e054      	b.n	8004134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_RCC_OscConfig+0x478>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fd f8ba 	bl	8001208 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd f8b6 	bl	8001208 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e045      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <HAL_RCC_OscConfig+0x470>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x444>
 80040b6:	e03d      	b.n	8004134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e038      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40007000 	.word	0x40007000
 80040cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCC_OscConfig+0x4ec>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d028      	beq.n	8004130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d121      	bne.n	8004130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d11a      	bne.n	8004130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004108:	4293      	cmp	r3, r2
 800410a:	d111      	bne.n	8004130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800

08004144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0cc      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004158:	4b68      	ldr	r3, [pc, #416]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d90c      	bls.n	8004180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004166:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	429a      	cmp	r2, r3
 800417a:	d001      	beq.n	8004180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0b8      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004198:	4b59      	ldr	r3, [pc, #356]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4a58      	ldr	r2, [pc, #352]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041bc:	4b50      	ldr	r3, [pc, #320]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	494d      	ldr	r1, [pc, #308]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d044      	beq.n	8004264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e2:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d119      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e07f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d003      	beq.n	8004202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004202:	4b3f      	ldr	r3, [pc, #252]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004212:	4b3b      	ldr	r3, [pc, #236]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e067      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4934      	ldr	r1, [pc, #208]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004234:	f7fc ffe8 	bl	8001208 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fc ffe4 	bl	8001208 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e04f      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d20c      	bcs.n	800428c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b20      	ldr	r3, [pc, #128]	; (80042fc <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e032      	b.n	80042f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4916      	ldr	r1, [pc, #88]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	490e      	ldr	r1, [pc, #56]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ca:	f000 f821 	bl	8004310 <HAL_RCC_GetSysClockFreq>
 80042ce:	4602      	mov	r2, r0
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	5ccb      	ldrb	r3, [r1, r3]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc ff48 	bl	8001180 <HAL_InitTick>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40023c00 	.word	0x40023c00
 8004300:	40023800 	.word	0x40023800
 8004304:	08005f84 	.word	0x08005f84
 8004308:	20000004 	.word	0x20000004
 800430c:	20000008 	.word	0x20000008

08004310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004314:	b090      	sub	sp, #64	; 0x40
 8004316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
 800431c:	2300      	movs	r3, #0
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	2300      	movs	r3, #0
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d00d      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x40>
 8004334:	2b08      	cmp	r3, #8
 8004336:	f200 80a1 	bhi.w	800447c <HAL_RCC_GetSysClockFreq+0x16c>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_RCC_GetSysClockFreq+0x34>
 800433e:	2b04      	cmp	r3, #4
 8004340:	d003      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x3a>
 8004342:	e09b      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_GetSysClockFreq+0x184>)
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004348:	e09b      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_GetSysClockFreq+0x188>)
 800434c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800434e:	e098      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004350:	4b4f      	ldr	r3, [pc, #316]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435a:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d028      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	2200      	movs	r2, #0
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	627a      	str	r2, [r7, #36]	; 0x24
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004378:	2100      	movs	r1, #0
 800437a:	4b47      	ldr	r3, [pc, #284]	; (8004498 <HAL_RCC_GetSysClockFreq+0x188>)
 800437c:	fb03 f201 	mul.w	r2, r3, r1
 8004380:	2300      	movs	r3, #0
 8004382:	fb00 f303 	mul.w	r3, r0, r3
 8004386:	4413      	add	r3, r2
 8004388:	4a43      	ldr	r2, [pc, #268]	; (8004498 <HAL_RCC_GetSysClockFreq+0x188>)
 800438a:	fba0 1202 	umull	r1, r2, r0, r2
 800438e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004390:	460a      	mov	r2, r1
 8004392:	62ba      	str	r2, [r7, #40]	; 0x28
 8004394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004396:	4413      	add	r3, r2
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439c:	2200      	movs	r2, #0
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	61fa      	str	r2, [r7, #28]
 80043a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043aa:	f7fb ff13 	bl	80001d4 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4613      	mov	r3, r2
 80043b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b6:	e053      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b8:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	099b      	lsrs	r3, r3, #6
 80043be:	2200      	movs	r2, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	617a      	str	r2, [r7, #20]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80043ca:	f04f 0b00 	mov.w	fp, #0
 80043ce:	4652      	mov	r2, sl
 80043d0:	465b      	mov	r3, fp
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f04f 0100 	mov.w	r1, #0
 80043da:	0159      	lsls	r1, r3, #5
 80043dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043e0:	0150      	lsls	r0, r2, #5
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	ebb2 080a 	subs.w	r8, r2, sl
 80043ea:	eb63 090b 	sbc.w	r9, r3, fp
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004402:	ebb2 0408 	subs.w	r4, r2, r8
 8004406:	eb63 0509 	sbc.w	r5, r3, r9
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	00eb      	lsls	r3, r5, #3
 8004414:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004418:	00e2      	lsls	r2, r4, #3
 800441a:	4614      	mov	r4, r2
 800441c:	461d      	mov	r5, r3
 800441e:	eb14 030a 	adds.w	r3, r4, sl
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	eb45 030b 	adc.w	r3, r5, fp
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004436:	4629      	mov	r1, r5
 8004438:	028b      	lsls	r3, r1, #10
 800443a:	4621      	mov	r1, r4
 800443c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004440:	4621      	mov	r1, r4
 8004442:	028a      	lsls	r2, r1, #10
 8004444:	4610      	mov	r0, r2
 8004446:	4619      	mov	r1, r3
 8004448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444a:	2200      	movs	r2, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	60fa      	str	r2, [r7, #12]
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	f7fb febe 	bl	80001d4 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4613      	mov	r3, r2
 800445e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_GetSysClockFreq+0x180>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004470:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	fbb2 f3f3 	udiv	r3, r2, r3
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800447a:	e002      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetSysClockFreq+0x184>)
 800447e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004484:	4618      	mov	r0, r3
 8004486:	3740      	adds	r7, #64	; 0x40
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop
 8004490:	40023800 	.word	0x40023800
 8004494:	00f42400 	.word	0x00f42400
 8004498:	017d7840 	.word	0x017d7840

0800449c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a0:	4b03      	ldr	r3, [pc, #12]	; (80044b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a2:	681b      	ldr	r3, [r3, #0]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044b8:	f7ff fff0 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	08005f94 	.word	0x08005f94

080044dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e0:	f7ff ffdc 	bl	800449c <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	0b5b      	lsrs	r3, r3, #13
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	08005f94 	.word	0x08005f94

08004504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e041      	b.n	800459a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fd1c 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f000 fac0 	bl	8004ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d001      	beq.n	80045bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e044      	b.n	8004646 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2202      	movs	r2, #2
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <HAL_TIM_Base_Start_IT+0xb0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d018      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x6c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e6:	d013      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x6c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_TIM_Base_Start_IT+0xb4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00e      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x6c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_TIM_Base_Start_IT+0xb8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x6c>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a17      	ldr	r2, [pc, #92]	; (8004660 <HAL_TIM_Base_Start_IT+0xbc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_Base_Start_IT+0x6c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a16      	ldr	r2, [pc, #88]	; (8004664 <HAL_TIM_Base_Start_IT+0xc0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d010      	beq.n	8004644 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e007      	b.n	8004644 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40014000 	.word	0x40014000

08004668 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	f241 1311 	movw	r3, #4369	; 0x1111
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_TIM_Base_Stop_IT+0x48>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	f240 4344 	movw	r3, #1092	; 0x444
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_TIM_Base_Stop_IT+0x48>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d122      	bne.n	8004722 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d11b      	bne.n	8004722 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f06f 0202 	mvn.w	r2, #2
 80046f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f9bf 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 800470e:	e005      	b.n	800471c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f9b1 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f9c2 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d122      	bne.n	8004776 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b04      	cmp	r3, #4
 800473c:	d11b      	bne.n	8004776 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f06f 0204 	mvn.w	r2, #4
 8004746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f995 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004762:	e005      	b.n	8004770 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f987 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f998 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d122      	bne.n	80047ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b08      	cmp	r3, #8
 8004790:	d11b      	bne.n	80047ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f06f 0208 	mvn.w	r2, #8
 800479a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2204      	movs	r2, #4
 80047a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f96b 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80047b6:	e005      	b.n	80047c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f95d 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f96e 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d122      	bne.n	800481e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d11b      	bne.n	800481e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f06f 0210 	mvn.w	r2, #16
 80047ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2208      	movs	r2, #8
 80047f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f941 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 800480a:	e005      	b.n	8004818 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f933 	bl	8004a78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f944 	bl	8004aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10e      	bne.n	800484a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b01      	cmp	r3, #1
 8004838:	d107      	bne.n	800484a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f06f 0201 	mvn.w	r2, #1
 8004842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f90d 	bl	8004a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d10e      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	d107      	bne.n	8004876 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800486e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fabb 	bl	8004dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d10e      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d107      	bne.n	80048a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f909 	bl	8004ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d10e      	bne.n	80048ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f06f 0220 	mvn.w	r2, #32
 80048c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fa85 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b084      	sub	sp, #16
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_ConfigClockSource+0x1c>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0b4      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x186>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004910:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004918:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492a:	d03e      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0xd4>
 800492c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004930:	f200 8087 	bhi.w	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004938:	f000 8086 	beq.w	8004a48 <HAL_TIM_ConfigClockSource+0x172>
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d87f      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004942:	2b70      	cmp	r3, #112	; 0x70
 8004944:	d01a      	beq.n	800497c <HAL_TIM_ConfigClockSource+0xa6>
 8004946:	2b70      	cmp	r3, #112	; 0x70
 8004948:	d87b      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800494a:	2b60      	cmp	r3, #96	; 0x60
 800494c:	d050      	beq.n	80049f0 <HAL_TIM_ConfigClockSource+0x11a>
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d877      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004952:	2b50      	cmp	r3, #80	; 0x50
 8004954:	d03c      	beq.n	80049d0 <HAL_TIM_ConfigClockSource+0xfa>
 8004956:	2b50      	cmp	r3, #80	; 0x50
 8004958:	d873      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	d058      	beq.n	8004a10 <HAL_TIM_ConfigClockSource+0x13a>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d86f      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d064      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d86b      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d060      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 800496e:	2b20      	cmp	r3, #32
 8004970:	d867      	bhi.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d05c      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 8004976:	2b10      	cmp	r3, #16
 8004978:	d05a      	beq.n	8004a30 <HAL_TIM_ConfigClockSource+0x15a>
 800497a:	e062      	b.n	8004a42 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6899      	ldr	r1, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f000 f996 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800499e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	609a      	str	r2, [r3, #8]
      break;
 80049a8:	e04f      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f000 f97f 	bl	8004cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049cc:	609a      	str	r2, [r3, #8]
      break;
 80049ce:	e03c      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	461a      	mov	r2, r3
 80049de:	f000 f8f3 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2150      	movs	r1, #80	; 0x50
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f94c 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 80049ee:	e02c      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	461a      	mov	r2, r3
 80049fe:	f000 f912 	bl	8004c26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2160      	movs	r1, #96	; 0x60
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f93c 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a0e:	e01c      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f000 f8d3 	bl	8004bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2140      	movs	r1, #64	; 0x40
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f92c 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a2e:	e00c      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 f923 	bl	8004c86 <TIM_ITRx_SetConfig>
      break;
 8004a40:	e003      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	73fb      	strb	r3, [r7, #15]
      break;
 8004a46:	e000      	b.n	8004a4a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a34      	ldr	r2, [pc, #208]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00f      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d00b      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <TIM_Base_SetConfig+0xe8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d007      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <TIM_Base_SetConfig+0xec>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <TIM_Base_SetConfig+0xf0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d108      	bne.n	8004b12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a25      	ldr	r2, [pc, #148]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d01b      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b20:	d017      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <TIM_Base_SetConfig+0xe8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d013      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <TIM_Base_SetConfig+0xec>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <TIM_Base_SetConfig+0xf0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a1f      	ldr	r2, [pc, #124]	; (8004bbc <TIM_Base_SetConfig+0xf4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1e      	ldr	r2, [pc, #120]	; (8004bc0 <TIM_Base_SetConfig+0xf8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_Base_SetConfig+0xfc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d108      	bne.n	8004b64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a08      	ldr	r2, [pc, #32]	; (8004bac <TIM_Base_SetConfig+0xe4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d103      	bne.n	8004b98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800

08004bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 030a 	bic.w	r3, r3, #10
 8004c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b087      	sub	sp, #28
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	60b9      	str	r1, [r7, #8]
 8004c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0210 	bic.w	r2, r3, #16
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f043 0307 	orr.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	021a      	lsls	r2, r3, #8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e050      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d013      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a15      	ldr	r2, [pc, #84]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40000400 	.word	0x40000400
 8004dcc:	40000800 	.word	0x40000800
 8004dd0:	40000c00 	.word	0x40000c00
 8004dd4:	40014000 	.word	0x40014000

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03f      	b.n	8004e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f90e 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fdef 	bl	8005a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d130      	bne.n	8004f16 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Transmit_IT+0x26>
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e029      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Transmit_IT+0x38>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e022      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2221      	movs	r2, #33	; 0x21
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004f16:	2302      	movs	r3, #2
  }
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d11d      	bne.n	8004f7a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_UART_Receive_IT+0x26>
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e016      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_UART_Receive_IT+0x38>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e00f      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fb69 	bl	8005648 <UART_Start_Receive_IT>
 8004f76:	4603      	mov	r3, r0
 8004f78:	e000      	b.n	8004f7c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b09a      	sub	sp, #104	; 0x68
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fac:	657a      	str	r2, [r7, #84]	; 0x54
 8004fae:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	f023 0301 	bic.w	r3, r3, #1
 8004fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3314      	adds	r3, #20
 8004fde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fe0:	643a      	str	r2, [r7, #64]	; 0x40
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d119      	bne.n	8005030 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	61fb      	str	r3, [r7, #28]
   return(result);
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800501c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e5      	bne.n	8004ffc <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d13f      	bne.n	80050be <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	60bb      	str	r3, [r7, #8]
   return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005054:	65bb      	str	r3, [r7, #88]	; 0x58
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3314      	adds	r3, #20
 800505c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800505e:	61ba      	str	r2, [r7, #24]
 8005060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	e841 2300 	strex	r3, r2, [r1]
 800506a:	613b      	str	r3, [r7, #16]
   return(result);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1e5      	bne.n	800503e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	2b00      	cmp	r3, #0
 8005078:	d013      	beq.n	80050a2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_UART_AbortReceive_IT+0x160>)
 8005080:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc fde5 	bl	8001c56 <HAL_DMA_Abort_IT>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d022      	beq.n	80050d8 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800509c:	4610      	mov	r0, r2
 800509e:	4798      	blx	r3
 80050a0:	e01a      	b.n	80050d8 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 faa4 	bl	8005604 <HAL_UART_AbortReceiveCpltCallback>
 80050bc:	e00c      	b.n	80050d8 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa96 	bl	8005604 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3768      	adds	r7, #104	; 0x68
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	080057b3 	.word	0x080057b3

080050e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0ba      	sub	sp, #232	; 0xe8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_UART_IRQHandler+0x66>
 800513a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513e:	f003 0320 	and.w	r3, r3, #32
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fbb3 	bl	80058b2 <UART_Receive_IT>
      return;
 800514c:	e256      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800514e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80de 	beq.w	8005314 <HAL_UART_IRQHandler+0x22c>
 8005158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005168:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80d1 	beq.w	8005314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00b      	beq.n	8005196 <HAL_UART_IRQHandler+0xae>
 800517e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00b      	beq.n	80051ba <HAL_UART_IRQHandler+0xd2>
 80051a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0202 	orr.w	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
 80051c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f043 0204 	orr.w	r2, r3, #4
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d011      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
 80051ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d105      	bne.n	8005202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0208 	orr.w	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 81ed 	beq.w	80055f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_UART_IRQHandler+0x14e>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fb3e 	bl	80058b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <HAL_UART_IRQHandler+0x17a>
 800525a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04f      	beq.n	8005302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa2e 	bl	80056c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d141      	bne.n	80052fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800528c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1d9      	bne.n	8005276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d013      	beq.n	80052f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	4a7d      	ldr	r2, [pc, #500]	; (80054c4 <HAL_UART_IRQHandler+0x3dc>)
 80052d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fc fcbd 	bl	8001c56 <HAL_DMA_Abort_IT>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d016      	beq.n	8005310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ec:	4610      	mov	r0, r2
 80052ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f0:	e00e      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fc70 	bl	8000bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	e00a      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fc6c 	bl	8000bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	e006      	b.n	8005310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb fc68 	bl	8000bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800530e:	e170      	b.n	80055f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	bf00      	nop
    return;
 8005312:	e16e      	b.n	80055f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b01      	cmp	r3, #1
 800531a:	f040 814a 	bne.w	80055b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8143 	beq.w	80055b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800532c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 813c 	beq.w	80055b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b40      	cmp	r3, #64	; 0x40
 800535c:	f040 80b4 	bne.w	80054c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800536c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8140 	beq.w	80055f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800537a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800537e:	429a      	cmp	r2, r3
 8005380:	f080 8139 	bcs.w	80055f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800538a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	f000 8088 	beq.w	80054aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1d9      	bne.n	800539a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f8:	f023 0301 	bic.w	r3, r3, #1
 80053fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3314      	adds	r3, #20
 8005406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800540a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800540e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e1      	bne.n	80053e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3314      	adds	r3, #20
 8005428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3314      	adds	r3, #20
 8005442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800544c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e3      	bne.n	8005422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547a:	f023 0310 	bic.w	r3, r3, #16
 800547e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800548c:	65ba      	str	r2, [r7, #88]	; 0x58
 800548e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800549a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e3      	bne.n	8005468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fc fb66 	bl	8001b76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8ac 	bl	8005618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054c0:	e099      	b.n	80055f6 <HAL_UART_IRQHandler+0x50e>
 80054c2:	bf00      	nop
 80054c4:	0800578b 	.word	0x0800578b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 808b 	beq.w	80055fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8086 	beq.w	80055fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	330c      	adds	r3, #12
 80054f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005512:	647a      	str	r2, [r7, #68]	; 0x44
 8005514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e3      	bne.n	80054ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3314      	adds	r3, #20
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	623b      	str	r3, [r7, #32]
   return(result);
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800554a:	633a      	str	r2, [r7, #48]	; 0x30
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e3      	bne.n	8005526 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	e853 3f00 	ldrex	r3, [r3]
 800557a:	60fb      	str	r3, [r7, #12]
   return(result);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0310 	bic.w	r3, r3, #16
 8005582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005590:	61fa      	str	r2, [r7, #28]
 8005592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005594:	69b9      	ldr	r1, [r7, #24]
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	e841 2300 	strex	r3, r2, [r1]
 800559c:	617b      	str	r3, [r7, #20]
   return(result);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1e3      	bne.n	800556c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f834 	bl	8005618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055b0:	e023      	b.n	80055fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_UART_IRQHandler+0x4ea>
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f909 	bl	80057e2 <UART_Transmit_IT>
    return;
 80055d0:	e014      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00e      	beq.n	80055fc <HAL_UART_IRQHandler+0x514>
 80055de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f949 	bl	8005882 <UART_EndTransmit_IT>
    return;
 80055f0:	e004      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
    return;
 80055f2:	bf00      	nop
 80055f4:	e002      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
      return;
 80055f6:	bf00      	nop
 80055f8:	e000      	b.n	80055fc <HAL_UART_IRQHandler+0x514>
      return;
 80055fa:	bf00      	nop
  }
}
 80055fc:	37e8      	adds	r7, #232	; 0xe8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop

08005604 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4613      	mov	r3, r2
 8005654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2222      	movs	r2, #34	; 0x22
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005694:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0220 	orr.w	r2, r2, #32
 80056b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b095      	sub	sp, #84	; 0x54
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ec:	643a      	str	r2, [r7, #64]	; 0x40
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3314      	adds	r3, #20
 8005706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	2b01      	cmp	r3, #1
 800573a:	d119      	bne.n	8005770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60bb      	str	r3, [r7, #8]
   return(result);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	647b      	str	r3, [r7, #68]	; 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575c:	61ba      	str	r2, [r7, #24]
 800575e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800577e:	bf00      	nop
 8005780:	3754      	adds	r7, #84	; 0x54
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7fb fa17 	bl	8000bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ff15 	bl	8005604 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b21      	cmp	r3, #33	; 0x21
 80057f4:	d13e      	bne.n	8005874 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d114      	bne.n	800582a <UART_Transmit_IT+0x48>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d110      	bne.n	800582a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800581c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	621a      	str	r2, [r3, #32]
 8005828:	e008      	b.n	800583c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6211      	str	r1, [r2, #32]
 8005834:	781a      	ldrb	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005840:	b29b      	uxth	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	b29b      	uxth	r3, r3
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4619      	mov	r1, r3
 800584a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10f      	bne.n	8005870 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800585e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800586e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b082      	sub	sp, #8
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005898:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fb f93a 	bl	8000b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08c      	sub	sp, #48	; 0x30
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b22      	cmp	r3, #34	; 0x22
 80058c4:	f040 80ab 	bne.w	8005a1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d117      	bne.n	8005902 <UART_Receive_IT+0x50>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d113      	bne.n	8005902 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	1c9a      	adds	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005900:	e026      	b.n	8005950 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005914:	d007      	beq.n	8005926 <UART_Receive_IT+0x74>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <UART_Receive_IT+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	b2da      	uxtb	r2, r3
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	e008      	b.n	8005946 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005940:	b2da      	uxtb	r2, r3
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29b      	uxth	r3, r3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	4619      	mov	r1, r3
 800595e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005960:	2b00      	cmp	r3, #0
 8005962:	d15a      	bne.n	8005a1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0220 	bic.w	r2, r2, #32
 8005972:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005982:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d135      	bne.n	8005a10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f023 0310 	bic.w	r3, r3, #16
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	623a      	str	r2, [r7, #32]
 80059cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d10a      	bne.n	8005a02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fe05 	bl	8005618 <HAL_UARTEx_RxEventCallback>
 8005a0e:	e002      	b.n	8005a16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fb f899 	bl	8000b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e002      	b.n	8005a20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e000      	b.n	8005a20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a1e:	2302      	movs	r3, #2
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3730      	adds	r7, #48	; 0x30
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b0c0      	sub	sp, #256	; 0x100
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	68d9      	ldr	r1, [r3, #12]
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	ea40 0301 	orr.w	r3, r0, r1
 8005a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a80:	f021 010c 	bic.w	r1, r1, #12
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a8e:	430b      	orrs	r3, r1
 8005a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa2:	6999      	ldr	r1, [r3, #24]
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	ea40 0301 	orr.w	r3, r0, r1
 8005aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b8f      	ldr	r3, [pc, #572]	; (8005cf4 <UART_SetConfig+0x2cc>)
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d005      	beq.n	8005ac8 <UART_SetConfig+0xa0>
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b8d      	ldr	r3, [pc, #564]	; (8005cf8 <UART_SetConfig+0x2d0>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d104      	bne.n	8005ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac8:	f7fe fd08 	bl	80044dc <HAL_RCC_GetPCLK2Freq>
 8005acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ad0:	e003      	b.n	8005ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ad2:	f7fe fcef 	bl	80044b4 <HAL_RCC_GetPCLK1Freq>
 8005ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae4:	f040 810c 	bne.w	8005d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005afa:	4622      	mov	r2, r4
 8005afc:	462b      	mov	r3, r5
 8005afe:	1891      	adds	r1, r2, r2
 8005b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b02:	415b      	adcs	r3, r3
 8005b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	eb12 0801 	adds.w	r8, r2, r1
 8005b10:	4629      	mov	r1, r5
 8005b12:	eb43 0901 	adc.w	r9, r3, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	4699      	mov	r9, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	eb18 0303 	adds.w	r3, r8, r3
 8005b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b38:	462b      	mov	r3, r5
 8005b3a:	eb49 0303 	adc.w	r3, r9, r3
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b56:	460b      	mov	r3, r1
 8005b58:	18db      	adds	r3, r3, r3
 8005b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	eb42 0303 	adc.w	r3, r2, r3
 8005b62:	657b      	str	r3, [r7, #84]	; 0x54
 8005b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b6c:	f7fa fb32 	bl	80001d4 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4b61      	ldr	r3, [pc, #388]	; (8005cfc <UART_SetConfig+0x2d4>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	011c      	lsls	r4, r3, #4
 8005b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	1891      	adds	r1, r2, r2
 8005b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b98:	415b      	adcs	r3, r3
 8005b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	469b      	mov	fp, r3
 8005bc4:	4643      	mov	r3, r8
 8005bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bec:	460b      	mov	r3, r1
 8005bee:	18db      	adds	r3, r3, r3
 8005bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c02:	f7fa fae7 	bl	80001d4 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <UART_SetConfig+0x2d4>)
 8005c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	2264      	movs	r2, #100	; 0x64
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	1acb      	subs	r3, r1, r3
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c22:	4b36      	ldr	r3, [pc, #216]	; (8005cfc <UART_SetConfig+0x2d4>)
 8005c24:	fba3 2302 	umull	r2, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c30:	441c      	add	r4, r3
 8005c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	1891      	adds	r1, r2, r2
 8005c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c4c:	415b      	adcs	r3, r3
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c54:	4641      	mov	r1, r8
 8005c56:	1851      	adds	r1, r2, r1
 8005c58:	6339      	str	r1, [r7, #48]	; 0x30
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	414b      	adcs	r3, r1
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	00cb      	lsls	r3, r1, #3
 8005c70:	4651      	mov	r1, sl
 8005c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c76:	4651      	mov	r1, sl
 8005c78:	00ca      	lsls	r2, r1, #3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4642      	mov	r2, r8
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c88:	464b      	mov	r3, r9
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ca8:	460b      	mov	r3, r1
 8005caa:	18db      	adds	r3, r3, r3
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cae:	4613      	mov	r3, r2
 8005cb0:	eb42 0303 	adc.w	r3, r2, r3
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cbe:	f7fa fa89 	bl	80001d4 <__aeabi_uldivmod>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <UART_SetConfig+0x2d4>)
 8005cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	2164      	movs	r1, #100	; 0x64
 8005cd0:	fb01 f303 	mul.w	r3, r1, r3
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	3332      	adds	r3, #50	; 0x32
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <UART_SetConfig+0x2d4>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	f003 0207 	and.w	r2, r3, #7
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4422      	add	r2, r4
 8005cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cf0:	e105      	b.n	8005efe <UART_SetConfig+0x4d6>
 8005cf2:	bf00      	nop
 8005cf4:	40011000 	.word	0x40011000
 8005cf8:	40011400 	.word	0x40011400
 8005cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d12:	4642      	mov	r2, r8
 8005d14:	464b      	mov	r3, r9
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	6239      	str	r1, [r7, #32]
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d22:	4641      	mov	r1, r8
 8005d24:	1854      	adds	r4, r2, r1
 8005d26:	4649      	mov	r1, r9
 8005d28:	eb43 0501 	adc.w	r5, r3, r1
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	00eb      	lsls	r3, r5, #3
 8005d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d3a:	00e2      	lsls	r2, r4, #3
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	461d      	mov	r5, r3
 8005d40:	4643      	mov	r3, r8
 8005d42:	18e3      	adds	r3, r4, r3
 8005d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d48:	464b      	mov	r3, r9
 8005d4a:	eb45 0303 	adc.w	r3, r5, r3
 8005d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d6e:	4629      	mov	r1, r5
 8005d70:	008b      	lsls	r3, r1, #2
 8005d72:	4621      	mov	r1, r4
 8005d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d78:	4621      	mov	r1, r4
 8005d7a:	008a      	lsls	r2, r1, #2
 8005d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d80:	f7fa fa28 	bl	80001d4 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4b60      	ldr	r3, [pc, #384]	; (8005f0c <UART_SetConfig+0x4e4>)
 8005d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	011c      	lsls	r4, r3, #4
 8005d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d96:	2200      	movs	r2, #0
 8005d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005da4:	4642      	mov	r2, r8
 8005da6:	464b      	mov	r3, r9
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	61b9      	str	r1, [r7, #24]
 8005dac:	415b      	adcs	r3, r3
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db4:	4641      	mov	r1, r8
 8005db6:	1851      	adds	r1, r2, r1
 8005db8:	6139      	str	r1, [r7, #16]
 8005dba:	4649      	mov	r1, r9
 8005dbc:	414b      	adcs	r3, r1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dcc:	4659      	mov	r1, fp
 8005dce:	00cb      	lsls	r3, r1, #3
 8005dd0:	4651      	mov	r1, sl
 8005dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	00ca      	lsls	r2, r1, #3
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4603      	mov	r3, r0
 8005de0:	4642      	mov	r2, r8
 8005de2:	189b      	adds	r3, r3, r2
 8005de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005de8:	464b      	mov	r3, r9
 8005dea:	460a      	mov	r2, r1
 8005dec:	eb42 0303 	adc.w	r3, r2, r3
 8005df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	008b      	lsls	r3, r1, #2
 8005e10:	4641      	mov	r1, r8
 8005e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e16:	4641      	mov	r1, r8
 8005e18:	008a      	lsls	r2, r1, #2
 8005e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e1e:	f7fa f9d9 	bl	80001d4 <__aeabi_uldivmod>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <UART_SetConfig+0x4e4>)
 8005e28:	fba3 1302 	umull	r1, r3, r3, r2
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	2164      	movs	r1, #100	; 0x64
 8005e30:	fb01 f303 	mul.w	r3, r1, r3
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	3332      	adds	r3, #50	; 0x32
 8005e3a:	4a34      	ldr	r2, [pc, #208]	; (8005f0c <UART_SetConfig+0x4e4>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e46:	441c      	add	r4, r3
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e50:	677a      	str	r2, [r7, #116]	; 0x74
 8005e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e56:	4642      	mov	r2, r8
 8005e58:	464b      	mov	r3, r9
 8005e5a:	1891      	adds	r1, r2, r2
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	415b      	adcs	r3, r3
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e66:	4641      	mov	r1, r8
 8005e68:	1851      	adds	r1, r2, r1
 8005e6a:	6039      	str	r1, [r7, #0]
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	414b      	adcs	r3, r1
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e7e:	4659      	mov	r1, fp
 8005e80:	00cb      	lsls	r3, r1, #3
 8005e82:	4651      	mov	r1, sl
 8005e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e88:	4651      	mov	r1, sl
 8005e8a:	00ca      	lsls	r2, r1, #3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	4642      	mov	r2, r8
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e98:	464b      	mov	r3, r9
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8005eac:	667a      	str	r2, [r7, #100]	; 0x64
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eba:	4649      	mov	r1, r9
 8005ebc:	008b      	lsls	r3, r1, #2
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	008a      	lsls	r2, r1, #2
 8005ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ecc:	f7fa f982 	bl	80001d4 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <UART_SetConfig+0x4e4>)
 8005ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	2164      	movs	r1, #100	; 0x64
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	3332      	adds	r3, #50	; 0x32
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <UART_SetConfig+0x4e4>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4422      	add	r2, r4
 8005efc:	609a      	str	r2, [r3, #8]
}
 8005efe:	bf00      	nop
 8005f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f04:	46bd      	mov	sp, r7
 8005f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0a:	bf00      	nop
 8005f0c:	51eb851f 	.word	0x51eb851f

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	4d0d      	ldr	r5, [pc, #52]	; (8005f48 <__libc_init_array+0x38>)
 8005f14:	4c0d      	ldr	r4, [pc, #52]	; (8005f4c <__libc_init_array+0x3c>)
 8005f16:	1b64      	subs	r4, r4, r5
 8005f18:	10a4      	asrs	r4, r4, #2
 8005f1a:	2600      	movs	r6, #0
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	4d0b      	ldr	r5, [pc, #44]	; (8005f50 <__libc_init_array+0x40>)
 8005f22:	4c0c      	ldr	r4, [pc, #48]	; (8005f54 <__libc_init_array+0x44>)
 8005f24:	f000 f820 	bl	8005f68 <_init>
 8005f28:	1b64      	subs	r4, r4, r5
 8005f2a:	10a4      	asrs	r4, r4, #2
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	08005fa4 	.word	0x08005fa4
 8005f4c:	08005fa4 	.word	0x08005fa4
 8005f50:	08005fa4 	.word	0x08005fa4
 8005f54:	08005fa8 	.word	0x08005fa8

08005f58 <memset>:
 8005f58:	4402      	add	r2, r0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d100      	bne.n	8005f62 <memset+0xa>
 8005f60:	4770      	bx	lr
 8005f62:	f803 1b01 	strb.w	r1, [r3], #1
 8005f66:	e7f9      	b.n	8005f5c <memset+0x4>

08005f68 <_init>:
 8005f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6a:	bf00      	nop
 8005f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6e:	bc08      	pop	{r3}
 8005f70:	469e      	mov	lr, r3
 8005f72:	4770      	bx	lr

08005f74 <_fini>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr
