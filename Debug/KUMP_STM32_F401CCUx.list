
KUMP_STM32_F401CCUx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007650  08007650  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08007658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000220  08007878  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08007878  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ef6  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e31  00000000  00000000  00036146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dad  00000000  00000000  0003b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017591  00000000  00000000  00053f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c100  00000000  00000000  0006b52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010762e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  00107680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000220 	.word	0x20000220
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007618 	.word	0x08007618

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000224 	.word	0x20000224
 80001d4:	08007618 	.word	0x08007618

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7a:	480e      	ldr	r0, [pc, #56]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d7c:	f001 fc3a 	bl	80025f4 <HAL_ADC_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000d86:	f000 fecf 	bl	8001b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d9c:	f001 fe5e 	bl	8002a5c <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000da6:	f000 febf 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000023c 	.word	0x2000023c
 8000db8:	40012000 	.word	0x40012000

08000dbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0x8c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12f      	bne.n	8000e3e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_ADC_MspInit+0x90>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <HAL_ADC_MspInit+0x94>)
 8000e2a:	f002 fa23 	bl	8003274 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2012      	movs	r0, #18
 8000e34:	f002 f939 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e38:	2012      	movs	r0, #18
 8000e3a:	f002 f952 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_GPIO_Init+0xcc>)
 8000ec6:	f002 fc3d 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <MX_GPIO_Init+0xd0>)
 8000ed2:	f002 fc37 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000ed6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_GPIO_Init+0xcc>)
 8000ef0:	f002 f9c0 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_GPIO_Init+0xd0>)
 8000f0e:	f002 f9b1 	bl	8003274 <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020000 	.word	0x40020000

08000f28 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_I2C1_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_I2C1_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_I2C1_Init+0x50>)
 8000f66:	f002 fc07 	bl	8003778 <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 fdda 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000284 	.word	0x20000284
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <HAL_I2C_MspInit+0xa4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d13b      	bne.n	800101e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a1f      	ldr	r2, [pc, #124]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc6:	2312      	movs	r3, #18
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <HAL_I2C_MspInit+0xac>)
 8000fde:	f002 f949 	bl	8003274 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_I2C_MspInit+0xa8>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	201f      	movs	r0, #31
 8001004:	f002 f851 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001008:	201f      	movs	r0, #31
 800100a:	f002 f86a 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2020      	movs	r0, #32
 8001014:	f002 f849 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001018:	2020      	movs	r0, #32
 800101a:	f002 f862 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_I2C_MspDeInit+0x44>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d113      	bne.n	800106e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_I2C_MspDeInit+0x48>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <HAL_I2C_MspDeInit+0x48>)
 800104c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <HAL_I2C_MspDeInit+0x4c>)
 8001056:	f002 fa91 	bl	800357c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <HAL_I2C_MspDeInit+0x4c>)
 800105e:	f002 fa8d 	bl	800357c <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001062:	201f      	movs	r0, #31
 8001064:	f002 f84b 	bl	80030fe <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001068:	2020      	movs	r0, #32
 800106a:	f002 f848 	bl	80030fe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40005400 	.word	0x40005400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f001 fa42 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f85c 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f7ff fee0 	bl	8000e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001094:	f7ff fe40 	bl	8000d18 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001098:	f001 f994 	bl	80023c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800109c:	f7ff ff44 	bl	8000f28 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010a0:	f001 f828 	bl	80020f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a4:	f001 f872 	bl	800218c <MX_TIM3_Init>
  MX_TIM1_Init();
 80010a8:	f000 ffd4 	bl	8002054 <MX_TIM1_Init>
  MX_TIM4_Init();
 80010ac:	f001 f8bc 	bl	8002228 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  set_status_flag(PMNC_BIT_POS);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fb07 	bl	80016c4 <set_status_flag>
  set_status_flag(THMNC_BIT_POS);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fb04 	bl	80016c4 <set_status_flag>

  TIM_GET_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <main+0x98>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f06f 0201 	mvn.w	r2, #1
 80010c4:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <main+0x9c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f06f 0201 	mvn.w	r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <main+0xa0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f06f 0201 	mvn.w	r2, #1
 80010d8:	611a      	str	r2, [r3, #16]
  TIM_GET_CLEAR_IT(&htim4,TIM_IT_UPDATE);
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <main+0xa4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f06f 0201 	mvn.w	r2, #1
 80010e2:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <main+0xa0>)
 80010e6:	f004 feb9 	bl	8005e5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <main+0xa4>)
 80010ec:	f004 feb6 	bl	8005e5c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80010f0:	480e      	ldr	r0, [pc, #56]	; (800112c <main+0xa8>)
 80010f2:	f001 fac3 	bl	800267c <HAL_ADC_Start_IT>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2025      	movs	r0, #37	; 0x25
 80010fc:	f001 ffd5 	bl	80030aa <HAL_NVIC_SetPriority>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		sht3x_read_temperature_and_humidity(&hi2c1, &sht31, &unn, usRegInputBuf);
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <main+0xac>)
 8001102:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <main+0xb0>)
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <main+0xb4>)
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <main+0xb8>)
 8001108:	f000 fd14 	bl	8001b34 <sht3x_read_temperature_and_humidity>
		Get_Pressure_Value(&adc_struct);
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <main+0xbc>)
 800110e:	f000 fa07 	bl	8001520 <Get_Pressure_Value>
		data_exchange(&uart);
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <main+0xc0>)
 8001114:	f000 f878 	bl	8001208 <data_exchange>
		sht3x_read_temperature_and_humidity(&hi2c1, &sht31, &unn, usRegInputBuf);
 8001118:	e7f2      	b.n	8001100 <main+0x7c>
 800111a:	bf00      	nop
 800111c:	200003a0 	.word	0x200003a0
 8001120:	200003e8 	.word	0x200003e8
 8001124:	20000430 	.word	0x20000430
 8001128:	20000478 	.word	0x20000478
 800112c:	2000023c 	.word	0x2000023c
 8001130:	200002dc 	.word	0x200002dc
 8001134:	200002f0 	.word	0x200002f0
 8001138:	200002f4 	.word	0x200002f4
 800113c:	20000284 	.word	0x20000284
 8001140:	20000364 	.word	0x20000364
 8001144:	20000000 	.word	0x20000000

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 0320 	add.w	r3, r7, #32
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f006 fa56 	bl	8007608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <SystemClock_Config+0xb8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <SystemClock_Config+0xb8>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <SystemClock_Config+0xb8>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <SystemClock_Config+0xbc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <SystemClock_Config+0xbc>)
 8001196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <SystemClock_Config+0xbc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 f9a6 	bl	800550c <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011c6:	f000 fcaf 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011ce:	2301      	movs	r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fc07 	bl	80059fc <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011f4:	f000 fc98 	bl	8001b28 <Error_Handler>
  }
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <data_exchange>:

/* USER CODE BEGIN 4 */

void data_exchange(struct Uart *RxTx) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	switch (RxTx->state) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001216:	2b03      	cmp	r3, #3
 8001218:	d876      	bhi.n	8001308 <data_exchange+0x100>
 800121a:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <data_exchange+0x18>)
 800121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001220:	08001231 	.word	0x08001231
 8001224:	080012d1 	.word	0x080012d1
 8001228:	08001259 	.word	0x08001259
 800122c:	080012c1 	.word	0x080012c1

	case start_uart_receive_data:

		if(UART_Start_Receive_IT(&huart1, uart.p_uart_inbuf++, 1)==HAL_OK){
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <data_exchange+0x108>)
 8001232:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	4935      	ldr	r1, [pc, #212]	; (8001310 <data_exchange+0x108>)
 800123a:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 800123e:	2201      	movs	r2, #1
 8001240:	4619      	mov	r1, r3
 8001242:	4834      	ldr	r0, [pc, #208]	; (8001314 <data_exchange+0x10c>)
 8001244:	f005 fd70 	bl	8006d28 <UART_Start_Receive_IT>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d157      	bne.n	80012fe <data_exchange+0xf6>

			RxTx->state = check_received_data;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		};

		break;
 8001256:	e052      	b.n	80012fe <data_exchange+0xf6>

	case check_received_data:

		if (RxTx->rx_done_flag) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d050      	beq.n	8001302 <data_exchange+0xfa>
			RxTx->rx_done_flag = false;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			RxTx->p_uart_inbuf = RxTx->uart_inbuf;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1cda      	adds	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			if ((Check_Uart_inbuff(RxTx) == 0)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 fa59 	bl	8001728 <Check_Uart_inbuff>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d109      	bne.n	8001290 <data_exchange+0x88>
					&& (RxTx->uart_inbuf[0] == DEV_ADDR)) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	2240      	movs	r2, #64	; 0x40
 8001282:	4293      	cmp	r3, r2
 8001284:	d104      	bne.n	8001290 <data_exchange+0x88>
				RxTx->state = modbus_functions;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 800128e:	e006      	b.n	800129e <data_exchange+0x96>
			} else {

				HAL_TIM_Base_Stop_IT(&htim2);
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <data_exchange+0x110>)
 8001292:	f004 fe45 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
				RxTx->state = start_uart_receive_data;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			}
			FE_Error = 0;
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <data_exchange+0x114>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
			OE_Error = 0;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <data_exchange+0x118>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
			PE_Error = 0;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <data_exchange+0x11c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
			NE_Error = 0;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <data_exchange+0x120>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
			RxTx->receive_byte = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
//				RxTx->p_uart_inbuf = RxTx->uart_inbuf;
//
//			RxTx->state = start_uart_receive_data;
//		}

		break;
 80012be:	e020      	b.n	8001302 <data_exchange+0xfa>

	case modbus_functions:
		modbus_function(RxTx);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f833 	bl	800132c <modbus_function>
		RxTx->state = start_uart_transmit_data;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		break;
 80012ce:	e01b      	b.n	8001308 <data_exchange+0x100>

	case start_uart_transmit_data:

		if (RxTx->tx_ready_flag == true) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <data_exchange+0xfe>
			RxTx->tx_ready_flag = false;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit_IT(&huart1, RxTx->uart_outbuf,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f203 1103 	addw	r1, r3, #259	; 0x103
					RxTx->byte_to_send);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3211 	ldrb.w	r3, [r3, #529]	; 0x211
			HAL_UART_Transmit_IT(&huart1, RxTx->uart_outbuf,
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4809      	ldr	r0, [pc, #36]	; (8001314 <data_exchange+0x10c>)
 80012f0:	f005 fa2f 	bl	8006752 <HAL_UART_Transmit_IT>
			RxTx->state = start_uart_receive_data;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212

		}
		break;
 80012fc:	e003      	b.n	8001306 <data_exchange+0xfe>
		break;
 80012fe:	bf00      	nop
 8001300:	e002      	b.n	8001308 <data_exchange+0x100>
		break;
 8001302:	bf00      	nop
 8001304:	e000      	b.n	8001308 <data_exchange+0x100>
		break;
 8001306:	bf00      	nop

	}

}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	200004c0 	.word	0x200004c0
 8001318:	200003e8 	.word	0x200003e8
 800131c:	200002e8 	.word	0x200002e8
 8001320:	200002e9 	.word	0x200002e9
 8001324:	200002ea 	.word	0x200002ea
 8001328:	200002eb 	.word	0x200002eb

0800132c <modbus_function>:

void modbus_function(struct Uart *RxTx) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

////////////////READ_INPUT_REGISTERS//////////////////
	if (RxTx->uart_inbuf[1] == FC_RD_INPUT_RG) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	791b      	ldrb	r3, [r3, #4]
 8001338:	2204      	movs	r2, #4
 800133a:	4293      	cmp	r3, r2
 800133c:	d124      	bne.n	8001388 <modbus_function+0x5c>

		unn.ch_val[1] = RxTx->uart_inbuf[2];
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	795a      	ldrb	r2, [r3, #5]
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <modbus_function+0x10c>)
 8001344:	705a      	strb	r2, [r3, #1]
		unn.ch_val[0] = RxTx->uart_inbuf[3];
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	799a      	ldrb	r2, [r3, #6]
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <modbus_function+0x10c>)
 800134c:	701a      	strb	r2, [r3, #0]
		wreq_addr = unn.w_val;
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <modbus_function+0x10c>)
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <modbus_function+0x110>)
 8001354:	801a      	strh	r2, [r3, #0]
		unn.ch_val[1] = RxTx->uart_inbuf[4];
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	79da      	ldrb	r2, [r3, #7]
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <modbus_function+0x10c>)
 800135c:	705a      	strb	r2, [r3, #1]
		unn.ch_val[0] = RxTx->uart_inbuf[5];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7a1a      	ldrb	r2, [r3, #8]
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <modbus_function+0x10c>)
 8001364:	701a      	strb	r2, [r3, #0]
		wreq_dt = unn.w_val;
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <modbus_function+0x10c>)
 8001368:	881a      	ldrh	r2, [r3, #0]
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <modbus_function+0x114>)
 800136c:	801a      	strh	r2, [r3, #0]
		exception = ReadInputReg(RxTx, wreq_addr, wreq_dt);
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <modbus_function+0x110>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	4a33      	ldr	r2, [pc, #204]	; (8001440 <modbus_function+0x114>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	b212      	sxth	r2, r2
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f864 	bl	8001448 <ReadInputReg>
 8001380:	4603      	mov	r3, r0
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <modbus_function+0x118>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e003      	b.n	8001390 <modbus_function+0x64>

	} else {

		exception = EXCEPTION_CODE1;
 8001388:	2301      	movs	r3, #1
 800138a:	461a      	mov	r2, r3
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <modbus_function+0x118>)
 800138e:	601a      	str	r2, [r3, #0]
	}
////////////////END_READ_INPUT_REGISTERS//////////////////
	if (exception) {
 8001390:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <modbus_function+0x118>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <modbus_function+0xae>

		RxTx->uart_outbuf[0] = DEV_ADDR;
 8001398:	2240      	movs	r2, #64	; 0x40
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		RxTx->uart_outbuf[1] = RxTx->uart_inbuf[1] | 0x80;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		RxTx->uart_outbuf[2] = exception;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <modbus_function+0x118>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		crc16_out(0x3, RxTx->uart_outbuf);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f203 1303 	addw	r3, r3, #259	; 0x103
 80013c2:	4619      	mov	r1, r3
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 fa59 	bl	800187c <crc16_out>
		RxTx->byte_to_send = 5;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2205      	movs	r2, #5
 80013ce:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
		exception = 0;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <modbus_function+0x118>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		RxTx->byte_to_send = (wreq_dt << 1) + FC_04_HLENGTH_WITH_CRC;
		crc16_out((wreq_dt << 1) + FC_04_HLENGTH_WITHOUT_CRC,RxTx->uart_outbuf);

	}

}
 80013d8:	e02a      	b.n	8001430 <modbus_function+0x104>
		RxTx->uart_outbuf[0] = DEV_ADDR;
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
		RxTx->uart_outbuf[1] = RxTx->uart_inbuf[1];
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	791a      	ldrb	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
		RxTx->uart_outbuf[2] = wreq_dt << 1;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <modbus_function+0x114>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
		RxTx->byte_to_send = (wreq_dt << 1) + FC_04_HLENGTH_WITH_CRC;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <modbus_function+0x114>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2205      	movs	r2, #5
 8001408:	4413      	add	r3, r2
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
		crc16_out((wreq_dt << 1) + FC_04_HLENGTH_WITHOUT_CRC,RxTx->uart_outbuf);
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <modbus_function+0x114>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2203      	movs	r2, #3
 800141e:	4413      	add	r3, r2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f203 1303 	addw	r3, r3, #259	; 0x103
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f000 fa26 	bl	800187c <crc16_out>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200002f0 	.word	0x200002f0
 800143c:	200002e4 	.word	0x200002e4
 8001440:	200002e6 	.word	0x200002e6
 8001444:	200002ec 	.word	0x200002ec

08001448 <ReadInputReg>:

int ReadInputReg(struct Uart *RxTx, unsigned short usAddress,signed short sNRegs) {
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	803b      	strh	r3, [r7, #0]

	int iRegIndex = 0x0;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	int RegBufferIndex = 0x3;
 800145c:	2303      	movs	r3, #3
 800145e:	60bb      	str	r3, [r7, #8]

	if ((sNRegs >= 0x0001) && (sNRegs <= REG_INPUT_NREGS)) {
 8001460:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dd47      	ble.n	80014f8 <ReadInputReg+0xb0>
 8001468:	f9b7 3000 	ldrsh.w	r3, [r7]
 800146c:	2204      	movs	r2, #4
 800146e:	4293      	cmp	r3, r2
 8001470:	dc42      	bgt.n	80014f8 <ReadInputReg+0xb0>

		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 8001472:	2200      	movs	r2, #0
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4293      	cmp	r3, r2
 8001478:	d339      	bcc.n	80014ee <ReadInputReg+0xa6>
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001480:	441a      	add	r2, r3
 8001482:	2300      	movs	r3, #0
 8001484:	4619      	mov	r1, r3
 8001486:	2304      	movs	r3, #4
 8001488:	440b      	add	r3, r1
 800148a:	429a      	cmp	r2, r3
 800148c:	dc2f      	bgt.n	80014ee <ReadInputReg+0xa6>
			iRegIndex = (int) (usAddress - usRegInputStart);
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4a1f      	ldr	r2, [pc, #124]	; (8001510 <ReadInputReg+0xc8>)
 8001492:	8812      	ldrh	r2, [r2, #0]
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	60fb      	str	r3, [r7, #12]
			while (sNRegs > 0) {
 8001498:	e024      	b.n	80014e4 <ReadInputReg+0x9c>
				RxTx->p_uart_outbuf[RegBufferIndex++] = (uint8_t) (usRegInputBuf[iRegIndex] >> 8);
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <ReadInputReg+0xcc>)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80014a2:	121b      	asrs	r3, r3, #8
 80014a4:	b218      	sxth	r0, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c59      	adds	r1, r3, #1
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	b2c2      	uxtb	r2, r0
 80014b6:	701a      	strb	r2, [r3, #0]
				RxTx->p_uart_outbuf[RegBufferIndex++] = (uint8_t) (usRegInputBuf[iRegIndex] & 0xFF);
 80014b8:	4a16      	ldr	r2, [pc, #88]	; (8001514 <ReadInputReg+0xcc>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1c59      	adds	r1, r3, #1
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	4413      	add	r3, r2
 80014ce:	b2c2      	uxtb	r2, r0
 80014d0:	701a      	strb	r2, [r3, #0]
				iRegIndex++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3301      	adds	r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
				sNRegs--;
 80014d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	803b      	strh	r3, [r7, #0]
			while (sNRegs > 0) {
 80014e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dcd6      	bgt.n	800149a <ReadInputReg+0x52>
		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 80014ec:	e008      	b.n	8001500 <ReadInputReg+0xb8>

		else

		{

			exception = EXCEPTION_CODE2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <ReadInputReg+0xd0>)
 80014f4:	601a      	str	r2, [r3, #0]
		if ((usAddress >= REG_INPUT_START) && (usAddress + sNRegs <= REG_INPUT_START + REG_INPUT_NREGS)) {
 80014f6:	e003      	b.n	8001500 <ReadInputReg+0xb8>
		}
	}

	else {

		exception = EXCEPTION_CODE3;
 80014f8:	2303      	movs	r3, #3
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <ReadInputReg+0xd0>)
 80014fe:	601a      	str	r2, [r3, #0]
	}

	return exception;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <ReadInputReg+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	200002d8 	.word	0x200002d8
 8001514:	200002dc 	.word	0x200002dc
 8001518:	200002ec 	.word	0x200002ec
 800151c:	00000000 	.word	0x00000000

08001520 <Get_Pressure_Value>:


float Get_Pressure_Value(struct Adc *adc_s) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	if (adc_s->adc_data_ready) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800152e:	2b00      	cmp	r3, #0
 8001530:	d07a      	beq.n	8001628 <Get_Pressure_Value+0x108>
		adc_s->adc_data_ready = false;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		adc_s->adc_val = get_filtred_data(adc_s->adc, ADC_FILTR_WINDOW);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	210a      	movs	r1, #10
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f890 	bl	8001664 <get_filtred_data>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		adc_s->voltage = adc_s->adc_val * 3.3 / 4096;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffa4 	bl	80004a0 <__aeabi_f2d>
 8001558:	a339      	add	r3, pc, #228	; (adr r3, 8001640 <Get_Pressure_Value+0x120>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe fff7 	bl	8000550 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <Get_Pressure_Value+0x138>)
 8001570:	f7ff f918 	bl	80007a4 <__aeabi_ddiv>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff f9fa 	bl	8000974 <__aeabi_d2f>
 8001580:	4602      	mov	r2, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
		adc_s->pressure = (adc_s->voltage / 3.3 + 0.00842) / 0.002421;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff88 	bl	80004a0 <__aeabi_f2d>
 8001590:	a32b      	add	r3, pc, #172	; (adr r3, 8001640 <Get_Pressure_Value+0x120>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f905 	bl	80007a4 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	a329      	add	r3, pc, #164	; (adr r3, 8001648 <Get_Pressure_Value+0x128>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7fe fe1c 	bl	80001e4 <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	a326      	add	r3, pc, #152	; (adr r3, 8001650 <Get_Pressure_Value+0x130>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f8f3 	bl	80007a4 <__aeabi_ddiv>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff f9d5 	bl	8000974 <__aeabi_d2f>
 80015ca:	4602      	mov	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38

		usRegInputBuf[1] = adc_s->pressure*10;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	b21a      	sxth	r2, r3
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Get_Pressure_Value+0x13c>)
 80015ea:	805a      	strh	r2, [r3, #2]
		reset_status_flag(PMNC_BIT_POS);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f881 	bl	80016f4 <reset_status_flag>

		if (adc_s->pressure > MAX_PRESS || adc_s->pressure < MIN_PRESS){
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001660 <Get_Pressure_Value+0x140>
 80015fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001604:	dc09      	bgt.n	800161a <Get_Pressure_Value+0xfa>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800160c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d503      	bpl.n	8001622 <Get_Pressure_Value+0x102>

			set_status_flag(POL_BIT_POS);
 800161a:	2003      	movs	r0, #3
 800161c:	f000 f852 	bl	80016c4 <set_status_flag>
 8001620:	e002      	b.n	8001628 <Get_Pressure_Value+0x108>
		}
		else
		{
			reset_status_flag(POL_BIT_POS);
 8001622:	2003      	movs	r0, #3
 8001624:	f000 f866 	bl	80016f4 <reset_status_flag>



	}

	return adc_s->adc_val;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	ee07 3a90 	vmov	s15, r3
}
 8001630:	eeb0 0a67 	vmov.f32	s0, s15
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	66666666 	.word	0x66666666
 8001644:	400a6666 	.word	0x400a6666
 8001648:	450efdca 	.word	0x450efdca
 800164c:	3f813e81 	.word	0x3f813e81
 8001650:	7a5b0ff1 	.word	0x7a5b0ff1
 8001654:	3f63d534 	.word	0x3f63d534
 8001658:	40b00000 	.word	0x40b00000
 800165c:	200002dc 	.word	0x200002dc
 8001660:	43cb0000 	.word	0x43cb0000

08001664 <get_filtred_data>:



float get_filtred_data(float *buff,int window) {
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]

	float sum = 0;
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < window; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	e00e      	b.n	8001698 <get_filtred_data+0x34>

		sum += buff[i];
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ed97 7a03 	vldr	s14, [r7, #12]
 800168a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < window; i++) {
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbec      	blt.n	800167a <get_filtred_data+0x16>
	}
	return sum / window;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016b2:	eef0 7a66 	vmov.f32	s15, s13

}
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <set_status_flag>:



void set_status_flag(int flag_pos){
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

	usRegInputBuf[0] |= 1<<flag_pos;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <set_status_flag+0x2c>)
 80016ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016d2:	2101      	movs	r1, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	b21b      	sxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b21a      	sxth	r2, r3
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <set_status_flag+0x2c>)
 80016e2:	801a      	strh	r2, [r3, #0]

}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	200002dc 	.word	0x200002dc

080016f4 <reset_status_flag>:

void reset_status_flag(int flag_pos){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

	usRegInputBuf[0] &= ~(1<<flag_pos);
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <reset_status_flag+0x30>)
 80016fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001702:	2101      	movs	r1, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	b21b      	sxth	r3, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	b21b      	sxth	r3, r3
 8001710:	4013      	ands	r3, r2
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <reset_status_flag+0x30>)
 8001716:	801a      	strh	r2, [r3, #0]

}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	200002dc 	.word	0x200002dc

08001728 <Check_Uart_inbuff>:



signed char Check_Uart_inbuff(struct Uart *RxTx) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

	if (RxTx->receive_byte >= ADU_MAX) {
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	429a      	cmp	r2, r3
 800173e:	d302      	bcc.n	8001746 <Check_Uart_inbuff+0x1e>

		return -4;
 8001740:	f06f 0303 	mvn.w	r3, #3
 8001744:	e02c      	b.n	80017a0 <Check_Uart_inbuff+0x78>
	}

	if (RxTx->receive_byte < ADU_MIN) {
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 800174c:	461a      	mov	r2, r3
 800174e:	2305      	movs	r3, #5
 8001750:	429a      	cmp	r2, r3
 8001752:	d202      	bcs.n	800175a <Check_Uart_inbuff+0x32>

		return -3;
 8001754:	f06f 0302 	mvn.w	r3, #2
 8001758:	e022      	b.n	80017a0 <Check_Uart_inbuff+0x78>
	}

	if (FE_Error || OE_Error || PE_Error||NE_Error) {
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <Check_Uart_inbuff+0x80>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10b      	bne.n	800177a <Check_Uart_inbuff+0x52>
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <Check_Uart_inbuff+0x84>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <Check_Uart_inbuff+0x52>
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <Check_Uart_inbuff+0x88>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <Check_Uart_inbuff+0x52>
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <Check_Uart_inbuff+0x8c>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <Check_Uart_inbuff+0x58>

		return -2;
 800177a:	f06f 0301 	mvn.w	r3, #1
 800177e:	e00f      	b.n	80017a0 <Check_Uart_inbuff+0x78>
	}

	if (crc16in(RxTx->receive_byte, RxTx->uart_inbuf) != 0) {
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3303      	adds	r3, #3
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f000 f813 	bl	80017b8 <crc16in>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <Check_Uart_inbuff+0x76>

		return -1;
 8001798:	f04f 33ff 	mov.w	r3, #4294967295
 800179c:	e000      	b.n	80017a0 <Check_Uart_inbuff+0x78>
	}

	return 0;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002e8 	.word	0x200002e8
 80017ac:	200002e9 	.word	0x200002e9
 80017b0:	200002ea 	.word	0x200002ea
 80017b4:	200002eb 	.word	0x200002eb

080017b8 <crc16in>:

char crc16in(unsigned char size, unsigned char *inbuf) {
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
	unsigned short w = 0xffff, w1;
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	82fb      	strh	r3, [r7, #22]
	char shift_cnt, jj;
	unsigned short ii1 = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	827b      	strh	r3, [r7, #18]
	union {
		char c[2];
		unsigned short w;
	} u;

	size = size - 2;
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	3b02      	subs	r3, #2
 80017d2:	71fb      	strb	r3, [r7, #7]
	u.c[0] = inbuf[size];
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	733b      	strb	r3, [r7, #12]
	u.c[1] = inbuf[size + 1];
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3301      	adds	r3, #1
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	737b      	strb	r3, [r7, #13]
	jj = size;
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	753b      	strb	r3, [r7, #20]

	for (; jj > 0; jj--) {
 80017ee:	e032      	b.n	8001856 <crc16in+0x9e>
		w1 = (w >> 8) << 8;
 80017f0:	8afb      	ldrh	r3, [r7, #22]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	823b      	strh	r3, [r7, #16]
		w = (w1 + ((w - w1) ^ (unsigned short) inbuf[ii1++]));
 80017fa:	8afa      	ldrh	r2, [r7, #22]
 80017fc:	8a3b      	ldrh	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21a      	sxth	r2, r3
 8001804:	8a7b      	ldrh	r3, [r7, #18]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	8279      	strh	r1, [r7, #18]
 800180a:	4619      	mov	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4053      	eors	r3, r2
 8001816:	b21b      	sxth	r3, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	8a3b      	ldrh	r3, [r7, #16]
 800181c:	4413      	add	r3, r2
 800181e:	82fb      	strh	r3, [r7, #22]

		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 8001820:	2300      	movs	r3, #0
 8001822:	757b      	strb	r3, [r7, #21]
 8001824:	e011      	b.n	800184a <crc16in+0x92>
			if ((w & 0x01) == 1)
 8001826:	8afb      	ldrh	r3, [r7, #22]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <crc16in+0x86>
				w = ((w >> 1) ^ 0xa001);
 8001830:	8afb      	ldrh	r3, [r7, #22]
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <crc16in+0xc0>)
 8001838:	4053      	eors	r3, r2
 800183a:	82fb      	strh	r3, [r7, #22]
 800183c:	e002      	b.n	8001844 <crc16in+0x8c>
			else
				w >>= 1;
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	82fb      	strh	r3, [r7, #22]
		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 8001844:	7d7b      	ldrb	r3, [r7, #21]
 8001846:	3301      	adds	r3, #1
 8001848:	757b      	strb	r3, [r7, #21]
 800184a:	7d7b      	ldrb	r3, [r7, #21]
 800184c:	2b07      	cmp	r3, #7
 800184e:	d9ea      	bls.n	8001826 <crc16in+0x6e>
	for (; jj > 0; jj--) {
 8001850:	7d3b      	ldrb	r3, [r7, #20]
 8001852:	3b01      	subs	r3, #1
 8001854:	753b      	strb	r3, [r7, #20]
 8001856:	7d3b      	ldrb	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1c9      	bne.n	80017f0 <crc16in+0x38>
		}
	}

	if (w == u.w)
 800185c:	89bb      	ldrh	r3, [r7, #12]
 800185e:	8afa      	ldrh	r2, [r7, #22]
 8001860:	429a      	cmp	r2, r3
 8001862:	d101      	bne.n	8001868 <crc16in+0xb0>
		return 0;
 8001864:	2300      	movs	r3, #0
 8001866:	e000      	b.n	800186a <crc16in+0xb2>
	else
		return (char) -1;
 8001868:	23ff      	movs	r3, #255	; 0xff
}
 800186a:	4618      	mov	r0, r3
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	ffffa001 	.word	0xffffa001

0800187c <crc16_out>:


void crc16_out(unsigned char size, unsigned char *outbuf) {
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
	unsigned short w = 0xffff, w1;
 8001888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800188c:	81fb      	strh	r3, [r7, #14]
	char shift_cnt, jj;
	unsigned short ii2 = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	817b      	strh	r3, [r7, #10]

	jj = size;
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	733b      	strb	r3, [r7, #12]

	for (; jj > 0; jj--) {
 8001896:	e032      	b.n	80018fe <crc16_out+0x82>
		w1 = (w >> 8) << 8;
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	813b      	strh	r3, [r7, #8]
		w = (w1 + ((w - w1) ^ (unsigned short) outbuf[ii2++]));
 80018a2:	89fa      	ldrh	r2, [r7, #14]
 80018a4:	893b      	ldrh	r3, [r7, #8]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	8179      	strh	r1, [r7, #10]
 80018b2:	4619      	mov	r1, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	440b      	add	r3, r1
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	4053      	eors	r3, r2
 80018be:	b21b      	sxth	r3, r3
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	893b      	ldrh	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	81fb      	strh	r3, [r7, #14]

		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	737b      	strb	r3, [r7, #13]
 80018cc:	e011      	b.n	80018f2 <crc16_out+0x76>
			if ((w & 0x01) == 1)
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <crc16_out+0x6a>
				w = ((w >> 1) ^ 0xa001);
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <crc16_out+0xb8>)
 80018e0:	4053      	eors	r3, r2
 80018e2:	81fb      	strh	r3, [r7, #14]
 80018e4:	e002      	b.n	80018ec <crc16_out+0x70>
			else
				w >>= 1;
 80018e6:	89fb      	ldrh	r3, [r7, #14]
 80018e8:	085b      	lsrs	r3, r3, #1
 80018ea:	81fb      	strh	r3, [r7, #14]
		for (shift_cnt = 0; shift_cnt < 8; shift_cnt++) {
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	3301      	adds	r3, #1
 80018f0:	737b      	strb	r3, [r7, #13]
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	d9ea      	bls.n	80018ce <crc16_out+0x52>
	for (; jj > 0; jj--) {
 80018f8:	7b3b      	ldrb	r3, [r7, #12]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	733b      	strb	r3, [r7, #12]
 80018fe:	7b3b      	ldrb	r3, [r7, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1c9      	bne.n	8001898 <crc16_out+0x1c>
		}
	}

	outbuf[size++] = (char) (w & 0x00ff);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	71fa      	strb	r2, [r7, #7]
 800190a:	461a      	mov	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4413      	add	r3, r2
 8001910:	89fa      	ldrh	r2, [r7, #14]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]
	outbuf[size] = (char) (w >> 8);
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b299      	uxth	r1, r3
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	b2ca      	uxtb	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	ffffa001 	.word	0xffffa001

08001938 <HAL_I2C_MemRxCpltCallback>:





void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

	if(hi2c == &hi2c1){
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d103      	bne.n	8001950 <HAL_I2C_MemRxCpltCallback+0x18>

		sht31.rx_done_flag = true;
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_I2C_MemRxCpltCallback+0x28>)
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

	}

}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000284 	.word	0x20000284
 8001960:	200002f4 	.word	0x200002f4

08001964 <HAL_I2C_ErrorCallback>:



HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

	I2C_Deinit();
 800196c:	f000 fa0e 	bl	8001d8c <I2C_Deinit>

}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_ADC_ConvCpltCallback+0x50>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d11b      	bne.n	80019c0 <HAL_ADC_ConvCpltCallback+0x48>

		adc_struct.adc[adc_struct.adc_counter++] = HAL_ADC_GetValue(&hadc1);
 8001988:	480f      	ldr	r0, [pc, #60]	; (80019c8 <HAL_ADC_ConvCpltCallback+0x50>)
 800198a:	f001 f845 	bl	8002a18 <HAL_ADC_GetValue>
 800198e:	ee07 0a90 	vmov	s15, r0
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 800199a:	62ca      	str	r2, [r1, #44]	; 0x2c
 800199c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	edc3 7a00 	vstr	s15, [r3]
		adc_struct.adc_data_ready = true;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		if (adc_struct.adc_counter == 10) {
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d102      	bne.n	80019c0 <HAL_ADC_ConvCpltCallback+0x48>
			adc_struct.adc_counter = 0;
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <HAL_ADC_ConvCpltCallback+0x54>)
 80019bc:	2200      	movs	r2, #0
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
		}

	}

}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000023c 	.word	0x2000023c
 80019cc:	20000364 	.word	0x20000364

080019d0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_UART_TxCpltCallback+0x24>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d102      	bne.n	80019e6 <HAL_UART_TxCpltCallback+0x16>
		uart.tx_done_flag = true;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_UART_TxCpltCallback+0x28>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	705a      	strb	r2, [r3, #1]

	}
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200004c0 	.word	0x200004c0
 80019f8:	20000000 	.word	0x20000000

080019fc <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_UART_RxCpltCallback+0x78>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d12e      	bne.n	8001a6a <HAL_UART_RxCpltCallback+0x6e>

		HAL_TIM_Base_Stop_IT(&htim1);
 8001a0c:	481a      	ldr	r0, [pc, #104]	; (8001a78 <HAL_UART_RxCpltCallback+0x7c>)
 8001a0e:	f004 fa87 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001a12:	481a      	ldr	r0, [pc, #104]	; (8001a7c <HAL_UART_RxCpltCallback+0x80>)
 8001a14:	f004 fa84 	bl	8005f20 <HAL_TIM_Base_Stop_IT>

		__HAL_TIM_SetCounter(&htim1,0x0);
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_UART_RxCpltCallback+0x7c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim2,0x0);
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_UART_RxCpltCallback+0x80>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_Base_Start_IT(&htim1);
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <HAL_UART_RxCpltCallback+0x7c>)
 8001a2a:	f004 fa17 	bl	8005e5c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim2);
 8001a2e:	4813      	ldr	r0, [pc, #76]	; (8001a7c <HAL_UART_RxCpltCallback+0x80>)
 8001a30:	f004 fa14 	bl	8005e5c <HAL_TIM_Base_Start_IT>

		uart.uart_ecode = HAL_UART_GetError(&huart1);
 8001a34:	480f      	ldr	r0, [pc, #60]	; (8001a74 <HAL_UART_RxCpltCallback+0x78>)
 8001a36:	f005 f96b 	bl	8006d10 <HAL_UART_GetError>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_UART_RxCpltCallback+0x84>)
 8001a3e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		uart.receive_byte++;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_UART_RxCpltCallback+0x84>)
 8001a44:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_UART_RxCpltCallback+0x84>)
 8001a4e:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
		UART_Start_Receive_IT(&huart1, uart.p_uart_inbuf++, 1);
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_UART_RxCpltCallback+0x84>)
 8001a54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	4909      	ldr	r1, [pc, #36]	; (8001a80 <HAL_UART_RxCpltCallback+0x84>)
 8001a5c:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8001a60:	2201      	movs	r2, #1
 8001a62:	4619      	mov	r1, r3
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <HAL_UART_RxCpltCallback+0x78>)
 8001a66:	f005 f95f 	bl	8006d28 <UART_Start_Receive_IT>



	}

}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200004c0 	.word	0x200004c0
 8001a78:	200003a0 	.word	0x200003a0
 8001a7c:	200003e8 	.word	0x200003e8
 8001a80:	20000000 	.word	0x20000000

08001a84 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

	if (huart == &huart1) {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a20      	ldr	r2, [pc, #128]	; (8001b10 <HAL_UART_ErrorCallback+0x8c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d136      	bne.n	8001b02 <HAL_UART_ErrorCallback+0x7e>

		if (uart.uart_ecode & UART_FLAG_FE) {
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_UART_ErrorCallback+0x90>)
 8001a96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_UART_ErrorCallback+0x24>

			FE_Error = true;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_UART_ErrorCallback+0x94>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
		}
		if (uart.uart_ecode & UART_FLAG_PE) {
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_UART_ErrorCallback+0x90>)
 8001aaa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_UART_ErrorCallback+0x38>

			PE_Error = true;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_UART_ErrorCallback+0x98>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
		}
		if (uart.uart_ecode & UART_FLAG_ORE) {
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_ErrorCallback+0x90>)
 8001abe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001ac2:	f003 0308 	and.w	r3, r3, #8
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_UART_ErrorCallback+0x62>

			OE_Error = true;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_UART_ErrorCallback+0x9c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
			__HAL_UART_CLEAR_OREFLAG(&huart1);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_UART_ErrorCallback+0x8c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_UART_ErrorCallback+0x8c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
		}
		if (uart.uart_ecode &  USART_SR_NE ){
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_UART_ErrorCallback+0x90>)
 8001ae8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_UART_ErrorCallback+0x76>

			NE_Error = true;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_UART_ErrorCallback+0xa0>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
		}
		uart.uart_ecode = 0;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_UART_ErrorCallback+0x90>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	}
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200004c0 	.word	0x200004c0
 8001b14:	20000000 	.word	0x20000000
 8001b18:	200002e8 	.word	0x200002e8
 8001b1c:	200002ea 	.word	0x200002ea
 8001b20:	200002e9 	.word	0x200002e9
 8001b24:	200002eb 	.word	0x200002eb

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b30:	e7fe      	b.n	8001b30 <Error_Handler+0x8>
	...

08001b34 <sht3x_read_temperature_and_humidity>:

}


bool sht3x_read_temperature_and_humidity(I2C_HandleTypeDef *hi2c, struct sht31_struct* sht,union unn_t *unn, signed short *RegBuff )
 {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	if (sht->i2c_start_flag){
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d019      	beq.n	8001b80 <sht3x_read_temperature_and_humidity+0x4c>

		sht->i2c_start_flag = false;
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		if (HAL_I2C_Mem_Read_IT(hi2c, I2C_DEV_ADDR<<1, START_SINGLE_SHOT_MODE, 0x2, sht->i2c_inbuff, 0x6) != HAL_OK){
 8001b54:	2344      	movs	r3, #68	; 0x44
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	f642 4006 	movw	r0, #11270	; 0x2c06
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2206      	movs	r2, #6
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2302      	movs	r3, #2
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f001 ff48 	bl	8003a00 <HAL_I2C_Mem_Read_IT>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <sht3x_read_temperature_and_humidity+0x4c>
			set_status_flag(IICE_BIT_POS);
 8001b76:	2006      	movs	r0, #6
 8001b78:	f7ff fda4 	bl	80016c4 <set_status_flag>
			I2C_Deinit();
 8001b7c:	f000 f906 	bl	8001d8c <I2C_Deinit>
		};

	}
 	if(sht->rx_done_flag){
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 80ec 	beq.w	8001d64 <sht3x_read_temperature_and_humidity+0x230>
 		reset_status_flag(IICE_BIT_POS);
 8001b8c:	2006      	movs	r0, #6
 8001b8e:	f7ff fdb1 	bl	80016f4 <reset_status_flag>
 		sht->rx_done_flag = false;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

 	 	uint8_t temperature_crc = crc8(sht->i2c_inbuff, 2);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f924 	bl	8001dec <crc8>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	77fb      	strb	r3, [r7, #31]
 	 	uint8_t humidity_crc = crc8(sht->i2c_inbuff + 3, 2);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	3303      	adds	r3, #3
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f91c 	bl	8001dec <crc8>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	77bb      	strb	r3, [r7, #30]

 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	789b      	ldrb	r3, [r3, #2]
 8001bbc:	7ffa      	ldrb	r2, [r7, #31]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f040 80cb 	bne.w	8001d5a <sht3x_read_temperature_and_humidity+0x226>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	795b      	ldrb	r3, [r3, #5]
 8001bc8:	7fba      	ldrb	r2, [r7, #30]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	f040 80c5 	bne.w	8001d5a <sht3x_read_temperature_and_humidity+0x226>

 	 		unn->ch_val[1] = sht->i2c_inbuff[0];
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	705a      	strb	r2, [r3, #1]
			unn->ch_val[0] = sht->i2c_inbuff[1];
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	785a      	ldrb	r2, [r3, #1]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	701a      	strb	r2, [r3, #0]
			float temperature = unn->w_val;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bec:	edc7 7a06 	vstr	s15, [r7, #24]

			unn->ch_val[1] = sht->i2c_inbuff[3];
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	78da      	ldrb	r2, [r3, #3]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	705a      	strb	r2, [r3, #1]
			unn->ch_val[0] = sht->i2c_inbuff[4];
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	791a      	ldrb	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	701a      	strb	r2, [r3, #0]
			float humidity = unn->w_val;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0c:	edc7 7a05 	vstr	s15, [r7, #20]

			temperature = (-45.0f + 175.0f * temperature / 65535.0f)*10;
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001d70 <sht3x_read_temperature_and_humidity+0x23c>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001d74 <sht3x_read_temperature_and_humidity+0x240>
 8001c20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c24:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d78 <sht3x_read_temperature_and_humidity+0x244>
 8001c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c34:	edc7 7a06 	vstr	s15, [r7, #24]
			humidity = (100.0f * humidity / 65535.0f)*10;
 8001c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c3c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001d7c <sht3x_read_temperature_and_humidity+0x248>
 8001c40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c44:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001d74 <sht3x_read_temperature_and_humidity+0x240>
 8001c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c54:	edc7 7a05 	vstr	s15, [r7, #20]

			sht->temperature[sht->byte_counter] = temperature;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	601a      	str	r2, [r3, #0]
			sht->humidity[sht->byte_counter++] = humidity;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c6c:	1c59      	adds	r1, r3, #1
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	6651      	str	r1, [r2, #100]	; 0x64
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	330c      	adds	r3, #12
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	601a      	str	r2, [r3, #0]

			sht->average_temperature = get_filtred_data( sht->temperature, I2C_FILTR_WINDOW);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3308      	adds	r3, #8
 8001c82:	210a      	movs	r1, #10
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fced 	bl	8001664 <get_filtred_data>
 8001c8a:	eef0 7a40 	vmov.f32	s15, s0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			sht->average_humidity = get_filtred_data( sht->humidity, I2C_FILTR_WINDOW);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3330      	adds	r3, #48	; 0x30
 8001c98:	210a      	movs	r1, #10
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fce2 	bl	8001664 <get_filtred_data>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

			RegBuff[2] = sht->average_temperature;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb8:	ee17 2a90 	vmov	r2, s15
 8001cbc:	b212      	sxth	r2, r2
 8001cbe:	801a      	strh	r2, [r3, #0]
			RegBuff[3] = sht->average_humidity;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3306      	adds	r3, #6
 8001cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cce:	ee17 2a90 	vmov	r2, s15
 8001cd2:	b212      	sxth	r2, r2
 8001cd4:	801a      	strh	r2, [r3, #0]

			if (sht->byte_counter >= I2C_FILTR_WINDOW){
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cda:	2b09      	cmp	r3, #9
 8001cdc:	dd02      	ble.n	8001ce4 <sht3x_read_temperature_and_humidity+0x1b0>

		 	 		sht->byte_counter = 0;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	665a      	str	r2, [r3, #100]	; 0x64
		 	 	}

			reset_status_flag(THMNC_BIT_POS);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff fd05 	bl	80016f4 <reset_status_flag>
			reset_status_flag(CRCE_BIT_POS);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7ff fd02 	bl	80016f4 <reset_status_flag>

			if(sht->average_temperature > MAX_TEMP * 10 || sht->average_temperature < MIN_TEMP * 10)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001cf6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d80 <sht3x_read_temperature_and_humidity+0x24c>
 8001cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	dc09      	bgt.n	8001d18 <sht3x_read_temperature_and_humidity+0x1e4>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001d0a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001d84 <sht3x_read_temperature_and_humidity+0x250>
 8001d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d503      	bpl.n	8001d20 <sht3x_read_temperature_and_humidity+0x1ec>
				{
					set_status_flag(TOL_BIT_POS);
 8001d18:	2004      	movs	r0, #4
 8001d1a:	f7ff fcd3 	bl	80016c4 <set_status_flag>
 8001d1e:	e002      	b.n	8001d26 <sht3x_read_temperature_and_humidity+0x1f2>
				}
				else
				{
					reset_status_flag(TOL_BIT_POS);
 8001d20:	2004      	movs	r0, #4
 8001d22:	f7ff fce7 	bl	80016f4 <reset_status_flag>
				}

				if(sht->average_humidity >MAX_HUM * 10 || sht->average_humidity < MIN_HUM * 10)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d2c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001d88 <sht3x_read_temperature_and_humidity+0x254>
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	dc07      	bgt.n	8001d4a <sht3x_read_temperature_and_humidity+0x216>
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	d503      	bpl.n	8001d52 <sht3x_read_temperature_and_humidity+0x21e>
				{
					set_status_flag(HOL_BIT_POS);
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f7ff fcba 	bl	80016c4 <set_status_flag>
 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001d50:	e006      	b.n	8001d60 <sht3x_read_temperature_and_humidity+0x22c>
				}
				else
				{
					reset_status_flag(HOL_BIT_POS);
 8001d52:	2005      	movs	r0, #5
 8001d54:	f7ff fcce 	bl	80016f4 <reset_status_flag>
 	 	if (temperature_crc == sht->i2c_inbuff[2] && humidity_crc == sht->i2c_inbuff[5]) {
 8001d58:	e002      	b.n	8001d60 <sht3x_read_temperature_and_humidity+0x22c>

 	 	}
 	 	else
 	 	{

 	 		set_status_flag(CRCE_BIT_POS);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff fcb2 	bl	80016c4 <set_status_flag>
 	 	}



 	 	return true;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <sht3x_read_temperature_and_humidity+0x232>

 	}
return false;
 8001d64:	2300      	movs	r3, #0
 }
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	432f0000 	.word	0x432f0000
 8001d74:	477fff00 	.word	0x477fff00
 8001d78:	42340000 	.word	0x42340000
 8001d7c:	42c80000 	.word	0x42c80000
 8001d80:	449c4000 	.word	0x449c4000
 8001d84:	c3c80000 	.word	0xc3c80000
 8001d88:	447a0000 	.word	0x447a0000

08001d8c <I2C_Deinit>:


void I2C_Deinit(void){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim4);
 8001d90:	4814      	ldr	r0, [pc, #80]	; (8001de4 <I2C_Deinit+0x58>)
 8001d92:	f004 f8c5 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
	 __HAL_I2C_DISABLE(&hi2c1);
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <I2C_Deinit+0x5c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <I2C_Deinit+0x5c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

	TIM_GET_CLEAR_IT(&htim4,TIM_IT_UPDATE);
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <I2C_Deinit+0x58>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0201 	mvn.w	r2, #1
 8001dae:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SetCounter(&htim4,0x0);
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <I2C_Deinit+0x58>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_I2C_AbortCpltCallback(&hi2c1);
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <I2C_Deinit+0x5c>)
 8001dba:	f002 f941 	bl	8004040 <HAL_I2C_AbortCpltCallback>
	HAL_I2C_MspDeInit(&hi2c1);
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <I2C_Deinit+0x5c>)
 8001dc0:	f7ff f938 	bl	8001034 <HAL_I2C_MspDeInit>
	HAL_I2C_MspInit(&hi2c1);
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <I2C_Deinit+0x5c>)
 8001dc6:	f7ff f8dd 	bl	8000f84 <HAL_I2C_MspInit>
	__HAL_I2C_ENABLE(&hi2c1);
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <I2C_Deinit+0x5c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <I2C_Deinit+0x5c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim4);
 8001dda:	4802      	ldr	r0, [pc, #8]	; (8001de4 <I2C_Deinit+0x58>)
 8001ddc:	f004 f83e 	bl	8005e5c <HAL_TIM_Base_Start_IT>



}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000478 	.word	0x20000478
 8001de8:	20000284 	.word	0x20000284

08001dec <crc8>:

 unsigned char crc8(unsigned char *buff, unsigned int len)
 {
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
     unsigned char crc = 0xFF;
 8001df6:	23ff      	movs	r3, #255	; 0xff
 8001df8:	73fb      	strb	r3, [r7, #15]
     unsigned int i;

     while (len--)
 8001dfa:	e01f      	b.n	8001e3c <crc8+0x50>
     {
         crc ^= *buff++;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	4053      	eors	r3, r2
 8001e08:	73fb      	strb	r3, [r7, #15]

         for (i = 0; i < 8; i++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	e012      	b.n	8001e36 <crc8+0x4a>
             crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
 8001e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da07      	bge.n	8001e28 <crc8+0x3c>
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e002      	b.n	8001e2e <crc8+0x42>
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73fb      	strb	r3, [r7, #15]
         for (i = 0; i < 8; i++)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b07      	cmp	r3, #7
 8001e3a:	d9e9      	bls.n	8001e10 <crc8+0x24>
     while (len--)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	1e5a      	subs	r2, r3, #1
 8001e40:	603a      	str	r2, [r7, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1da      	bne.n	8001dfc <crc8+0x10>
     }

     return crc;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 fb60 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <ADC_IRQHandler+0x10>)
 8001efe:	f000 fc7b 	bl	80027f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000023c 	.word	0x2000023c

08001f0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if (TIM_GET_ITSTATUS(&htim1,TIM_IT_UPDATE )) {
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10e      	bne.n	8001f3c <TIM1_UP_TIM10_IRQHandler+0x30>
			HAL_TIM_Base_Stop_IT(&htim1);
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f20:	f003 fffe 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
			TIM_GET_CLEAR_IT(&htim1,TIM_IT_UPDATE);
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0201 	mvn.w	r2, #1
 8001f2c:	611a      	str	r2, [r3, #16]
			__HAL_TIM_SetCounter(&htim1,0x0);
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
			uart.rx_done_flag = true;
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]

		}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001f3e:	f004 f81e 	bl	8005f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200003a0 	.word	0x200003a0
 8001f4c:	20000000 	.word	0x20000000

08001f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if (TIM_GET_ITSTATUS(&htim2,TIM_IT_UPDATE )) {
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <TIM2_IRQHandler+0x3c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10e      	bne.n	8001f80 <TIM2_IRQHandler+0x30>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001f62:	480a      	ldr	r0, [pc, #40]	; (8001f8c <TIM2_IRQHandler+0x3c>)
 8001f64:	f003 ffdc 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
		TIM_GET_CLEAR_IT(&htim2,TIM_IT_UPDATE);
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <TIM2_IRQHandler+0x3c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0201 	mvn.w	r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
		__HAL_TIM_SetCounter(&htim2,0x0);
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <TIM2_IRQHandler+0x3c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
		uart.tx_ready_flag = true;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <TIM2_IRQHandler+0x40>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	709a      	strb	r2, [r3, #2]

	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM2_IRQHandler+0x3c>)
 8001f82:	f003 fffc 	bl	8005f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
  /* USER CODE END TIM2_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200003e8 	.word	0x200003e8
 8001f90:	20000000 	.word	0x20000000

08001f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <TIM3_IRQHandler+0x10>)
 8001f9a:	f003 fff0 	bl	8005f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000430 	.word	0x20000430

08001fa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if (TIM_GET_ITSTATUS(&htim4,TIM_IT_UPDATE )) {
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d112      	bne.n	8001fe0 <TIM4_IRQHandler+0x38>
		HAL_TIM_Base_Stop_IT(&htim4);
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fbc:	f003 ffb0 	bl	8005f20 <HAL_TIM_Base_Stop_IT>
				TIM_GET_CLEAR_IT(&htim4,TIM_IT_UPDATE);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
				__HAL_TIM_SetCounter(&htim4,0x0);
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start_IT(&htim4);
 8001fd2:	4806      	ldr	r0, [pc, #24]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fd4:	f003 ff42 	bl	8005e5c <HAL_TIM_Base_Start_IT>

		sht31.i2c_start_flag = true;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <TIM4_IRQHandler+0x48>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM4_IRQHandler+0x44>)
 8001fe2:	f003 ffcc 	bl	8005f7e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000478 	.word	0x20000478
 8001ff0:	200002f4 	.word	0x200002f4

08001ff4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <I2C1_EV_IRQHandler+0x10>)
 8001ffa:	f001 fdbf 	bl	8003b7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000284 	.word	0x20000284

08002008 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <I2C1_ER_IRQHandler+0x10>)
 800200e:	f001 ff26 	bl	8003e5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000284 	.word	0x20000284

0800201c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <USART1_IRQHandler+0x10>)
 8002022:	f004 fbdb 	bl	80067dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200004c0 	.word	0x200004c0

08002030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <SystemInit+0x20>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <SystemInit+0x20>)
 800203c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <MX_TIM1_Init+0x98>)
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <MX_TIM1_Init+0x9c>)
 8002074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_TIM1_Init+0x98>)
 8002078:	2218      	movs	r2, #24
 800207a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <MX_TIM1_Init+0x98>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_TIM1_Init+0x98>)
 8002084:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002088:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <MX_TIM1_Init+0x98>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_TIM1_Init+0x98>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <MX_TIM1_Init+0x98>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800209c:	4813      	ldr	r0, [pc, #76]	; (80020ec <MX_TIM1_Init+0x98>)
 800209e:	f003 fe8d 	bl	8005dbc <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020a8:	f7ff fd3e 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	4619      	mov	r1, r3
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <MX_TIM1_Init+0x98>)
 80020ba:	f004 f868 	bl	800618e <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020c4:	f7ff fd30 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	4619      	mov	r1, r3
 80020d4:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_TIM1_Init+0x98>)
 80020d6:	f004 fa6d 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020e0:	f7ff fd22 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200003a0 	.word	0x200003a0
 80020f0:	40010000 	.word	0x40010000

080020f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fa:	f107 0308 	add.w	r3, r7, #8
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002108:	463b      	mov	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM2_Init+0x94>)
 8002112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_TIM2_Init+0x94>)
 800211a:	2218      	movs	r2, #24
 800211c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_TIM2_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1750;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_TIM2_Init+0x94>)
 8002126:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800212a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_TIM2_Init+0x94>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_TIM2_Init+0x94>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_TIM2_Init+0x94>)
 800213a:	f003 fe3f 	bl	8005dbc <HAL_TIM_Base_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002144:	f7ff fcf0 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	; (8002188 <MX_TIM2_Init+0x94>)
 8002156:	f004 f81a 	bl	800618e <HAL_TIM_ConfigClockSource>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002160:	f7ff fce2 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800216c:	463b      	mov	r3, r7
 800216e:	4619      	mov	r1, r3
 8002170:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_TIM2_Init+0x94>)
 8002172:	f004 fa1f 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800217c:	f7ff fcd4 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200003e8 	.word	0x200003e8

0800218c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <MX_TIM3_Init+0x94>)
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <MX_TIM3_Init+0x98>)
 80021ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_TIM3_Init+0x94>)
 80021b0:	2231      	movs	r2, #49	; 0x31
 80021b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM3_Init+0x94>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <MX_TIM3_Init+0x94>)
 80021bc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80021c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <MX_TIM3_Init+0x94>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_TIM3_Init+0x94>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021ce:	4814      	ldr	r0, [pc, #80]	; (8002220 <MX_TIM3_Init+0x94>)
 80021d0:	f003 fdf4 	bl	8005dbc <HAL_TIM_Base_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021da:	f7ff fca5 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	4619      	mov	r1, r3
 80021ea:	480d      	ldr	r0, [pc, #52]	; (8002220 <MX_TIM3_Init+0x94>)
 80021ec:	f003 ffcf 	bl	800618e <HAL_TIM_ConfigClockSource>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80021f6:	f7ff fc97 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fa:	2320      	movs	r3, #32
 80021fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002202:	463b      	mov	r3, r7
 8002204:	4619      	mov	r1, r3
 8002206:	4806      	ldr	r0, [pc, #24]	; (8002220 <MX_TIM3_Init+0x94>)
 8002208:	f004 f9d4 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002212:	f7ff fc89 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000430 	.word	0x20000430
 8002224:	40000400 	.word	0x40000400

08002228 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223c:	463b      	mov	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <MX_TIM4_Init+0x94>)
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <MX_TIM4_Init+0x98>)
 8002248:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <MX_TIM4_Init+0x94>)
 800224c:	22f9      	movs	r2, #249	; 0xf9
 800224e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_TIM4_Init+0x94>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <MX_TIM4_Init+0x94>)
 8002258:	f242 7210 	movw	r2, #10000	; 0x2710
 800225c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <MX_TIM4_Init+0x94>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <MX_TIM4_Init+0x94>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800226a:	4814      	ldr	r0, [pc, #80]	; (80022bc <MX_TIM4_Init+0x94>)
 800226c:	f003 fda6 	bl	8005dbc <HAL_TIM_Base_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002276:	f7ff fc57 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800227e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_TIM4_Init+0x94>)
 8002288:	f003 ff81 	bl	800618e <HAL_TIM_ConfigClockSource>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002292:	f7ff fc49 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <MX_TIM4_Init+0x94>)
 80022a4:	f004 f986 	bl	80065b4 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80022ae:	f7ff fc3b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000478 	.word	0x20000478
 80022c0:	40000800 	.word	0x40000800

080022c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_TIM_Base_MspInit+0xf0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d116      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2019      	movs	r0, #25
 80022f8:	f000 fed7 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022fc:	2019      	movs	r0, #25
 80022fe:	f000 fef0 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002302:	e052      	b.n	80023aa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230c:	d116      	bne.n	800233c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a28      	ldr	r2, [pc, #160]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800232a:	2200      	movs	r2, #0
 800232c:	2100      	movs	r1, #0
 800232e:	201c      	movs	r0, #28
 8002330:	f000 febb 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002334:	201c      	movs	r0, #28
 8002336:	f000 fed4 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 800233a:	e036      	b.n	80023aa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_TIM_Base_MspInit+0xf8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d116      	bne.n	8002374 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	201d      	movs	r0, #29
 8002368:	f000 fe9f 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800236c:	201d      	movs	r0, #29
 800236e:	f000 feb8 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 8002372:	e01a      	b.n	80023aa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_TIM_Base_MspInit+0xfc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d115      	bne.n	80023aa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_TIM_Base_MspInit+0xf4>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	201e      	movs	r0, #30
 80023a0:	f000 fe83 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023a4:	201e      	movs	r0, #30
 80023a6:	f000 fe9c 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800

080023c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <MX_USART1_UART_Init+0x54>)
 80023cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80023d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023dc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <MX_USART1_UART_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	; (8002414 <MX_USART1_UART_Init+0x50>)
 8002400:	f004 f95a 	bl	80066b8 <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800240a:	f7ff fb8d 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200004c0 	.word	0x200004c0
 8002418:	40011000 	.word	0x40011000

0800241c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	; (80024b0 <HAL_UART_MspInit+0x94>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d134      	bne.n	80024a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_UART_MspInit+0x98>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_UART_MspInit+0x98>)
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_UART_MspInit+0x98>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_UART_MspInit+0x98>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <HAL_UART_MspInit+0x98>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_UART_MspInit+0x98>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002476:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002488:	2307      	movs	r3, #7
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_UART_MspInit+0x9c>)
 8002494:	f000 feee 	bl	8003274 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2025      	movs	r0, #37	; 0x25
 800249e:	f000 fe04 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024a2:	2025      	movs	r0, #37	; 0x25
 80024a4:	f000 fe1d 	bl	80030e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020000 	.word	0x40020000

080024bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c2:	490e      	ldr	r1, [pc, #56]	; (80024fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d8:	4c0b      	ldr	r4, [pc, #44]	; (8002508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e6:	f7ff fda3 	bl	8002030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f005 f869 	bl	80075c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ee:	f7fe fdc9 	bl	8001084 <main>
  bx  lr    
 80024f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8002500:	08007658 	.word	0x08007658
  ldr r2, =_sbss
 8002504:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002508:	20000508 	.word	0x20000508

0800250c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800250c:	e7fe      	b.n	800250c <DMA1_Stream0_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0d      	ldr	r2, [pc, #52]	; (8002550 <HAL_Init+0x40>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_Init+0x40>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_Init+0x40>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 fdab 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253e:	200f      	movs	r0, #15
 8002540:	f000 f808 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002544:	f7ff fc86 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x54>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <HAL_InitTick+0x58>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256a:	fbb3 f3f1 	udiv	r3, r3, r1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fdd1 	bl	800311a <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00e      	b.n	80025a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d80a      	bhi.n	800259e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002588:	2200      	movs	r2, #0
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f000 fd8b 	bl	80030aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002594:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <HAL_InitTick+0x5c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000214 	.word	0x20000214
 80025ac:	2000021c 	.word	0x2000021c
 80025b0:	20000218 	.word	0x20000218

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	2000021c 	.word	0x2000021c
 80025d8:	20000504 	.word	0x20000504

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000504 	.word	0x20000504

080025f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e033      	b.n	8002672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fbd2 	bl	8000dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800263a:	f023 0302 	bic.w	r3, r3, #2
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fb2a 	bl	8002ca0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
 8002662:	e001      	b.n	8002668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Start_IT+0x1a>
 8002692:	2302      	movs	r3, #2
 8002694:	e0a1      	b.n	80027da <HAL_ADC_Start_IT+0x15e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d018      	beq.n	80026de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_ADC_Start_IT+0x16c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a4a      	ldr	r2, [pc, #296]	; (80027ec <HAL_ADC_Start_IT+0x170>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	0c9a      	lsrs	r2, r3, #18
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d169      	bne.n	80027c0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	d106      	bne.n	800273a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	f023 0206 	bic.w	r2, r3, #6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
 8002738:	e002      	b.n	8002740 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_ADC_Start_IT+0x174>)
 800274a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002754:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d129      	bne.n	80027d8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e020      	b.n	80027d8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_ADC_Start_IT+0x178>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d11b      	bne.n	80027d8 <HAL_ADC_Start_IT+0x15c>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d114      	bne.n	80027d8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	e00b      	b.n	80027d8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0210 	orr.w	r2, r3, #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000214 	.word	0x20000214
 80027ec:	431bde83 	.word	0x431bde83
 80027f0:	40012300 	.word	0x40012300
 80027f4:	40012000 	.word	0x40012000

080027f8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d049      	beq.n	80028c2 <HAL_ADC_IRQHandler+0xca>
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d046      	beq.n	80028c2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d12b      	bne.n	80028b2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d127      	bne.n	80028b2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002868:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0220 	bic.w	r2, r2, #32
 800288c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f043 0201 	orr.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff f860 	bl	8001978 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0212 	mvn.w	r2, #18
 80028c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d057      	beq.n	8002988 <HAL_ADC_IRQHandler+0x190>
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d054      	beq.n	8002988 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d139      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800291c:	2b00      	cmp	r3, #0
 800291e:	d12b      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d124      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11d      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002940:	2b00      	cmp	r3, #0
 8002942:	d119      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002952:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d105      	bne.n	8002978 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fa8d 	bl	8002e98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 020c 	mvn.w	r2, #12
 8002986:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d017      	beq.n	80029ce <HAL_ADC_IRQHandler+0x1d6>
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d014      	beq.n	80029ce <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10d      	bne.n	80029ce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f837 	bl	8002a32 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0201 	mvn.w	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029dc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x218>
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0220 	mvn.w	r2, #32
 80029fe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f820 	bl	8002a46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0220 	mvn.w	r2, #32
 8002a0e:	601a      	str	r2, [r3, #0]
  }
}
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e105      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x228>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d925      	bls.n	8002ad4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68d9      	ldr	r1, [r3, #12]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b1e      	subs	r3, #30
 8002a9e:	2207      	movs	r2, #7
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	400a      	ands	r2, r1
 8002aac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	4618      	mov	r0, r3
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4403      	add	r3, r0
 8002ac6:	3b1e      	subs	r3, #30
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	e022      	b.n	8002b1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	2207      	movs	r2, #7
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	400a      	ands	r2, r1
 8002af6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4403      	add	r3, r0
 8002b10:	409a      	lsls	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d824      	bhi.n	8002b6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	3b05      	subs	r3, #5
 8002b34:	221f      	movs	r2, #31
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	400a      	ands	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b05      	subs	r3, #5
 8002b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6a:	e04c      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d824      	bhi.n	8002bbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b23      	subs	r3, #35	; 0x23
 8002b86:	221f      	movs	r2, #31
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	400a      	ands	r2, r1
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b23      	subs	r3, #35	; 0x23
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
 8002bbc:	e023      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b41      	subs	r3, #65	; 0x41
 8002bd0:	221f      	movs	r2, #31
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b41      	subs	r3, #65	; 0x41
 8002bfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c06:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_ADC_ConfigChannel+0x234>)
 8002c08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a21      	ldr	r2, [pc, #132]	; (8002c94 <HAL_ADC_ConfigChannel+0x238>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1cc>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b12      	cmp	r3, #18
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_ADC_ConfigChannel+0x238>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d123      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d003      	beq.n	8002c42 <HAL_ADC_ConfigChannel+0x1e6>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d11b      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d111      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_ADC_ConfigChannel+0x23c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_ADC_ConfigChannel+0x240>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	0c9a      	lsrs	r2, r3, #18
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f9      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40012300 	.word	0x40012300
 8002c94:	40012000 	.word	0x40012000
 8002c98:	20000214 	.word	0x20000214
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca8:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <ADC_Init+0x1f0>)
 8002caa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <ADC_Init+0x1f4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d022      	beq.n	8002d7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00f      	b.n	8002d9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0202 	bic.w	r2, r2, #2
 8002dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e1b      	ldrb	r3, [r3, #24]
 8002db8:	005a      	lsls	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002dea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	3b01      	subs	r3, #1
 8002df8:	035a      	lsls	r2, r3, #13
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e007      	b.n	8002e14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	051a      	lsls	r2, r3, #20
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e56:	025a      	lsls	r2, r3, #9
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	029a      	lsls	r2, r3, #10
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40012300 	.word	0x40012300
 8002e94:	0f000001 	.word	0x0f000001

08002e98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	; (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db12      	blt.n	8002f84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	490a      	ldr	r1, [pc, #40]	; (8002f90 <__NVIC_DisableIRQ+0x44>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	3320      	adds	r3, #32
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f78:	f3bf 8f4f 	dsb	sy
}
 8002f7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f7e:	f3bf 8f6f 	isb	sy
}
 8002f82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100

08002f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	db0a      	blt.n	8002fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	490c      	ldr	r1, [pc, #48]	; (8002fe0 <__NVIC_SetPriority+0x4c>)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	0112      	lsls	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fbc:	e00a      	b.n	8002fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <__NVIC_SetPriority+0x50>)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	3b04      	subs	r3, #4
 8002fcc:	0112      	lsls	r2, r2, #4
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	761a      	strb	r2, [r3, #24]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f1c3 0307 	rsb	r3, r3, #7
 8003002:	2b04      	cmp	r3, #4
 8003004:	bf28      	it	cs
 8003006:	2304      	movcs	r3, #4
 8003008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3304      	adds	r3, #4
 800300e:	2b06      	cmp	r3, #6
 8003010:	d902      	bls.n	8003018 <NVIC_EncodePriority+0x30>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3b03      	subs	r3, #3
 8003016:	e000      	b.n	800301a <NVIC_EncodePriority+0x32>
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	401a      	ands	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003030:	f04f 31ff 	mov.w	r1, #4294967295
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	43d9      	mvns	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	4313      	orrs	r3, r2
         );
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff8e 	bl	8002f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff05 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff1a 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff8e 	bl	8002fe8 <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5d 	bl	8002f94 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff0d 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff1d 	bl	8002f4c <__NVIC_DisableIRQ>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff94 	bl	8003050 <SysTick_Config>
 8003128:	4603      	mov	r3, r0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003140:	f7ff fa4c 	bl	80025dc <HAL_GetTick>
 8003144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d008      	beq.n	8003164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e052      	b.n	800320a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0216 	bic.w	r2, r2, #22
 8003172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d103      	bne.n	8003194 <HAL_DMA_Abort+0x62>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0208 	bic.w	r2, r2, #8
 80031a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b4:	e013      	b.n	80031de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031b6:	f7ff fa11 	bl	80025dc <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d90c      	bls.n	80031de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2203      	movs	r2, #3
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e015      	b.n	800320a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e4      	bne.n	80031b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	223f      	movs	r2, #63	; 0x3f
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d004      	beq.n	8003230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e00c      	b.n	800324a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003264:	b2db      	uxtb	r3, r3
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e159      	b.n	8003544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f040 8148 	bne.w	800353e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d005      	beq.n	80032c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d130      	bne.n	8003328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a2 	beq.w	800353e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_GPIO_Init+0x2e8>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_GPIO_Init+0x2e8>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_GPIO_Init+0x2e8>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a49      	ldr	r2, [pc, #292]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_Init+0x202>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a48      	ldr	r2, [pc, #288]	; (8003568 <HAL_GPIO_Init+0x2f4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0x1fe>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_GPIO_Init+0x2f8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_Init+0x1fa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_GPIO_Init+0x2fc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x1f6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a45      	ldr	r2, [pc, #276]	; (8003574 <HAL_GPIO_Init+0x300>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_Init+0x1f2>
 8003462:	2304      	movs	r3, #4
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003466:	2307      	movs	r3, #7
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x204>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x204>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003496:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ba:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_GPIO_Init+0x304>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f aea2 	bls.w	8003290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40013800 	.word	0x40013800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021000 	.word	0x40021000
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	2300      	movs	r3, #0
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e0bb      	b.n	8003710 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003598:	2201      	movs	r2, #1
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	f040 80ab 	bne.w	800370a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80035b4:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <HAL_GPIO_DeInit+0x1ac>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	089b      	lsrs	r3, r3, #2
 80035ba:	3302      	adds	r3, #2
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	220f      	movs	r2, #15
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a54      	ldr	r2, [pc, #336]	; (800372c <HAL_GPIO_DeInit+0x1b0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_DeInit+0x96>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a53      	ldr	r2, [pc, #332]	; (8003730 <HAL_GPIO_DeInit+0x1b4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_DeInit+0x92>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_GPIO_DeInit+0x1b8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_DeInit+0x8e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a51      	ldr	r2, [pc, #324]	; (8003738 <HAL_GPIO_DeInit+0x1bc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_DeInit+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a50      	ldr	r2, [pc, #320]	; (800373c <HAL_GPIO_DeInit+0x1c0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_DeInit+0x86>
 80035fe:	2304      	movs	r3, #4
 8003600:	e008      	b.n	8003614 <HAL_GPIO_DeInit+0x98>
 8003602:	2307      	movs	r3, #7
 8003604:	e006      	b.n	8003614 <HAL_GPIO_DeInit+0x98>
 8003606:	2303      	movs	r3, #3
 8003608:	e004      	b.n	8003614 <HAL_GPIO_DeInit+0x98>
 800360a:	2302      	movs	r3, #2
 800360c:	e002      	b.n	8003614 <HAL_GPIO_DeInit+0x98>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_GPIO_DeInit+0x98>
 8003612:	2300      	movs	r3, #0
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4093      	lsls	r3, r2
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	429a      	cmp	r2, r3
 8003622:	d132      	bne.n	800368a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003624:	4b46      	ldr	r3, [pc, #280]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	43db      	mvns	r3, r3
 800362c:	4944      	ldr	r1, [pc, #272]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 800362e:	4013      	ands	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43db      	mvns	r3, r3
 800363a:	4941      	ldr	r1, [pc, #260]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 800363c:	4013      	ands	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003640:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43db      	mvns	r3, r3
 8003648:	493d      	ldr	r1, [pc, #244]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 800364a:	4013      	ands	r3, r2
 800364c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43db      	mvns	r3, r3
 8003656:	493a      	ldr	r1, [pc, #232]	; (8003740 <HAL_GPIO_DeInit+0x1c4>)
 8003658:	4013      	ands	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800366c:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_GPIO_DeInit+0x1ac>)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	43da      	mvns	r2, r3
 800367c:	482a      	ldr	r0, [pc, #168]	; (8003728 <HAL_GPIO_DeInit+0x1ac>)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	400a      	ands	r2, r1
 8003684:	3302      	adds	r3, #2
 8003686:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2103      	movs	r1, #3
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	08da      	lsrs	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3208      	adds	r2, #8
 80036a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	08d2      	lsrs	r2, r2, #3
 80036c0:	4019      	ands	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3208      	adds	r2, #8
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2103      	movs	r1, #3
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	401a      	ands	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	2101      	movs	r1, #1
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2103      	movs	r1, #3
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	401a      	ands	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	f67f af40 	bls.w	8003598 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40013c00 	.word	0x40013c00

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003762:	887b      	ldrh	r3, [r7, #2]
 8003764:	041a      	lsls	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e12b      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fd fbf0 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2224      	movs	r2, #36	; 0x24
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037dc:	f002 fac6 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 80037e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a81      	ldr	r2, [pc, #516]	; (80039ec <HAL_I2C_Init+0x274>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d807      	bhi.n	80037fc <HAL_I2C_Init+0x84>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a80      	ldr	r2, [pc, #512]	; (80039f0 <HAL_I2C_Init+0x278>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	bf94      	ite	ls
 80037f4:	2301      	movls	r3, #1
 80037f6:	2300      	movhi	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e006      	b.n	800380a <HAL_I2C_Init+0x92>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a7d      	ldr	r2, [pc, #500]	; (80039f4 <HAL_I2C_Init+0x27c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	bf94      	ite	ls
 8003804:	2301      	movls	r3, #1
 8003806:	2300      	movhi	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e0e7      	b.n	80039e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a78      	ldr	r2, [pc, #480]	; (80039f8 <HAL_I2C_Init+0x280>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0c9b      	lsrs	r3, r3, #18
 800381c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	4a6a      	ldr	r2, [pc, #424]	; (80039ec <HAL_I2C_Init+0x274>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d802      	bhi.n	800384c <HAL_I2C_Init+0xd4>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	3301      	adds	r3, #1
 800384a:	e009      	b.n	8003860 <HAL_I2C_Init+0xe8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a69      	ldr	r2, [pc, #420]	; (80039fc <HAL_I2C_Init+0x284>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099b      	lsrs	r3, r3, #6
 800385e:	3301      	adds	r3, #1
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003872:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	495c      	ldr	r1, [pc, #368]	; (80039ec <HAL_I2C_Init+0x274>)
 800387c:	428b      	cmp	r3, r1
 800387e:	d819      	bhi.n	80038b4 <HAL_I2C_Init+0x13c>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fbb1 f3f3 	udiv	r3, r1, r3
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003894:	400b      	ands	r3, r1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_I2C_Init+0x138>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1e59      	subs	r1, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	e051      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e04f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <HAL_I2C_Init+0x168>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	440b      	add	r3, r1
 80038ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_I2C_Init+0x18e>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Init+0x196>
 800390a:	2301      	movs	r3, #1
 800390c:	e022      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_I2C_Init+0x1bc>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1e58      	subs	r0, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	fbb0 f3f3 	udiv	r3, r0, r3
 8003928:	3301      	adds	r3, #1
 800392a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003932:	e00f      	b.n	8003954 <HAL_I2C_Init+0x1dc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	4313      	orrs	r3, r2
 800395a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003982:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6911      	ldr	r1, [r2, #16]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	000186a0 	.word	0x000186a0
 80039f0:	001e847f 	.word	0x001e847f
 80039f4:	003d08ff 	.word	0x003d08ff
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	10624dd3 	.word	0x10624dd3

08003a00 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	f040 809a 	bne.w	8003b60 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_I2C_Mem_Read_IT+0x170>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	08db      	lsrs	r3, r3, #3
 8003a32:	4a50      	ldr	r2, [pc, #320]	; (8003b74 <HAL_I2C_Mem_Read_IT+0x174>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	0a1a      	lsrs	r2, r3, #8
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d116      	bne.n	8003a80 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f043 0220 	orr.w	r2, r3, #32
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e070      	b.n	8003b62 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d0db      	beq.n	8003a46 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_I2C_Mem_Read_IT+0x9c>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e062      	b.n	8003b62 <HAL_I2C_Mem_Read_IT+0x162>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d007      	beq.n	8003ac2 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2222      	movs	r2, #34	; 0x22
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a3a      	ldr	r2, [r7, #32]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <HAL_I2C_Mem_Read_IT+0x178>)
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b04:	897a      	ldrh	r2, [r7, #10]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003b0a:	893a      	ldrh	r2, [r7, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003b5a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000214 	.word	0x20000214
 8003b74:	14f8b589 	.word	0x14f8b589
 8003b78:	ffff0000 	.word	0xffff0000

08003b7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d003      	beq.n	8003bb4 <HAL_I2C_EV_IRQHandler+0x38>
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	f040 80c1 	bne.w	8003d36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <HAL_I2C_EV_IRQHandler+0x6e>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003bd4:	d003      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0x62>
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2C_EV_IRQHandler+0x66>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_EV_IRQHandler+0x68>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f000 8132 	beq.w	8003e4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00c      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x92>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	0a5b      	lsrs	r3, r3, #9
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f001 fc67 	bl	80054d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fd6f 	bl	80046ea <I2C_Master_SB>
 8003c0c:	e092      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0xb2>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	0a5b      	lsrs	r3, r3, #9
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fde5 	bl	80047f6 <I2C_Master_ADD10>
 8003c2c:	e082      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0xd2>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fdff 	bl	800484a <I2C_Master_ADDR>
 8003c4c:	e072      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03b      	beq.n	8003cd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c68:	f000 80f3 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00f      	beq.n	8003c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f9df 	bl	8004054 <I2C_MasterTransmit_TXE>
 8003c96:	e04d      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80d6 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80cf 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	2b21      	cmp	r3, #33	; 0x21
 8003cb8:	d103      	bne.n	8003cc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa66 	bl	800418c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc0:	e0c7      	b.n	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	f040 80c4 	bne.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fad4 	bl	8004278 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd0:	e0bf      	b.n	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce0:	f000 80b7 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00f      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x194>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0a9b      	lsrs	r3, r3, #10
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_I2C_EV_IRQHandler+0x194>
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fb49 	bl	80043a0 <I2C_MasterReceive_RXNE>
 8003d0e:	e011      	b.n	8003d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 809a 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8093 	beq.w	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fbf2 	bl	8004516 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d32:	e08e      	b.n	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d34:	e08d      	b.n	8003e52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d004      	beq.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e007      	b.n	8003d58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d012      	beq.n	8003d8a <HAL_I2C_EV_IRQHandler+0x20e>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	0a5b      	lsrs	r3, r3, #9
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00c      	beq.n	8003d8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d80:	69b9      	ldr	r1, [r7, #24]
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ffb0 	bl	8004ce8 <I2C_Slave_ADDR>
 8003d88:	e066      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_I2C_EV_IRQHandler+0x22e>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	0a5b      	lsrs	r3, r3, #9
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 ffea 	bl	8004d7c <I2C_Slave_STOPF>
 8003da8:	e056      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	2b21      	cmp	r3, #33	; 0x21
 8003dae:	d002      	beq.n	8003db6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	2b29      	cmp	r3, #41	; 0x29
 8003db4:	d125      	bne.n	8003e02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	09db      	lsrs	r3, r3, #7
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x266>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	0a9b      	lsrs	r3, r3, #10
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x266>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fec6 	bl	8004b6c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de0:	e039      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d033      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2da>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0a5b      	lsrs	r3, r3, #9
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02d      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fef3 	bl	8004be6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e00:	e029      	b.n	8003e56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00f      	beq.n	8003e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	0a9b      	lsrs	r3, r3, #10
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fefe 	bl	8004c28 <I2C_SlaveReceive_RXNE>
 8003e2c:	e014      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00e      	beq.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	0a5b      	lsrs	r3, r3, #9
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 ff2c 	bl	8004ca4 <I2C_SlaveReceive_BTF>
 8003e4c:	e004      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b08a      	sub	sp, #40	; 0x28
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00e      	beq.n	8003eac <HAL_I2C_ER_IRQHandler+0x4e>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eaa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	0a5b      	lsrs	r3, r3, #9
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_I2C_ER_IRQHandler+0x78>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ed4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	0a9b      	lsrs	r3, r3, #10
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03f      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0x104>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d039      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003eee:	7efb      	ldrb	r3, [r7, #27]
 8003ef0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f08:	7ebb      	ldrb	r3, [r7, #26]
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d112      	bne.n	8003f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	2b21      	cmp	r3, #33	; 0x21
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f1a:	7cfb      	ldrb	r3, [r7, #19]
 8003f1c:	2b29      	cmp	r3, #41	; 0x29
 8003f1e:	d005      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0xce>
 8003f20:	7cfb      	ldrb	r3, [r7, #19]
 8003f22:	2b28      	cmp	r3, #40	; 0x28
 8003f24:	d106      	bne.n	8003f34 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b21      	cmp	r3, #33	; 0x21
 8003f2a:	d103      	bne.n	8003f34 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f001 f855 	bl	8004fdc <I2C_Slave_AF>
 8003f32:	e016      	b.n	8003f62 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f46:	7efb      	ldrb	r3, [r7, #27]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d002      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0xf4>
 8003f4c:	7efb      	ldrb	r3, [r7, #27]
 8003f4e:	2b40      	cmp	r3, #64	; 0x40
 8003f50:	d107      	bne.n	8003f62 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	0adb      	lsrs	r3, r3, #11
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00e      	beq.n	8003f8c <HAL_I2C_ER_IRQHandler+0x12e>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f8a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f001 f88c 	bl	80050bc <I2C_ITError>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
 8004008:	4613      	mov	r3, r2
 800400a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d150      	bne.n	800411c <I2C_MasterTransmit_TXE+0xc8>
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b21      	cmp	r3, #33	; 0x21
 800407e:	d14d      	bne.n	800411c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b08      	cmp	r3, #8
 8004084:	d01d      	beq.n	80040c2 <I2C_MasterTransmit_TXE+0x6e>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b20      	cmp	r3, #32
 800408a:	d01a      	beq.n	80040c2 <I2C_MasterTransmit_TXE+0x6e>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004092:	d016      	beq.n	80040c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2211      	movs	r2, #17
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ff76 	bl	8003fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040c0:	e060      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d107      	bne.n	800410c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff91 	bl	800402c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800410a:	e03b      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff49 	bl	8003fac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411a:	e033      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b21      	cmp	r3, #33	; 0x21
 8004120:	d005      	beq.n	800412e <I2C_MasterTransmit_TXE+0xda>
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d12d      	bne.n	8004184 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b22      	cmp	r3, #34	; 0x22
 800412c:	d12a      	bne.n	8004184 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d108      	bne.n	800414a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004146:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004148:	e01c      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d103      	bne.n	800415e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f88e 	bl	8004278 <I2C_MemoryTransmit_TXE_BTF>
}
 800415c:	e012      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004182:	e7ff      	b.n	8004184 <I2C_MasterTransmit_TXE+0x130>
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b21      	cmp	r3, #33	; 0x21
 80041a4:	d164      	bne.n	8004270 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3b01      	subs	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041d4:	e04c      	b.n	8004270 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d01d      	beq.n	8004218 <I2C_MasterTransmit_BTF+0x8c>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d01a      	beq.n	8004218 <I2C_MasterTransmit_BTF+0x8c>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e8:	d016      	beq.n	8004218 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2211      	movs	r2, #17
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fecb 	bl	8003fac <HAL_I2C_MasterTxCpltCallback>
}
 8004216:	e02b      	b.n	8004270 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004226:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d107      	bne.n	8004262 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fee6 	bl	800402c <HAL_I2C_MemTxCpltCallback>
}
 8004260:	e006      	b.n	8004270 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe9e 	bl	8003fac <HAL_I2C_MasterTxCpltCallback>
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004286:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11d      	bne.n	80042cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10b      	bne.n	80042b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	b2da      	uxtb	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	1c9a      	adds	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042ae:	e073      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	121b      	asrs	r3, r3, #8
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042ca:	e065      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10b      	bne.n	80042ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042ea:	e055      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d151      	bne.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	d10d      	bne.n	8004316 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004308:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004314:	e040      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b21      	cmp	r3, #33	; 0x21
 8004324:	d112      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800434a:	e025      	b.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d120      	bne.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b21      	cmp	r3, #33	; 0x21
 800435a:	d11d      	bne.n	8004398 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800436a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fe4a 	bl	800402c <HAL_I2C_MemTxCpltCallback>
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b22      	cmp	r3, #34	; 0x22
 80043b2:	f040 80ac 	bne.w	800450e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d921      	bls.n	8004408 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	f040 808c 	bne.w	800450e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004406:	e082      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	2b02      	cmp	r3, #2
 800440e:	d075      	beq.n	80044fc <I2C_MasterReceive_RXNE+0x15c>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d002      	beq.n	800441c <I2C_MasterReceive_RXNE+0x7c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d16f      	bne.n	80044fc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f001 f827 	bl	8005470 <I2C_WaitOnSTOPRequestThroughIT>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d142      	bne.n	80044ae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004446:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d10a      	bne.n	8004498 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fd fa51 	bl	8001938 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004496:	e03a      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2212      	movs	r2, #18
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fd8a 	bl	8003fc0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ac:	e02f      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd fa35 	bl	8001964 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044fa:	e008      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	e7ff      	b.n	800450e <I2C_MasterReceive_RXNE+0x16e>
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b04      	cmp	r3, #4
 800452c:	d11b      	bne.n	8004566 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004564:	e0bd      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d129      	bne.n	80045c4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00a      	beq.n	800459c <I2C_MasterReceive_BTF+0x86>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d007      	beq.n	800459c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045c2:	e08e      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d176      	bne.n	80046bc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d002      	beq.n	80045da <I2C_MasterReceive_BTF+0xc4>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d108      	bne.n	80045ec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e019      	b.n	8004620 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d002      	beq.n	80045f8 <I2C_MasterReceive_BTF+0xe2>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d108      	bne.n	800460a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e00a      	b.n	8004620 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b10      	cmp	r3, #16
 800460e:	d007      	beq.n	8004620 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800467a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d10a      	bne.n	80046a6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f94a 	bl	8001938 <HAL_I2C_MemRxCpltCallback>
}
 80046a4:	e01d      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2212      	movs	r2, #18
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fc83 	bl	8003fc0 <HAL_I2C_MasterRxCpltCallback>
}
 80046ba:	e012      	b.n	80046e2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d117      	bne.n	800472e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470a:	b2db      	uxtb	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004716:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004718:	e067      	b.n	80047ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	b2da      	uxtb	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
}
 800472c:	e05d      	b.n	80047ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004736:	d133      	bne.n	80047a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b21      	cmp	r3, #33	; 0x21
 8004742:	d109      	bne.n	8004758 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004754:	611a      	str	r2, [r3, #16]
 8004756:	e008      	b.n	800476a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <I2C_Master_SB+0x92>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	2b00      	cmp	r3, #0
 8004782:	d032      	beq.n	80047ea <I2C_Master_SB+0x100>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02d      	beq.n	80047ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479c:	605a      	str	r2, [r3, #4]
}
 800479e:	e024      	b.n	80047ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10e      	bne.n	80047c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	11db      	asrs	r3, r3, #7
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0306 	and.w	r3, r3, #6
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f063 030f 	orn	r3, r3, #15
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]
}
 80047c4:	e011      	b.n	80047ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10d      	bne.n	80047ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	11db      	asrs	r3, r3, #7
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0306 	and.w	r3, r3, #6
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f063 030e 	orn	r3, r3, #14
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	b2da      	uxtb	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <I2C_Master_ADD10+0x26>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d108      	bne.n	800482e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <I2C_Master_ADD10+0x48>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483c:	605a      	str	r2, [r3, #4]
  }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800484a:	b480      	push	{r7}
 800484c:	b091      	sub	sp, #68	; 0x44
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b22      	cmp	r3, #34	; 0x22
 8004872:	f040 8169 	bne.w	8004b48 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10f      	bne.n	800489e <I2C_Master_ADDR+0x54>
 800487e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004882:	2b40      	cmp	r3, #64	; 0x40
 8004884:	d10b      	bne.n	800489e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	e160      	b.n	8004b60 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d11d      	bne.n	80048e2 <I2C_Master_ADDR+0x98>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048ae:	d118      	bne.n	80048e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b0:	2300      	movs	r3, #0
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	651a      	str	r2, [r3, #80]	; 0x50
 80048e0:	e13e      	b.n	8004b60 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d113      	bne.n	8004914 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ec:	2300      	movs	r3, #0
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e115      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b01      	cmp	r3, #1
 800491c:	f040 808a 	bne.w	8004a34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004926:	d137      	bne.n	8004998 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004936:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004946:	d113      	bne.n	8004970 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004956:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	e0e7      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e0d3      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	2b08      	cmp	r3, #8
 800499c:	d02e      	beq.n	80049fc <I2C_Master_ADDR+0x1b2>
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d02b      	beq.n	80049fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	2b12      	cmp	r3, #18
 80049a8:	d102      	bne.n	80049b0 <I2C_Master_ADDR+0x166>
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d125      	bne.n	80049fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d00e      	beq.n	80049d4 <I2C_Master_ADDR+0x18a>
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d00b      	beq.n	80049d4 <I2C_Master_ADDR+0x18a>
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d008      	beq.n	80049d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	e007      	b.n	80049e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	e0a1      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e085      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d14d      	bne.n	8004ada <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d016      	beq.n	8004a72 <I2C_Master_ADDR+0x228>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d013      	beq.n	8004a72 <I2C_Master_ADDR+0x228>
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d010      	beq.n	8004a72 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e007      	b.n	8004a82 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a80:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a90:	d117      	bne.n	8004ac2 <I2C_Master_ADDR+0x278>
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a98:	d00b      	beq.n	8004ab2 <I2C_Master_ADDR+0x268>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d008      	beq.n	8004ab2 <I2C_Master_ADDR+0x268>
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d005      	beq.n	8004ab2 <I2C_Master_ADDR+0x268>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d002      	beq.n	8004ab2 <I2C_Master_ADDR+0x268>
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d107      	bne.n	8004ac2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ac0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	e032      	b.n	8004b40 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004af8:	d117      	bne.n	8004b2a <I2C_Master_ADDR+0x2e0>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b00:	d00b      	beq.n	8004b1a <I2C_Master_ADDR+0x2d0>
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d008      	beq.n	8004b1a <I2C_Master_ADDR+0x2d0>
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d005      	beq.n	8004b1a <I2C_Master_ADDR+0x2d0>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d002      	beq.n	8004b1a <I2C_Master_ADDR+0x2d0>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d107      	bne.n	8004b2a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b46:	e00b      	b.n	8004b60 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	e7ff      	b.n	8004b60 <I2C_Master_ADDR+0x316>
 8004b60:	bf00      	nop
 8004b62:	3744      	adds	r7, #68	; 0x44
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02b      	beq.n	8004bde <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	781a      	ldrb	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d114      	bne.n	8004bde <I2C_SlaveTransmit_TXE+0x72>
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b29      	cmp	r3, #41	; 0x29
 8004bb8:	d111      	bne.n	8004bde <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2221      	movs	r2, #33	; 0x21
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2228      	movs	r2, #40	; 0x28
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff f9fb 	bl	8003fd4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d011      	beq.n	8004c1c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	781a      	ldrb	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d02c      	beq.n	8004c9c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d114      	bne.n	8004c9c <I2C_SlaveReceive_RXNE+0x74>
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b2a      	cmp	r3, #42	; 0x2a
 8004c76:	d111      	bne.n	8004c9c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2222      	movs	r2, #34	; 0x22
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2228      	movs	r2, #40	; 0x28
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff f9a6 	bl	8003fe8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d02:	2b28      	cmp	r3, #40	; 0x28
 8004d04:	d127      	bne.n	8004d56 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d14:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	09db      	lsrs	r3, r3, #7
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	81bb      	strh	r3, [r7, #12]
 8004d38:	e002      	b.n	8004d40 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d48:	89ba      	ldrh	r2, [r7, #12]
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff f954 	bl	8003ffc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d54:	e00e      	b.n	8004d74 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d74:	bf00      	nop
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dd8:	d172      	bne.n	8004ec0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b22      	cmp	r3, #34	; 0x22
 8004dde:	d002      	beq.n	8004de6 <I2C_Slave_STOPF+0x6a>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b2a      	cmp	r3, #42	; 0x2a
 8004de4:	d135      	bne.n	8004e52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fa19 	bl	8003256 <HAL_DMA_GetState>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d049      	beq.n	8004ebe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4a69      	ldr	r2, [pc, #420]	; (8004fd4 <I2C_Slave_STOPF+0x258>)
 8004e30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe f9eb 	bl	8003212 <HAL_DMA_Abort_IT>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d03d      	beq.n	8004ebe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e50:	e035      	b.n	8004ebe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0204 	orr.w	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe f9e3 	bl	8003256 <HAL_DMA_GetState>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d014      	beq.n	8004ec0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	4a4e      	ldr	r2, [pc, #312]	; (8004fd4 <I2C_Slave_STOPF+0x258>)
 8004e9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe f9b5 	bl	8003212 <HAL_DMA_Abort_IT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4798      	blx	r3
 8004ebc:	e000      	b.n	8004ec0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ebe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d03e      	beq.n	8004f48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d112      	bne.n	8004efe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b40      	cmp	r3, #64	; 0x40
 8004f0a:	d112      	bne.n	8004f32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0204 	orr.w	r2, r3, #4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f8b3 	bl	80050bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f56:	e039      	b.n	8004fcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5c:	d109      	bne.n	8004f72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2228      	movs	r2, #40	; 0x28
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff f83b 	bl	8003fe8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b28      	cmp	r3, #40	; 0x28
 8004f7c:	d111      	bne.n	8004fa2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <I2C_Slave_STOPF+0x25c>)
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff f83c 	bl	8004018 <HAL_I2C_ListenCpltCallback>
}
 8004fa0:	e014      	b.n	8004fcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	2b22      	cmp	r3, #34	; 0x22
 8004fa8:	d002      	beq.n	8004fb0 <I2C_Slave_STOPF+0x234>
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b22      	cmp	r3, #34	; 0x22
 8004fae:	d10d      	bne.n	8004fcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff f80e 	bl	8003fe8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	08005321 	.word	0x08005321
 8004fd8:	ffff0000 	.word	0xffff0000

08004fdc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d002      	beq.n	8004ffe <I2C_Slave_AF+0x22>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d129      	bne.n	8005052 <I2C_Slave_AF+0x76>
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2b28      	cmp	r3, #40	; 0x28
 8005002:	d126      	bne.n	8005052 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <I2C_Slave_AF+0xdc>)
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005018:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005022:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe ffe4 	bl	8004018 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005050:	e02e      	b.n	80050b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b21      	cmp	r3, #33	; 0x21
 8005056:	d126      	bne.n	80050a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <I2C_Slave_AF+0xdc>)
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2221      	movs	r2, #33	; 0x21
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005082:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800508c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fe ff98 	bl	8003fd4 <HAL_I2C_SlaveTxCpltCallback>
}
 80050a4:	e004      	b.n	80050b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050ae:	615a      	str	r2, [r3, #20]
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	ffff0000 	.word	0xffff0000

080050bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d002      	beq.n	80050e0 <I2C_ITError+0x24>
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d10a      	bne.n	80050f6 <I2C_ITError+0x3a>
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b22      	cmp	r3, #34	; 0x22
 80050e4:	d107      	bne.n	80050f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050fc:	2b28      	cmp	r3, #40	; 0x28
 80050fe:	d107      	bne.n	8005110 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2228      	movs	r2, #40	; 0x28
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800510e:	e015      	b.n	800513c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800511e:	d00a      	beq.n	8005136 <I2C_ITError+0x7a>
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b60      	cmp	r3, #96	; 0x60
 8005124:	d007      	beq.n	8005136 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d162      	bne.n	8005212 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800515a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d020      	beq.n	80051ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	4a6a      	ldr	r2, [pc, #424]	; (8005318 <I2C_ITError+0x25c>)
 8005170:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe f84b 	bl	8003212 <HAL_DMA_Abort_IT>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8089 	beq.w	8005296 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051a6:	4610      	mov	r0, r2
 80051a8:	4798      	blx	r3
 80051aa:	e074      	b.n	8005296 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	4a59      	ldr	r2, [pc, #356]	; (8005318 <I2C_ITError+0x25c>)
 80051b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe f82a 	bl	8003212 <HAL_DMA_Abort_IT>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d068      	beq.n	8005296 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d10b      	bne.n	80051ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
 8005210:	e041      	b.n	8005296 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b60      	cmp	r3, #96	; 0x60
 800521c:	d125      	bne.n	800526a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d10b      	bne.n	8005252 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fe feec 	bl	8004040 <HAL_I2C_AbortCpltCallback>
 8005268:	e015      	b.n	8005296 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d10b      	bne.n	8005290 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fc fb67 	bl	8001964 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10e      	bne.n	80052c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d104      	bne.n	80052c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d113      	bne.n	8005310 <I2C_ITError+0x254>
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b28      	cmp	r3, #40	; 0x28
 80052ec:	d110      	bne.n	8005310 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	; (800531c <I2C_ITError+0x260>)
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fe fe84 	bl	8004018 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	08005321 	.word	0x08005321
 800531c:	ffff0000 	.word	0xffff0000

08005320 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800533a:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <I2C_DMAAbort+0x148>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	4a4a      	ldr	r2, [pc, #296]	; (800546c <I2C_DMAAbort+0x14c>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	0a1a      	lsrs	r2, r3, #8
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00da      	lsls	r2, r3, #3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005366:	e00a      	b.n	800537e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3b01      	subs	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d0ea      	beq.n	8005354 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	2200      	movs	r2, #0
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c0:	2200      	movs	r2, #0
 80053c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	2200      	movs	r2, #0
 80053d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b60      	cmp	r3, #96	; 0x60
 80053ee:	d10e      	bne.n	800540e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005406:	6978      	ldr	r0, [r7, #20]
 8005408:	f7fe fe1a 	bl	8004040 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800540c:	e027      	b.n	800545e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005414:	2b28      	cmp	r3, #40	; 0x28
 8005416:	d117      	bne.n	8005448 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005436:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2228      	movs	r2, #40	; 0x28
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005446:	e007      	b.n	8005458 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f7fc fa83 	bl	8001964 <HAL_I2C_ErrorCallback>
}
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000214 	.word	0x20000214
 800546c:	14f8b589 	.word	0x14f8b589

08005470 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800547c:	4b13      	ldr	r3, [pc, #76]	; (80054cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	4a13      	ldr	r2, [pc, #76]	; (80054d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	0a1a      	lsrs	r2, r3, #8
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3b01      	subs	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d107      	bne.n	80054ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0220 	orr.w	r2, r3, #32
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e008      	b.n	80054c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d0e9      	beq.n	8005492 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	20000214 	.word	0x20000214
 80054d0:	14f8b589 	.word	0x14f8b589

080054d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054e4:	d103      	bne.n	80054ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054ec:	e007      	b.n	80054fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054f6:	d102      	bne.n	80054fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2208      	movs	r2, #8
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
	...

0800550c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e267      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d075      	beq.n	8005616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552a:	4b88      	ldr	r3, [pc, #544]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b04      	cmp	r3, #4
 8005534:	d00c      	beq.n	8005550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005536:	4b85      	ldr	r3, [pc, #532]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800553e:	2b08      	cmp	r3, #8
 8005540:	d112      	bne.n	8005568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005542:	4b82      	ldr	r3, [pc, #520]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800554e:	d10b      	bne.n	8005568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005550:	4b7e      	ldr	r3, [pc, #504]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d05b      	beq.n	8005614 <HAL_RCC_OscConfig+0x108>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d157      	bne.n	8005614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e242      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d106      	bne.n	8005580 <HAL_RCC_OscConfig+0x74>
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a75      	ldr	r2, [pc, #468]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e01d      	b.n	80055bc <HAL_RCC_OscConfig+0xb0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x98>
 800558a:	4b70      	ldr	r3, [pc, #448]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6f      	ldr	r2, [pc, #444]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6c      	ldr	r2, [pc, #432]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e00b      	b.n	80055bc <HAL_RCC_OscConfig+0xb0>
 80055a4:	4b69      	ldr	r3, [pc, #420]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a68      	ldr	r2, [pc, #416]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b66      	ldr	r3, [pc, #408]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a65      	ldr	r2, [pc, #404]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80055b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fd f80a 	bl	80025dc <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fd f806 	bl	80025dc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e207      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b5b      	ldr	r3, [pc, #364]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0xc0>
 80055ea:	e014      	b.n	8005616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fc fff6 	bl	80025dc <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fc fff2 	bl	80025dc <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e1f3      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	4b51      	ldr	r3, [pc, #324]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f0      	bne.n	80055f4 <HAL_RCC_OscConfig+0xe8>
 8005612:	e000      	b.n	8005616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d063      	beq.n	80056ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 030c 	and.w	r3, r3, #12
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00b      	beq.n	8005646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800562e:	4b47      	ldr	r3, [pc, #284]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005636:	2b08      	cmp	r3, #8
 8005638:	d11c      	bne.n	8005674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563a:	4b44      	ldr	r3, [pc, #272]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d116      	bne.n	8005674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d005      	beq.n	800565e <HAL_RCC_OscConfig+0x152>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e1c7      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565e:	4b3b      	ldr	r3, [pc, #236]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4937      	ldr	r1, [pc, #220]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005672:	e03a      	b.n	80056ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d020      	beq.n	80056be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800567c:	4b34      	ldr	r3, [pc, #208]	; (8005750 <HAL_RCC_OscConfig+0x244>)
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fc ffab 	bl	80025dc <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005688:	e008      	b.n	800569c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568a:	f7fc ffa7 	bl	80025dc <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d901      	bls.n	800569c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e1a8      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	4b2b      	ldr	r3, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x240>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a8:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4925      	ldr	r1, [pc, #148]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]
 80056bc:	e015      	b.n	80056ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <HAL_RCC_OscConfig+0x244>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc ff8a 	bl	80025dc <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fc ff86 	bl	80025dc <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e187      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	4b1b      	ldr	r3, [pc, #108]	; (800574c <HAL_RCC_OscConfig+0x240>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d036      	beq.n	8005764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056fe:	4b15      	ldr	r3, [pc, #84]	; (8005754 <HAL_RCC_OscConfig+0x248>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc ff6a 	bl	80025dc <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800570c:	f7fc ff66 	bl	80025dc <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e167      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_RCC_OscConfig+0x240>)
 8005720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x200>
 800572a:	e01b      	b.n	8005764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_RCC_OscConfig+0x248>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005732:	f7fc ff53 	bl	80025dc <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005738:	e00e      	b.n	8005758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573a:	f7fc ff4f 	bl	80025dc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d907      	bls.n	8005758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e150      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
 800574c:	40023800 	.word	0x40023800
 8005750:	42470000 	.word	0x42470000
 8005754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005758:	4b88      	ldr	r3, [pc, #544]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800575a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ea      	bne.n	800573a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8097 	beq.w	80058a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005772:	2300      	movs	r3, #0
 8005774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005776:	4b81      	ldr	r3, [pc, #516]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	4b7d      	ldr	r3, [pc, #500]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a7c      	ldr	r2, [pc, #496]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800578c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b7a      	ldr	r3, [pc, #488]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800579e:	2301      	movs	r3, #1
 80057a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <HAL_RCC_OscConfig+0x474>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d118      	bne.n	80057e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ae:	4b74      	ldr	r3, [pc, #464]	; (8005980 <HAL_RCC_OscConfig+0x474>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a73      	ldr	r2, [pc, #460]	; (8005980 <HAL_RCC_OscConfig+0x474>)
 80057b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ba:	f7fc ff0f 	bl	80025dc <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c2:	f7fc ff0b 	bl	80025dc <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e10c      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	4b6a      	ldr	r3, [pc, #424]	; (8005980 <HAL_RCC_OscConfig+0x474>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f0      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x2ea>
 80057e8:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a63      	ldr	r2, [pc, #396]	; (800597c <HAL_RCC_OscConfig+0x470>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	e01c      	b.n	8005830 <HAL_RCC_OscConfig+0x324>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x30c>
 80057fe:	4b5f      	ldr	r3, [pc, #380]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	4a5e      	ldr	r2, [pc, #376]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005804:	f043 0304 	orr.w	r3, r3, #4
 8005808:	6713      	str	r3, [r2, #112]	; 0x70
 800580a:	4b5c      	ldr	r3, [pc, #368]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a5b      	ldr	r2, [pc, #364]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0x324>
 8005818:	4b58      	ldr	r3, [pc, #352]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800581e:	f023 0301 	bic.w	r3, r3, #1
 8005822:	6713      	str	r3, [r2, #112]	; 0x70
 8005824:	4b55      	ldr	r3, [pc, #340]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a54      	ldr	r2, [pc, #336]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800582a:	f023 0304 	bic.w	r3, r3, #4
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d015      	beq.n	8005864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc fed0 	bl	80025dc <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583e:	e00a      	b.n	8005856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005840:	f7fc fecc 	bl	80025dc <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f241 3288 	movw	r2, #5000	; 0x1388
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e0cb      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005856:	4b49      	ldr	r3, [pc, #292]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ee      	beq.n	8005840 <HAL_RCC_OscConfig+0x334>
 8005862:	e014      	b.n	800588e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005864:	f7fc feba 	bl	80025dc <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800586a:	e00a      	b.n	8005882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586c:	f7fc feb6 	bl	80025dc <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	; 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e0b5      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005882:	4b3e      	ldr	r3, [pc, #248]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ee      	bne.n	800586c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d105      	bne.n	80058a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005894:	4b39      	ldr	r3, [pc, #228]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	4a38      	ldr	r2, [pc, #224]	; (800597c <HAL_RCC_OscConfig+0x470>)
 800589a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 80a1 	beq.w	80059ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058aa:	4b34      	ldr	r3, [pc, #208]	; (800597c <HAL_RCC_OscConfig+0x470>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d05c      	beq.n	8005970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d141      	bne.n	8005942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058be:	4b31      	ldr	r3, [pc, #196]	; (8005984 <HAL_RCC_OscConfig+0x478>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fc fe8a 	bl	80025dc <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fc fe86 	bl	80025dc <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e087      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <HAL_RCC_OscConfig+0x470>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	019b      	lsls	r3, r3, #6
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	3b01      	subs	r3, #1
 8005904:	041b      	lsls	r3, r3, #16
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	061b      	lsls	r3, r3, #24
 800590e:	491b      	ldr	r1, [pc, #108]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005914:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <HAL_RCC_OscConfig+0x478>)
 8005916:	2201      	movs	r2, #1
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fc fe5f 	bl	80025dc <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005922:	f7fc fe5b 	bl	80025dc <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e05c      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005934:	4b11      	ldr	r3, [pc, #68]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0f0      	beq.n	8005922 <HAL_RCC_OscConfig+0x416>
 8005940:	e054      	b.n	80059ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <HAL_RCC_OscConfig+0x478>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005948:	f7fc fe48 	bl	80025dc <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005950:	f7fc fe44 	bl	80025dc <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e045      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_RCC_OscConfig+0x470>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f0      	bne.n	8005950 <HAL_RCC_OscConfig+0x444>
 800596e:	e03d      	b.n	80059ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d107      	bne.n	8005988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e038      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
 800597c:	40023800 	.word	0x40023800
 8005980:	40007000 	.word	0x40007000
 8005984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <HAL_RCC_OscConfig+0x4ec>)
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d028      	beq.n	80059e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d121      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d11a      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059b8:	4013      	ands	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d111      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	3b01      	subs	r3, #1
 80059d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d107      	bne.n	80059e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800

080059fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0cc      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a10:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d90c      	bls.n	8005a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b65      	ldr	r3, [pc, #404]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a26:	4b63      	ldr	r3, [pc, #396]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0b8      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d020      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a50:	4b59      	ldr	r3, [pc, #356]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	4a58      	ldr	r2, [pc, #352]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a68:	4b53      	ldr	r3, [pc, #332]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a52      	ldr	r2, [pc, #328]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a74:	4b50      	ldr	r3, [pc, #320]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	494d      	ldr	r1, [pc, #308]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d044      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	4b47      	ldr	r3, [pc, #284]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d119      	bne.n	8005ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e07f      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e06f      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aca:	4b3b      	ldr	r3, [pc, #236]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e067      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ada:	4b37      	ldr	r3, [pc, #220]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f023 0203 	bic.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	4934      	ldr	r1, [pc, #208]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aec:	f7fc fd76 	bl	80025dc <HAL_GetTick>
 8005af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af4:	f7fc fd72 	bl	80025dc <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e04f      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b0a:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 020c 	and.w	r2, r3, #12
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d1eb      	bne.n	8005af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d20c      	bcs.n	8005b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e032      	b.n	8005baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b50:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	4916      	ldr	r1, [pc, #88]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b6e:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	490e      	ldr	r1, [pc, #56]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b82:	f000 f821 	bl	8005bc8 <HAL_RCC_GetSysClockFreq>
 8005b86:	4602      	mov	r2, r0
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	490a      	ldr	r1, [pc, #40]	; (8005bbc <HAL_RCC_ClockConfig+0x1c0>)
 8005b94:	5ccb      	ldrb	r3, [r1, r3]
 8005b96:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9a:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fc fcd6 	bl	8002554 <HAL_InitTick>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40023c00 	.word	0x40023c00
 8005bb8:	40023800 	.word	0x40023800
 8005bbc:	08007630 	.word	0x08007630
 8005bc0:	20000214 	.word	0x20000214
 8005bc4:	20000218 	.word	0x20000218

08005bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bcc:	b090      	sub	sp, #64	; 0x40
 8005bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	2300      	movs	r3, #0
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005be0:	4b59      	ldr	r3, [pc, #356]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 030c 	and.w	r3, r3, #12
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d00d      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x40>
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	f200 80a1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_RCC_GetSysClockFreq+0x34>
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bfa:	e09b      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bfc:	4b53      	ldr	r3, [pc, #332]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c00:	e09b      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c02:	4b53      	ldr	r3, [pc, #332]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c06:	e098      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c08:	4b4f      	ldr	r3, [pc, #316]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c12:	4b4d      	ldr	r3, [pc, #308]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d028      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c1e:	4b4a      	ldr	r3, [pc, #296]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	099b      	lsrs	r3, r3, #6
 8005c24:	2200      	movs	r2, #0
 8005c26:	623b      	str	r3, [r7, #32]
 8005c28:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c30:	2100      	movs	r1, #0
 8005c32:	4b47      	ldr	r3, [pc, #284]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c34:	fb03 f201 	mul.w	r2, r3, r1
 8005c38:	2300      	movs	r3, #0
 8005c3a:	fb00 f303 	mul.w	r3, r0, r3
 8005c3e:	4413      	add	r3, r2
 8005c40:	4a43      	ldr	r2, [pc, #268]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c42:	fba0 1202 	umull	r1, r2, r0, r2
 8005c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c48:	460a      	mov	r2, r1
 8005c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4e:	4413      	add	r3, r2
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c54:	2200      	movs	r2, #0
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	61fa      	str	r2, [r7, #28]
 8005c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c62:	f7fa fed7 	bl	8000a14 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6e:	e053      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c70:	4b35      	ldr	r3, [pc, #212]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	099b      	lsrs	r3, r3, #6
 8005c76:	2200      	movs	r2, #0
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	617a      	str	r2, [r7, #20]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c82:	f04f 0b00 	mov.w	fp, #0
 8005c86:	4652      	mov	r2, sl
 8005c88:	465b      	mov	r3, fp
 8005c8a:	f04f 0000 	mov.w	r0, #0
 8005c8e:	f04f 0100 	mov.w	r1, #0
 8005c92:	0159      	lsls	r1, r3, #5
 8005c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c98:	0150      	lsls	r0, r2, #5
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8005ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cba:	ebb2 0408 	subs.w	r4, r2, r8
 8005cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	00eb      	lsls	r3, r5, #3
 8005ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cd0:	00e2      	lsls	r2, r4, #3
 8005cd2:	4614      	mov	r4, r2
 8005cd4:	461d      	mov	r5, r3
 8005cd6:	eb14 030a 	adds.w	r3, r4, sl
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	eb45 030b 	adc.w	r3, r5, fp
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	028b      	lsls	r3, r1, #10
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	028a      	lsls	r2, r1, #10
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	2200      	movs	r2, #0
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	60fa      	str	r2, [r7, #12]
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	f7fa fe82 	bl	8000a14 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3740      	adds	r7, #64	; 0x40
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	017d7840 	.word	0x017d7840

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000214 	.word	0x20000214

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	08007640 	.word	0x08007640

08005d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d98:	f7ff ffdc 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	08007640 	.word	0x08007640

08005dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e041      	b.n	8005e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fc fa6e 	bl	80022c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fac0 	bl	8006380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d001      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e044      	b.n	8005efe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <HAL_TIM_Base_Start_IT+0xb0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d018      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d013      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1a      	ldr	r2, [pc, #104]	; (8005f10 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00e      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <HAL_TIM_Base_Start_IT+0xb8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d009      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <HAL_TIM_Base_Start_IT+0xbc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <HAL_TIM_Base_Start_IT+0xc0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d111      	bne.n	8005eec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b06      	cmp	r3, #6
 8005ed8:	d010      	beq.n	8005efc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eea:	e007      	b.n	8005efc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40014000 	.word	0x40014000

08005f20 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0201 	bic.w	r2, r2, #1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a1a      	ldr	r2, [r3, #32]
 8005f3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10f      	bne.n	8005f68 <HAL_TIM_Base_Stop_IT+0x48>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a1a      	ldr	r2, [r3, #32]
 8005f4e:	f240 4344 	movw	r3, #1092	; 0x444
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <HAL_TIM_Base_Stop_IT+0x48>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d122      	bne.n	8005fda <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d11b      	bne.n	8005fda <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0202 	mvn.w	r2, #2
 8005faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9bf 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005fc6:	e005      	b.n	8005fd4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f9b1 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f9c2 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d122      	bne.n	800602e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d11b      	bne.n	800602e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0204 	mvn.w	r2, #4
 8005ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f995 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 800601a:	e005      	b.n	8006028 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f987 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f998 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b08      	cmp	r3, #8
 800603a:	d122      	bne.n	8006082 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d11b      	bne.n	8006082 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0208 	mvn.w	r2, #8
 8006052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2204      	movs	r2, #4
 8006058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f96b 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 800606e:	e005      	b.n	800607c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f95d 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f96e 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0310 	and.w	r3, r3, #16
 800608c:	2b10      	cmp	r3, #16
 800608e:	d122      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d11b      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0210 	mvn.w	r2, #16
 80060a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2208      	movs	r2, #8
 80060ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f941 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 80060c2:	e005      	b.n	80060d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f933 	bl	8006330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f944 	bl	8006358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d10e      	bne.n	8006102 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d107      	bne.n	8006102 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0201 	mvn.w	r2, #1
 80060fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f90d 	bl	800631c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b80      	cmp	r3, #128	; 0x80
 800610e:	d10e      	bne.n	800612e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d107      	bne.n	800612e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fabb 	bl	80066a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f909 	bl	800636c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b20      	cmp	r3, #32
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0220 	mvn.w	r2, #32
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa85 	bl	8006690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_ConfigClockSource+0x1c>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e0b4      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x186>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e2:	d03e      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0xd4>
 80061e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e8:	f200 8087 	bhi.w	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 80061ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f0:	f000 8086 	beq.w	8006300 <HAL_TIM_ConfigClockSource+0x172>
 80061f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f8:	d87f      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 80061fa:	2b70      	cmp	r3, #112	; 0x70
 80061fc:	d01a      	beq.n	8006234 <HAL_TIM_ConfigClockSource+0xa6>
 80061fe:	2b70      	cmp	r3, #112	; 0x70
 8006200:	d87b      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 8006202:	2b60      	cmp	r3, #96	; 0x60
 8006204:	d050      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x11a>
 8006206:	2b60      	cmp	r3, #96	; 0x60
 8006208:	d877      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 800620a:	2b50      	cmp	r3, #80	; 0x50
 800620c:	d03c      	beq.n	8006288 <HAL_TIM_ConfigClockSource+0xfa>
 800620e:	2b50      	cmp	r3, #80	; 0x50
 8006210:	d873      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d058      	beq.n	80062c8 <HAL_TIM_ConfigClockSource+0x13a>
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d86f      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 800621a:	2b30      	cmp	r3, #48	; 0x30
 800621c:	d064      	beq.n	80062e8 <HAL_TIM_ConfigClockSource+0x15a>
 800621e:	2b30      	cmp	r3, #48	; 0x30
 8006220:	d86b      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 8006222:	2b20      	cmp	r3, #32
 8006224:	d060      	beq.n	80062e8 <HAL_TIM_ConfigClockSource+0x15a>
 8006226:	2b20      	cmp	r3, #32
 8006228:	d867      	bhi.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d05c      	beq.n	80062e8 <HAL_TIM_ConfigClockSource+0x15a>
 800622e:	2b10      	cmp	r3, #16
 8006230:	d05a      	beq.n	80062e8 <HAL_TIM_ConfigClockSource+0x15a>
 8006232:	e062      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f000 f996 	bl	8006574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006256:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	609a      	str	r2, [r3, #8]
      break;
 8006260:	e04f      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6899      	ldr	r1, [r3, #8]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f000 f97f 	bl	8006574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006284:	609a      	str	r2, [r3, #8]
      break;
 8006286:	e03c      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	6859      	ldr	r1, [r3, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	461a      	mov	r2, r3
 8006296:	f000 f8f3 	bl	8006480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2150      	movs	r1, #80	; 0x50
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f94c 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 80062a6:	e02c      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6859      	ldr	r1, [r3, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f000 f912 	bl	80064de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2160      	movs	r1, #96	; 0x60
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f93c 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 80062c6:	e01c      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f000 f8d3 	bl	8006480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2140      	movs	r1, #64	; 0x40
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f92c 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 80062e6:	e00c      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 f923 	bl	800653e <TIM_ITRx_SetConfig>
      break;
 80062f8:	e003      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
      break;
 80062fe:	e000      	b.n	8006302 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a34      	ldr	r2, [pc, #208]	; (8006464 <TIM_Base_SetConfig+0xe4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00f      	beq.n	80063b8 <TIM_Base_SetConfig+0x38>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d00b      	beq.n	80063b8 <TIM_Base_SetConfig+0x38>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a31      	ldr	r2, [pc, #196]	; (8006468 <TIM_Base_SetConfig+0xe8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d007      	beq.n	80063b8 <TIM_Base_SetConfig+0x38>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a30      	ldr	r2, [pc, #192]	; (800646c <TIM_Base_SetConfig+0xec>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d003      	beq.n	80063b8 <TIM_Base_SetConfig+0x38>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a2f      	ldr	r2, [pc, #188]	; (8006470 <TIM_Base_SetConfig+0xf0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d108      	bne.n	80063ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <TIM_Base_SetConfig+0xe4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d01b      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d8:	d017      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a22      	ldr	r2, [pc, #136]	; (8006468 <TIM_Base_SetConfig+0xe8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a21      	ldr	r2, [pc, #132]	; (800646c <TIM_Base_SetConfig+0xec>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <TIM_Base_SetConfig+0xf0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <TIM_Base_SetConfig+0xf4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <TIM_Base_SetConfig+0xf8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_Base_SetConfig+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1d      	ldr	r2, [pc, #116]	; (800647c <TIM_Base_SetConfig+0xfc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a08      	ldr	r2, [pc, #32]	; (8006464 <TIM_Base_SetConfig+0xe4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d103      	bne.n	8006450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	615a      	str	r2, [r3, #20]
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40000c00 	.word	0x40000c00
 8006474:	40014000 	.word	0x40014000
 8006478:	40014400 	.word	0x40014400
 800647c:	40014800 	.word	0x40014800

08006480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f023 0201 	bic.w	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 030a 	bic.w	r3, r3, #10
 80064bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064de:	b480      	push	{r7}
 80064e0:	b087      	sub	sp, #28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	f023 0210 	bic.w	r2, r3, #16
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800651a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	621a      	str	r2, [r3, #32]
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800653e:	b480      	push	{r7}
 8006540:	b085      	sub	sp, #20
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	f043 0307 	orr.w	r3, r3, #7
 8006560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800658e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	021a      	lsls	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	431a      	orrs	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4313      	orrs	r3, r2
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	609a      	str	r2, [r3, #8]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e050      	b.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1c      	ldr	r2, [pc, #112]	; (800667c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006618:	d013      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a18      	ldr	r2, [pc, #96]	; (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a16      	ldr	r2, [pc, #88]	; (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a15      	ldr	r2, [pc, #84]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a13      	ldr	r2, [pc, #76]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10c      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4313      	orrs	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40014000 	.word	0x40014000

08006690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e03f      	b.n	800674a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb fe9c 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2224      	movs	r2, #36	; 0x24
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fceb 	bl	80070d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	691a      	ldr	r2, [r3, #16]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	4613      	mov	r3, r2
 800675e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b20      	cmp	r3, #32
 800676a:	d130      	bne.n	80067ce <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_UART_Transmit_IT+0x26>
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e029      	b.n	80067d0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_UART_Transmit_IT+0x38>
 8006786:	2302      	movs	r3, #2
 8006788:	e022      	b.n	80067d0 <HAL_UART_Transmit_IT+0x7e>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2221      	movs	r2, #33	; 0x21
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067c8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b0ba      	sub	sp, #232	; 0xe8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006802:	2300      	movs	r3, #0
 8006804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006808:	2300      	movs	r3, #0
 800680a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800681a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10f      	bne.n	8006842 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_UART_IRQHandler+0x66>
 800682e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb91 	bl	8006f62 <UART_Receive_IT>
      return;
 8006840:	e256      	b.n	8006cf0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80de 	beq.w	8006a08 <HAL_UART_IRQHandler+0x22c>
 800684c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80d1 	beq.w	8006a08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <HAL_UART_IRQHandler+0xae>
 8006872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0201 	orr.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_UART_IRQHandler+0xd2>
 8006896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0xf6>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0204 	orr.w	r2, r3, #4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 0308 	and.w	r3, r3, #8
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d011      	beq.n	8006902 <HAL_UART_IRQHandler+0x126>
 80068de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0208 	orr.w	r2, r3, #8
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 81ed 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <HAL_UART_IRQHandler+0x14e>
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb1c 	bl	8006f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	bf0c      	ite	eq
 8006938:	2301      	moveq	r3, #1
 800693a:	2300      	movne	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_UART_IRQHandler+0x17a>
 800694e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04f      	beq.n	80069f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa24 	bl	8006da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d141      	bne.n	80069ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800699a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1d9      	bne.n	800696a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d013      	beq.n	80069e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	4a7d      	ldr	r2, [pc, #500]	; (8006bb8 <HAL_UART_IRQHandler+0x3dc>)
 80069c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fc fc21 	bl	8003212 <HAL_DMA_Abort_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	e00e      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb f84c 	bl	8001a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	e00a      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fb f848 	bl	8001a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e006      	b.n	8006a04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb f844 	bl	8001a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a02:	e170      	b.n	8006ce6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	bf00      	nop
    return;
 8006a06:	e16e      	b.n	8006ce6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	f040 814a 	bne.w	8006ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8143 	beq.w	8006ca6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a24:	f003 0310 	and.w	r3, r3, #16
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 813c 	beq.w	8006ca6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	f040 80b4 	bne.w	8006bbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8140 	beq.w	8006cea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a72:	429a      	cmp	r2, r3
 8006a74:	f080 8139 	bcs.w	8006cea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8a:	f000 8088 	beq.w	8006b9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1d9      	bne.n	8006a8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3314      	adds	r3, #20
 8006afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e1      	bne.n	8006ada <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3314      	adds	r3, #20
 8006b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e3      	bne.n	8006b16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6e:	f023 0310 	bic.w	r3, r3, #16
 8006b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	330c      	adds	r3, #12
 8006b7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b80:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b88:	e841 2300 	strex	r3, r2, [r1]
 8006b8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1e3      	bne.n	8006b5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fc faca 	bl	8003132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f8a2 	bl	8006cf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb4:	e099      	b.n	8006cea <HAL_UART_IRQHandler+0x50e>
 8006bb6:	bf00      	nop
 8006bb8:	08006e6b 	.word	0x08006e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 808b 	beq.w	8006cee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8086 	beq.w	8006cee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	330c      	adds	r3, #12
 8006c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c06:	647a      	str	r2, [r7, #68]	; 0x44
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e3      	bne.n	8006be2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c84:	61fa      	str	r2, [r7, #28]
 8006c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	617b      	str	r3, [r7, #20]
   return(result);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e3      	bne.n	8006c60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f82a 	bl	8006cf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca4:	e023      	b.n	8006cee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x4ea>
 8006cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8e7 	bl	8006e92 <UART_Transmit_IT>
    return;
 8006cc4:	e014      	b.n	8006cf0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x514>
 8006cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d008      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f927 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 8006ce4:	e004      	b.n	8006cf0 <HAL_UART_IRQHandler+0x514>
    return;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_UART_IRQHandler+0x514>
      return;
 8006cee:	bf00      	nop
  }
}
 8006cf0:	37e8      	adds	r7, #232	; 0xe8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	4613      	mov	r3, r2
 8006d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2222      	movs	r2, #34	; 0x22
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d74:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0220 	orr.w	r2, r2, #32
 8006d94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b095      	sub	sp, #84	; 0x54
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dcc:	643a      	str	r2, [r7, #64]	; 0x40
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e5      	bne.n	8006de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d119      	bne.n	8006e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	647b      	str	r3, [r7, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3c:	61ba      	str	r2, [r7, #24]
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e5e:	bf00      	nop
 8006e60:	3754      	adds	r7, #84	; 0x54
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7fa fdfd 	bl	8001a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d13e      	bne.n	8006f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	d114      	bne.n	8006eda <UART_Transmit_IT+0x48>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e008      	b.n	8006eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6211      	str	r1, [r2, #32]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10f      	bne.n	8006f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fd3c 	bl	80019d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b08c      	sub	sp, #48	; 0x30
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b22      	cmp	r3, #34	; 0x22
 8006f74:	f040 80ab 	bne.w	80070ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f80:	d117      	bne.n	8006fb2 <UART_Receive_IT+0x50>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d113      	bne.n	8006fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
 8006fb0:	e026      	b.n	8007000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d007      	beq.n	8006fd6 <UART_Receive_IT+0x74>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <UART_Receive_IT+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e008      	b.n	8006ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4619      	mov	r1, r3
 800700e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007010:	2b00      	cmp	r3, #0
 8007012:	d15a      	bne.n	80070ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b01      	cmp	r3, #1
 8007052:	d135      	bne.n	80070c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	613b      	str	r3, [r7, #16]
   return(result);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	623a      	str	r2, [r7, #32]
 800707c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	69f9      	ldr	r1, [r7, #28]
 8007080:	6a3a      	ldr	r2, [r7, #32]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	61bb      	str	r3, [r7, #24]
   return(result);
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e5      	bne.n	800705a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b10      	cmp	r3, #16
 800709a:	d10a      	bne.n	80070b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff fe1d 	bl	8006cf8 <HAL_UARTEx_RxEventCallback>
 80070be:	e002      	b.n	80070c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7fa fc9b 	bl	80019fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e002      	b.n	80070d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e000      	b.n	80070d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070ce:	2302      	movs	r3, #2
  }
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3730      	adds	r7, #48	; 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070dc:	b0c0      	sub	sp, #256	; 0x100
 80070de:	af00      	add	r7, sp, #0
 80070e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	68d9      	ldr	r1, [r3, #12]
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	ea40 0301 	orr.w	r3, r0, r1
 8007100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	431a      	orrs	r2, r3
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	431a      	orrs	r2, r3
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	69db      	ldr	r3, [r3, #28]
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007130:	f021 010c 	bic.w	r1, r1, #12
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800713e:	430b      	orrs	r3, r1
 8007140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	6999      	ldr	r1, [r3, #24]
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	ea40 0301 	orr.w	r3, r0, r1
 800715e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	4b8f      	ldr	r3, [pc, #572]	; (80073a4 <UART_SetConfig+0x2cc>)
 8007168:	429a      	cmp	r2, r3
 800716a:	d005      	beq.n	8007178 <UART_SetConfig+0xa0>
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b8d      	ldr	r3, [pc, #564]	; (80073a8 <UART_SetConfig+0x2d0>)
 8007174:	429a      	cmp	r2, r3
 8007176:	d104      	bne.n	8007182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007178:	f7fe fe0c 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
 800717c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007180:	e003      	b.n	800718a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007182:	f7fe fdf3 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8007186:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007194:	f040 810c 	bne.w	80073b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800719c:	2200      	movs	r2, #0
 800719e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071aa:	4622      	mov	r2, r4
 80071ac:	462b      	mov	r3, r5
 80071ae:	1891      	adds	r1, r2, r2
 80071b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80071b2:	415b      	adcs	r3, r3
 80071b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071ba:	4621      	mov	r1, r4
 80071bc:	eb12 0801 	adds.w	r8, r2, r1
 80071c0:	4629      	mov	r1, r5
 80071c2:	eb43 0901 	adc.w	r9, r3, r1
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071da:	4690      	mov	r8, r2
 80071dc:	4699      	mov	r9, r3
 80071de:	4623      	mov	r3, r4
 80071e0:	eb18 0303 	adds.w	r3, r8, r3
 80071e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071e8:	462b      	mov	r3, r5
 80071ea:	eb49 0303 	adc.w	r3, r9, r3
 80071ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007206:	460b      	mov	r3, r1
 8007208:	18db      	adds	r3, r3, r3
 800720a:	653b      	str	r3, [r7, #80]	; 0x50
 800720c:	4613      	mov	r3, r2
 800720e:	eb42 0303 	adc.w	r3, r2, r3
 8007212:	657b      	str	r3, [r7, #84]	; 0x54
 8007214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800721c:	f7f9 fbfa 	bl	8000a14 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4b61      	ldr	r3, [pc, #388]	; (80073ac <UART_SetConfig+0x2d4>)
 8007226:	fba3 2302 	umull	r2, r3, r3, r2
 800722a:	095b      	lsrs	r3, r3, #5
 800722c:	011c      	lsls	r4, r3, #4
 800722e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007232:	2200      	movs	r2, #0
 8007234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007238:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800723c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	1891      	adds	r1, r2, r2
 8007246:	64b9      	str	r1, [r7, #72]	; 0x48
 8007248:	415b      	adcs	r3, r3
 800724a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800724c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007250:	4641      	mov	r1, r8
 8007252:	eb12 0a01 	adds.w	sl, r2, r1
 8007256:	4649      	mov	r1, r9
 8007258:	eb43 0b01 	adc.w	fp, r3, r1
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800726c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007270:	4692      	mov	sl, r2
 8007272:	469b      	mov	fp, r3
 8007274:	4643      	mov	r3, r8
 8007276:	eb1a 0303 	adds.w	r3, sl, r3
 800727a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800727e:	464b      	mov	r3, r9
 8007280:	eb4b 0303 	adc.w	r3, fp, r3
 8007284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007294:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800729c:	460b      	mov	r3, r1
 800729e:	18db      	adds	r3, r3, r3
 80072a0:	643b      	str	r3, [r7, #64]	; 0x40
 80072a2:	4613      	mov	r3, r2
 80072a4:	eb42 0303 	adc.w	r3, r2, r3
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
 80072aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072b2:	f7f9 fbaf 	bl	8000a14 <__aeabi_uldivmod>
 80072b6:	4602      	mov	r2, r0
 80072b8:	460b      	mov	r3, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <UART_SetConfig+0x2d4>)
 80072be:	fba3 2301 	umull	r2, r3, r3, r1
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	2264      	movs	r2, #100	; 0x64
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	1acb      	subs	r3, r1, r3
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072d2:	4b36      	ldr	r3, [pc, #216]	; (80073ac <UART_SetConfig+0x2d4>)
 80072d4:	fba3 2302 	umull	r2, r3, r3, r2
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072e0:	441c      	add	r4, r3
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	1891      	adds	r1, r2, r2
 80072fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80072fc:	415b      	adcs	r3, r3
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007304:	4641      	mov	r1, r8
 8007306:	1851      	adds	r1, r2, r1
 8007308:	6339      	str	r1, [r7, #48]	; 0x30
 800730a:	4649      	mov	r1, r9
 800730c:	414b      	adcs	r3, r1
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800731c:	4659      	mov	r1, fp
 800731e:	00cb      	lsls	r3, r1, #3
 8007320:	4651      	mov	r1, sl
 8007322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007326:	4651      	mov	r1, sl
 8007328:	00ca      	lsls	r2, r1, #3
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	4603      	mov	r3, r0
 8007330:	4642      	mov	r2, r8
 8007332:	189b      	adds	r3, r3, r2
 8007334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007338:	464b      	mov	r3, r9
 800733a:	460a      	mov	r2, r1
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007358:	460b      	mov	r3, r1
 800735a:	18db      	adds	r3, r3, r3
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
 800735e:	4613      	mov	r3, r2
 8007360:	eb42 0303 	adc.w	r3, r2, r3
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800736a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800736e:	f7f9 fb51 	bl	8000a14 <__aeabi_uldivmod>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <UART_SetConfig+0x2d4>)
 8007378:	fba3 1302 	umull	r1, r3, r3, r2
 800737c:	095b      	lsrs	r3, r3, #5
 800737e:	2164      	movs	r1, #100	; 0x64
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	3332      	adds	r3, #50	; 0x32
 800738a:	4a08      	ldr	r2, [pc, #32]	; (80073ac <UART_SetConfig+0x2d4>)
 800738c:	fba2 2303 	umull	r2, r3, r2, r3
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	f003 0207 	and.w	r2, r3, #7
 8007396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4422      	add	r2, r4
 800739e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073a0:	e105      	b.n	80075ae <UART_SetConfig+0x4d6>
 80073a2:	bf00      	nop
 80073a4:	40011000 	.word	0x40011000
 80073a8:	40011400 	.word	0x40011400
 80073ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073c2:	4642      	mov	r2, r8
 80073c4:	464b      	mov	r3, r9
 80073c6:	1891      	adds	r1, r2, r2
 80073c8:	6239      	str	r1, [r7, #32]
 80073ca:	415b      	adcs	r3, r3
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
 80073ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073d2:	4641      	mov	r1, r8
 80073d4:	1854      	adds	r4, r2, r1
 80073d6:	4649      	mov	r1, r9
 80073d8:	eb43 0501 	adc.w	r5, r3, r1
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	00eb      	lsls	r3, r5, #3
 80073e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ea:	00e2      	lsls	r2, r4, #3
 80073ec:	4614      	mov	r4, r2
 80073ee:	461d      	mov	r5, r3
 80073f0:	4643      	mov	r3, r8
 80073f2:	18e3      	adds	r3, r4, r3
 80073f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073f8:	464b      	mov	r3, r9
 80073fa:	eb45 0303 	adc.w	r3, r5, r3
 80073fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800740e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800741e:	4629      	mov	r1, r5
 8007420:	008b      	lsls	r3, r1, #2
 8007422:	4621      	mov	r1, r4
 8007424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007428:	4621      	mov	r1, r4
 800742a:	008a      	lsls	r2, r1, #2
 800742c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007430:	f7f9 faf0 	bl	8000a14 <__aeabi_uldivmod>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4b60      	ldr	r3, [pc, #384]	; (80075bc <UART_SetConfig+0x4e4>)
 800743a:	fba3 2302 	umull	r2, r3, r3, r2
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	011c      	lsls	r4, r3, #4
 8007442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007446:	2200      	movs	r2, #0
 8007448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800744c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007454:	4642      	mov	r2, r8
 8007456:	464b      	mov	r3, r9
 8007458:	1891      	adds	r1, r2, r2
 800745a:	61b9      	str	r1, [r7, #24]
 800745c:	415b      	adcs	r3, r3
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007464:	4641      	mov	r1, r8
 8007466:	1851      	adds	r1, r2, r1
 8007468:	6139      	str	r1, [r7, #16]
 800746a:	4649      	mov	r1, r9
 800746c:	414b      	adcs	r3, r1
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	f04f 0200 	mov.w	r2, #0
 8007474:	f04f 0300 	mov.w	r3, #0
 8007478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800747c:	4659      	mov	r1, fp
 800747e:	00cb      	lsls	r3, r1, #3
 8007480:	4651      	mov	r1, sl
 8007482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007486:	4651      	mov	r1, sl
 8007488:	00ca      	lsls	r2, r1, #3
 800748a:	4610      	mov	r0, r2
 800748c:	4619      	mov	r1, r3
 800748e:	4603      	mov	r3, r0
 8007490:	4642      	mov	r2, r8
 8007492:	189b      	adds	r3, r3, r2
 8007494:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007498:	464b      	mov	r3, r9
 800749a:	460a      	mov	r2, r1
 800749c:	eb42 0303 	adc.w	r3, r2, r3
 80074a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074b0:	f04f 0200 	mov.w	r2, #0
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074bc:	4649      	mov	r1, r9
 80074be:	008b      	lsls	r3, r1, #2
 80074c0:	4641      	mov	r1, r8
 80074c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074c6:	4641      	mov	r1, r8
 80074c8:	008a      	lsls	r2, r1, #2
 80074ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074ce:	f7f9 faa1 	bl	8000a14 <__aeabi_uldivmod>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4b39      	ldr	r3, [pc, #228]	; (80075bc <UART_SetConfig+0x4e4>)
 80074d8:	fba3 1302 	umull	r1, r3, r3, r2
 80074dc:	095b      	lsrs	r3, r3, #5
 80074de:	2164      	movs	r1, #100	; 0x64
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	3332      	adds	r3, #50	; 0x32
 80074ea:	4a34      	ldr	r2, [pc, #208]	; (80075bc <UART_SetConfig+0x4e4>)
 80074ec:	fba2 2303 	umull	r2, r3, r2, r3
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074f6:	441c      	add	r4, r3
 80074f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074fc:	2200      	movs	r2, #0
 80074fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007500:	677a      	str	r2, [r7, #116]	; 0x74
 8007502:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007506:	4642      	mov	r2, r8
 8007508:	464b      	mov	r3, r9
 800750a:	1891      	adds	r1, r2, r2
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	415b      	adcs	r3, r3
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007516:	4641      	mov	r1, r8
 8007518:	1851      	adds	r1, r2, r1
 800751a:	6039      	str	r1, [r7, #0]
 800751c:	4649      	mov	r1, r9
 800751e:	414b      	adcs	r3, r1
 8007520:	607b      	str	r3, [r7, #4]
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800752e:	4659      	mov	r1, fp
 8007530:	00cb      	lsls	r3, r1, #3
 8007532:	4651      	mov	r1, sl
 8007534:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007538:	4651      	mov	r1, sl
 800753a:	00ca      	lsls	r2, r1, #3
 800753c:	4610      	mov	r0, r2
 800753e:	4619      	mov	r1, r3
 8007540:	4603      	mov	r3, r0
 8007542:	4642      	mov	r2, r8
 8007544:	189b      	adds	r3, r3, r2
 8007546:	66bb      	str	r3, [r7, #104]	; 0x68
 8007548:	464b      	mov	r3, r9
 800754a:	460a      	mov	r2, r1
 800754c:	eb42 0303 	adc.w	r3, r2, r3
 8007550:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	663b      	str	r3, [r7, #96]	; 0x60
 800755c:	667a      	str	r2, [r7, #100]	; 0x64
 800755e:	f04f 0200 	mov.w	r2, #0
 8007562:	f04f 0300 	mov.w	r3, #0
 8007566:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800756a:	4649      	mov	r1, r9
 800756c:	008b      	lsls	r3, r1, #2
 800756e:	4641      	mov	r1, r8
 8007570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007574:	4641      	mov	r1, r8
 8007576:	008a      	lsls	r2, r1, #2
 8007578:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800757c:	f7f9 fa4a 	bl	8000a14 <__aeabi_uldivmod>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <UART_SetConfig+0x4e4>)
 8007586:	fba3 1302 	umull	r1, r3, r3, r2
 800758a:	095b      	lsrs	r3, r3, #5
 800758c:	2164      	movs	r1, #100	; 0x64
 800758e:	fb01 f303 	mul.w	r3, r1, r3
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	3332      	adds	r3, #50	; 0x32
 8007598:	4a08      	ldr	r2, [pc, #32]	; (80075bc <UART_SetConfig+0x4e4>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	095b      	lsrs	r3, r3, #5
 80075a0:	f003 020f 	and.w	r2, r3, #15
 80075a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4422      	add	r2, r4
 80075ac:	609a      	str	r2, [r3, #8]
}
 80075ae:	bf00      	nop
 80075b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075b4:	46bd      	mov	sp, r7
 80075b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ba:	bf00      	nop
 80075bc:	51eb851f 	.word	0x51eb851f

080075c0 <__libc_init_array>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	4d0d      	ldr	r5, [pc, #52]	; (80075f8 <__libc_init_array+0x38>)
 80075c4:	4c0d      	ldr	r4, [pc, #52]	; (80075fc <__libc_init_array+0x3c>)
 80075c6:	1b64      	subs	r4, r4, r5
 80075c8:	10a4      	asrs	r4, r4, #2
 80075ca:	2600      	movs	r6, #0
 80075cc:	42a6      	cmp	r6, r4
 80075ce:	d109      	bne.n	80075e4 <__libc_init_array+0x24>
 80075d0:	4d0b      	ldr	r5, [pc, #44]	; (8007600 <__libc_init_array+0x40>)
 80075d2:	4c0c      	ldr	r4, [pc, #48]	; (8007604 <__libc_init_array+0x44>)
 80075d4:	f000 f820 	bl	8007618 <_init>
 80075d8:	1b64      	subs	r4, r4, r5
 80075da:	10a4      	asrs	r4, r4, #2
 80075dc:	2600      	movs	r6, #0
 80075de:	42a6      	cmp	r6, r4
 80075e0:	d105      	bne.n	80075ee <__libc_init_array+0x2e>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e8:	4798      	blx	r3
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7ee      	b.n	80075cc <__libc_init_array+0xc>
 80075ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f2:	4798      	blx	r3
 80075f4:	3601      	adds	r6, #1
 80075f6:	e7f2      	b.n	80075de <__libc_init_array+0x1e>
 80075f8:	08007650 	.word	0x08007650
 80075fc:	08007650 	.word	0x08007650
 8007600:	08007650 	.word	0x08007650
 8007604:	08007654 	.word	0x08007654

08007608 <memset>:
 8007608:	4402      	add	r2, r0
 800760a:	4603      	mov	r3, r0
 800760c:	4293      	cmp	r3, r2
 800760e:	d100      	bne.n	8007612 <memset+0xa>
 8007610:	4770      	bx	lr
 8007612:	f803 1b01 	strb.w	r1, [r3], #1
 8007616:	e7f9      	b.n	800760c <memset+0x4>

08007618 <_init>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr

08007624 <_fini>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr
